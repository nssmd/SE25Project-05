import React, { useState, useRef, useEffect } from 'react';
import { 
  MessageCircle, 
  X, 
  Send, 
  Phone, 
  Mail, 
  Clock, 
  Bot, 
  User,
  Minimize2,
  Maximize2,
  HelpCircle,
  Search,
  Trash2,
  Copy,
  MoreHorizontal
} from 'lucide-react';
import './CustomerService.css';

const CustomerService = ({ isOpen, onClose }) => {
  const [activeTab, setActiveTab] = useState('chat');
  const [message, setMessage] = useState('');
  const [chatMessages, setChatMessages] = useState([
    {
      id: 1,
      type: 'bot',
      content: 'ÊÇ®Â•ΩÔºÅÊàëÊòØAIÊô∫ËÉΩÂÆ¢ÊúçÔºåÂæàÈ´òÂÖ¥‰∏∫ÊÇ®ÊúçÂä°„ÄÇËØ∑ÈóÆÊúâ‰ªÄ‰πàÂèØ‰ª•Â∏ÆÂä©ÊÇ®ÁöÑÂêóÔºü',
      timestamp: new Date(),
    }
  ]);
  const [isMinimized, setIsMinimized] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [notification, setNotification] = useState('');
  const messagesEndRef = useRef(null);

  const faqs = [
    {
      id: 1,
      category: 'Ë¥¶Êà∑Áõ∏ÂÖ≥',
      question: 'Â¶Ç‰ΩïÊ≥®ÂÜåË¥¶Êà∑Ôºü',
      answer: 'ÁÇπÂáªÊ≥®ÂÜåÊåâÈíÆÔºåÂ°´ÂÜôÈÇÆÁÆ±ÂíåÂØÜÁ†ÅÂç≥ÂèØÂÆåÊàêÊ≥®ÂÜå„ÄÇÊ≥®ÂÜåÂêé‰ºöÊî∂Âà∞È™åËØÅÈÇÆ‰ª∂ÔºåËØ∑ÂèäÊó∂È™åËØÅ„ÄÇ'
    },
    {
      id: 2,
      category: 'Ë¥¶Êà∑Áõ∏ÂÖ≥',
      question: 'ÂøòËÆ∞ÂØÜÁ†ÅÊÄé‰πàÂäûÔºü',
      answer: 'Âú®ÁôªÂΩïÈ°µÈù¢ÁÇπÂáª"ÂøòËÆ∞ÂØÜÁ†Å"ÔºåËæìÂÖ•Ê≥®ÂÜåÈÇÆÁÆ±ÔºåÁ≥ªÁªü‰ºöÂèëÈÄÅÈáçÁΩÆÂØÜÁ†ÅÁöÑÈìæÊé•Âà∞ÊÇ®ÁöÑÈÇÆÁÆ±„ÄÇ'
    },
    {
      id: 3,
      category: '‰ΩøÁî®Áõ∏ÂÖ≥',
      question: 'Â¶Ç‰Ωï‰ΩøÁî®AIÂØπËØùÂäüËÉΩÔºü',
      answer: 'ÁôªÂΩïÂêéËøõÂÖ•‰∏ªÁïåÈù¢ÔºåÈÄâÊã©"ÊñáÁîüÊñá"ÂäüËÉΩÔºåÂú®ËæìÂÖ•Ê°Ü‰∏≠ËæìÂÖ•ÊÇ®ÁöÑÈóÆÈ¢òÔºåÁÇπÂáªÂèëÈÄÅÂç≥ÂèØÂºÄÂßãÂØπËØù„ÄÇ'
    },
    {
      id: 4,
      category: '‰ΩøÁî®Áõ∏ÂÖ≥',
      question: 'ÊîØÊåÅÂì™‰∫õAIÊ®°ÂûãÔºü',
      answer: 'Êàë‰ª¨ÊîØÊåÅGPT-4„ÄÅClaude-3Á≠â‰∏ªÊµÅAIÊ®°ÂûãÔºåÂêåÊó∂ÊîØÊåÅÁî®Êà∑‰∏ä‰º†Ëá™ÂÆö‰πâÊ®°ÂûãËøõË°åÂæÆË∞É„ÄÇ'
    },
    {
      id: 5,
      category: 'Êï∞ÊçÆÂæÆË∞É',
      question: 'Â¶Ç‰Ωï‰∏ä‰º†ËÆ≠ÁªÉÊï∞ÊçÆÔºü',
      answer: 'ËøõÂÖ•"Êï∞ÊçÆÂæÆË∞É"È°µÈù¢ÔºåÁÇπÂáª‰∏ä‰º†Âå∫ÂüüÔºåÈÄâÊã©JSONÊ†ºÂºèÁöÑËÆ≠ÁªÉÊï∞ÊçÆÊñá‰ª∂„ÄÇÊñá‰ª∂Ê†ºÂºèË¶ÅÊ±ÇÂåÖÂê´inputÂíåoutputÂ≠óÊÆµ„ÄÇ'
    },
    {
      id: 6,
      category: 'Êï∞ÊçÆÂæÆË∞É',
      question: 'ËÆ≠ÁªÉÈúÄË¶ÅÂ§öÈïøÊó∂Èó¥Ôºü',
      answer: 'ËÆ≠ÁªÉÊó∂Èó¥ÂèñÂÜ≥‰∫éÊï∞ÊçÆÈáèÂíåÊ®°ÂûãÂ§çÊùÇÂ∫¶Ôºå‰∏ÄËà¨Âú®30ÂàÜÈíüÂà∞Âá†Â∞èÊó∂‰∏çÁ≠â„ÄÇÊÇ®ÂèØ‰ª•Âú®ËÆ≠ÁªÉÁÆ°ÁêÜÈ°µÈù¢Êü•ÁúãËøõÂ∫¶„ÄÇ'
    },
    {
      id: 7,
      category: 'ËÆ°Ë¥πÁõ∏ÂÖ≥',
      question: 'Â¶Ç‰ΩïÊü•Áúã‰ΩøÁî®ÈáèÔºü',
      answer: 'Âú®‰∏™‰∫∫‰∏≠ÂøÉÁöÑ"Ë¥¶ÂçïÁÆ°ÁêÜ"È°µÈù¢ÂèØ‰ª•Êü•ÁúãËØ¶ÁªÜÁöÑ‰ΩøÁî®ÈáèÁªüËÆ°ÂíåË¥πÁî®ÊòéÁªÜ„ÄÇ'
    },
    {
      id: 8,
      category: 'ËÆ°Ë¥πÁõ∏ÂÖ≥',
      question: 'ÊîØÊåÅÂì™‰∫õÊîØ‰ªòÊñπÂºèÔºü',
      answer: 'ÊîØÊåÅÂæÆ‰ø°ÊîØ‰ªò„ÄÅÊîØ‰ªòÂÆù„ÄÅÈì∂Ë°åÂç°Á≠âÂ§öÁßçÊîØ‰ªòÊñπÂºè„ÄÇ'
    }
  ];

  const quickReplies = [
    'Â¶Ç‰ΩïÂºÄÂßã‰ΩøÁî®Ôºü',
    '‰ª∑Ê†ºÊòØÂ§öÂ∞ëÔºü',
    'ÊîØÊåÅÁöÑÊñá‰ª∂Ê†ºÂºè',
    'Â¶Ç‰ΩïËÅîÁ≥ªÊäÄÊúØÊîØÊåÅÔºü'
  ];

  useEffect(() => {
    scrollToBottom();
  }, [chatMessages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = async () => {
    if (!message.trim()) return;

    const newMessage = {
      id: Date.now(),
      type: 'user',
      content: message,
      timestamp: new Date(),
    };

    setChatMessages(prev => [...prev, newMessage]);
    setMessage('');

    // Ê®°ÊãüAIÂõûÂ§ç
    setTimeout(() => {
      const botReply = {
        id: Date.now() + 1,
        type: 'bot',
        content: getBotReply(message),
        timestamp: new Date(),
      };
      setChatMessages(prev => [...prev, botReply]);
    }, 1000);
  };

  const getBotReply = (userMessage) => {
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('‰ª∑Ê†º') || lowerMessage.includes('Ë¥πÁî®')) {
      return 'Êàë‰ª¨Êèê‰æõÂ§öÁßçÂ•óÈ§êÈÄâÊã©ÔºöÂü∫Á°ÄÁâàÂÖçË¥πÔºå‰∏ì‰∏öÁâà99ÂÖÉ/ÊúàÔºå‰ºÅ‰∏öÁâà199ÂÖÉ/Êúà„ÄÇÊØè‰∏™Â•óÈ§êÈÉΩÊúâ‰∏çÂêåÁöÑÂäüËÉΩÂíå‰ΩøÁî®ÈáèÈôêÂà∂„ÄÇÊÇ®ÂèØ‰ª•Âú®‰∏™‰∫∫‰∏≠ÂøÉÊü•ÁúãËØ¶ÁªÜ‰ø°ÊÅØ„ÄÇ';
    } else if (lowerMessage.includes('Ê≥®ÂÜå') || lowerMessage.includes('Ë¥¶Êà∑')) {
      return 'Ê≥®ÂÜåÂæàÁÆÄÂçïÔºÅÁÇπÂáª"Ê≥®ÂÜå"ÊåâÈíÆÔºåÂ°´ÂÜôÈÇÆÁÆ±ÂíåÂØÜÁ†ÅÂç≥ÂèØ„ÄÇÂ¶ÇÊûúÈÅáÂà∞ÈóÆÈ¢òÔºåËØ∑Ê£ÄÊü•ÈÇÆÁÆ±Ê†ºÂºèÊòØÂê¶Ê≠£Á°ÆÔºåÂØÜÁ†ÅÊòØÂê¶Ëá≥Â∞ë6‰Ωç„ÄÇ';
    } else if (lowerMessage.includes('ÂæÆË∞É') || lowerMessage.includes('ËÆ≠ÁªÉ')) {
      return 'Êï∞ÊçÆÂæÆË∞ÉÂäüËÉΩÂÖÅËÆ∏ÊÇ®‰∏ä‰º†Ëá™Â∑±ÁöÑÊï∞ÊçÆÊù•ËÆ≠ÁªÉ‰∏ìÂ±ûAIÊ®°Âûã„ÄÇÊîØÊåÅJSONÊ†ºÂºèÔºåËØ∑Á°Æ‰øùÊï∞ÊçÆÂåÖÂê´inputÂíåoutputÂ≠óÊÆµ„ÄÇËÆ≠ÁªÉÂÆåÊàêÂêéÂèØ‰ª•Âú®‰∏ªÁïåÈù¢‰ΩøÁî®ÊÇ®ÁöÑËá™ÂÆö‰πâÊ®°Âûã„ÄÇ';
    } else if (lowerMessage.includes('ËÅîÁ≥ª') || lowerMessage.includes('ÊäÄÊúØÊîØÊåÅ')) {
      return 'ÊÇ®ÂèØ‰ª•ÈÄöËøá‰ª•‰∏ãÊñπÂºèËÅîÁ≥ªÊàë‰ª¨Ôºö\nüìß ÈÇÆÁÆ±Ôºösupport@aiplatform.com\nüìû ÁîµËØùÔºö400-123-4567\nüïí ÊúçÂä°Êó∂Èó¥ÔºöÂ∑•‰ΩúÊó• 9:00-18:00';
    } else {
      return 'ÊÑüË∞¢ÊÇ®ÁöÑÂí®ËØ¢ÔºÅÂ¶ÇÊûúÊàëÁöÑÂõûÁ≠îÊ≤°ÊúâËß£ÂÜ≥ÊÇ®ÁöÑÈóÆÈ¢òÔºåÊÇ®ÂèØ‰ª•Êü•ÁúãÂ∏∏ËßÅÈóÆÈ¢òÊàñËÅîÁ≥ª‰∫∫Â∑•ÂÆ¢Êúç„ÄÇÊàë‰ª¨‰ºöÂ∞ΩÂø´‰∏∫ÊÇ®Êèê‰æõÂ∏ÆÂä©„ÄÇ';
    }
  };

  const handleQuickReply = (reply) => {
    setMessage(reply);
  };

  const showNotification = (message) => {
    setNotification(message);
    setTimeout(() => setNotification(''), 3000);
  };

  const deleteMessage = (messageId) => {
    if (window.confirm('Á°ÆÂÆöË¶ÅÂà†Èô§ËøôÊù°Ê∂àÊÅØÂêóÔºü')) {
      setChatMessages(prev => prev.filter(msg => msg.id !== messageId));
      showNotification('Ê∂àÊÅØÂ∑≤Âà†Èô§');
    }
  };

  const copyMessage = (content) => {
    navigator.clipboard.writeText(content).then(() => {
      showNotification('Ê∂àÊÅØÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø');
    }).catch(err => {
      console.error('Â§çÂà∂Â§±Ë¥•:', err);
      showNotification('Â§çÂà∂Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
    });
  };

  const filteredFaqs = faqs.filter(faq => 
    faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
    faq.answer.toLowerCase().includes(searchQuery.toLowerCase()) ||
    faq.category.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const faqCategories = [...new Set(faqs.map(faq => faq.category))];

  if (!isOpen) return null;

  return (
    <div className={`customer-service ${isMinimized ? 'minimized' : ''}`}>
      {notification && (
        <div className="notification">
          {notification}
        </div>
      )}
      <div className="cs-header">
        <div className="cs-title">
          <MessageCircle size={20} />
          <span>Âú®Á∫øÂÆ¢Êúç</span>
        </div>
        <div className="cs-controls">
          <button 
            className="cs-btn"
            onClick={() => setIsMinimized(!isMinimized)}
          >
            {isMinimized ? <Maximize2 size={16} /> : <Minimize2 size={16} />}
          </button>
          <button className="cs-btn" onClick={onClose}>
            <X size={16} />
          </button>
        </div>
      </div>

      {!isMinimized && (
        <div className="cs-content">
          <div className="cs-tabs">
            <button 
              className={`cs-tab ${activeTab === 'chat' ? 'active' : ''}`}
              onClick={() => setActiveTab('chat')}
            >
              Âú®Á∫øÂí®ËØ¢
            </button>
            <button 
              className={`cs-tab ${activeTab === 'faq' ? 'active' : ''}`}
              onClick={() => setActiveTab('faq')}
            >
              Â∏∏ËßÅÈóÆÈ¢ò
            </button>
            <button 
              className={`cs-tab ${activeTab === 'contact' ? 'active' : ''}`}
              onClick={() => setActiveTab('contact')}
            >
              ËÅîÁ≥ªÊàë‰ª¨
            </button>
          </div>

          <div className="cs-body">
            {activeTab === 'chat' && (
              <div className="chat-section">
                <div className="chat-messages">
                  {chatMessages.map(msg => (
                    <div key={msg.id} className={`chat-message ${msg.type}`}>
                      <div className="message-avatar">
                        {msg.type === 'bot' ? <Bot size={16} /> : <User size={16} />}
                      </div>
                      <div className="message-content">
                        <div className="message-text">{msg.content}</div>
                        <div className="message-time">
                          {msg.timestamp.toLocaleTimeString()}
                        </div>
                        <div className="message-actions">
                          <button 
                            className="action-btn copy"
                            onClick={() => copyMessage(msg.content)}
                            title="Â§çÂà∂Ê∂àÊÅØ"
                          >
                            <Copy size={12} />
                          </button>
                          <button 
                            className="action-btn delete"
                            onClick={() => deleteMessage(msg.id)}
                            title="Âà†Èô§Ê∂àÊÅØ"
                          >
                            <Trash2 size={12} />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                  <div ref={messagesEndRef} />
                </div>

                <div className="quick-replies">
                  {quickReplies.map((reply, index) => (
                    <button 
                      key={index}
                      className="quick-reply-btn"
                      onClick={() => handleQuickReply(reply)}
                    >
                      {reply}
                    </button>
                  ))}
                </div>

                <div className="chat-input">
                  <input
                    type="text"
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    placeholder="ËæìÂÖ•ÊÇ®ÁöÑÈóÆÈ¢ò..."
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                  />
                  <button onClick={handleSendMessage} className="send-btn">
                    <Send size={16} />
                  </button>
                </div>
              </div>
            )}

            {activeTab === 'faq' && (
              <div className="faq-section">
                <div className="faq-search">
                  <div className="search-box">
                    <Search size={16} />
                    <input
                      type="text"
                      placeholder="ÊêúÁ¥¢ÈóÆÈ¢ò..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                    />
                  </div>
                </div>

                <div className="faq-categories">
                  {faqCategories.map(category => (
                    <div key={category} className="faq-category">
                      <h4>{category}</h4>
                      {filteredFaqs
                        .filter(faq => faq.category === category)
                        .map(faq => (
                          <details key={faq.id} className="faq-item">
                            <summary>
                              <HelpCircle size={16} />
                              {faq.question}
                            </summary>
                            <div className="faq-answer">
                              {faq.answer}
                            </div>
                          </details>
                        ))}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {activeTab === 'contact' && (
              <div className="contact-section">
                <div className="contact-info">
                  <div className="contact-item">
                    <Mail size={20} />
                    <div>
                      <h4>ÈÇÆÁÆ±ÊîØÊåÅ</h4>
                      <p>support@aiplatform.com</p>
                      <span>24Â∞èÊó∂ÂÜÖÂõûÂ§ç</span>
                    </div>
                  </div>
                  
                  <div className="contact-item">
                    <Phone size={20} />
                    <div>
                      <h4>ÁîµËØùÊîØÊåÅ</h4>
                      <p>400-123-4567</p>
                      <span>Â∑•‰ΩúÊó• 9:00-18:00</span>
                    </div>
                  </div>
                  
                  <div className="contact-item">
                    <Clock size={20} />
                    <div>
                      <h4>ÊúçÂä°Êó∂Èó¥</h4>
                      <p>Âú®Á∫øÂÆ¢ÊúçÔºö24/7</p>
                      <span>‰∫∫Â∑•ÂÆ¢ÊúçÔºöÂ∑•‰ΩúÊó• 9:00-18:00</span>
                    </div>
                  </div>
                </div>

                <div className="contact-form">
                  <h4>ÁïôË®ÄÊùø</h4>
                  <form>
                    <div className="form-group">
                      <label>‰∏ªÈ¢ò</label>
                      <select>
                        <option>ÊäÄÊúØÈóÆÈ¢ò</option>
                        <option>Ë¥¶ÂçïÈóÆÈ¢ò</option>
                        <option>ÂäüËÉΩÂª∫ËÆÆ</option>
                        <option>ÂÖ∂‰ªñ</option>
                      </select>
                    </div>
                    <div className="form-group">
                      <label>ËØ¶ÁªÜÊèèËø∞</label>
                      <textarea 
                        rows={4} 
                        placeholder="ËØ∑ËØ¶ÁªÜÊèèËø∞ÊÇ®ÈÅáÂà∞ÁöÑÈóÆÈ¢ò..."
                      />
                    </div>
                    <button type="submit" className="submit-btn">
                      Êèê‰∫§ÁïôË®Ä
                    </button>
                  </form>
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default CustomerService; 