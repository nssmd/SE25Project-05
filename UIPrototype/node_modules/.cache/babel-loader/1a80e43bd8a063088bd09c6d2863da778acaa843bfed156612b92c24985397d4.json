{"ast":null,"code":"import { authAPI, userAPI } from './api';\nclass UserService {\n  constructor() {\n    this.currentUser = null;\n  }\n\n  // 用户登录\n  async login(credentials) {\n    try {\n      const response = await authAPI.login(credentials);\n\n      // Spring Boot直接返回AuthResponse对象\n      if (response && response.user) {\n        this.currentUser = response.user;\n\n        // 保存到localStorage\n        localStorage.setItem('user', JSON.stringify(response.user));\n        localStorage.setItem('authToken', response.token);\n        return {\n          success: true,\n          user: response.user,\n          token: response.token\n        };\n      } else {\n        throw new Error(response.message || '登录失败');\n      }\n    } catch (error) {\n      console.error('UserService login error:', error);\n      throw error;\n    }\n  }\n\n  // 用户注册\n  async register(userData) {\n    try {\n      const response = await authAPI.register(userData);\n\n      // Spring Boot直接返回AuthResponse对象\n      if (response && response.user) {\n        this.currentUser = response.user;\n\n        // 保存到localStorage\n        localStorage.setItem('user', JSON.stringify(response.user));\n        localStorage.setItem('authToken', response.token);\n        return {\n          success: true,\n          user: response.user,\n          token: response.token\n        };\n      } else {\n        throw new Error(response.message || '注册失败');\n      }\n    } catch (error) {\n      console.error('UserService register error:', error);\n      throw error;\n    }\n  }\n\n  // 验证token\n  async verify() {\n    try {\n      const response = await authAPI.verify();\n      if (response.success && response.user) {\n        this.currentUser = response.user;\n        return response;\n      } else {\n        // Token无效，清除本地存储\n        this.logout();\n        throw new Error('Token验证失败');\n      }\n    } catch (error) {\n      console.error('UserService verify error:', error);\n      this.logout();\n      throw error;\n    }\n  }\n\n  // 用户注销\n  async logout() {\n    try {\n      await authAPI.logout();\n    } catch (error) {\n      console.error('UserService logout error:', error);\n    } finally {\n      // 清除本地存储\n      this.currentUser = null;\n      localStorage.removeItem('user');\n      localStorage.removeItem('authToken');\n    }\n  }\n\n  // 修改密码\n  async changePassword(passwords) {\n    try {\n      const response = await authAPI.changePassword(passwords);\n      if (response.success) {\n        return response;\n      } else {\n        throw new Error(response.error || '修改密码失败');\n      }\n    } catch (error) {\n      console.error('UserService changePassword error:', error);\n      throw error;\n    }\n  }\n\n  // 获取用户profile\n  async getProfile() {\n    try {\n      const response = await userAPI.getProfile();\n      if (response.success && response.user) {\n        this.currentUser = response.user;\n        localStorage.setItem('user', JSON.stringify(response.user));\n        return response;\n      } else {\n        throw new Error(response.error || '获取用户信息失败');\n      }\n    } catch (error) {\n      console.error('UserService getProfile error:', error);\n      throw error;\n    }\n  }\n\n  // 更新用户profile\n  async updateProfile(userData) {\n    try {\n      const response = await userAPI.updateProfile(userData);\n      if (response.success && response.user) {\n        this.currentUser = response.user;\n        localStorage.setItem('user', JSON.stringify(response.user));\n        return response;\n      } else {\n        throw new Error(response.error || '更新用户信息失败');\n      }\n    } catch (error) {\n      console.error('UserService updateProfile error:', error);\n      throw error;\n    }\n  }\n\n  // 获取当前用户信息\n  getCurrentUser() {\n    if (!this.currentUser) {\n      const userStr = localStorage.getItem('user');\n      if (userStr) {\n        try {\n          this.currentUser = JSON.parse(userStr);\n        } catch (error) {\n          console.error('解析用户信息失败:', error);\n          localStorage.removeItem('user');\n        }\n      }\n    }\n    return this.currentUser;\n  }\n\n  // 检查是否已登录\n  isAuthenticated() {\n    const token = localStorage.getItem('authToken');\n    const user = this.getCurrentUser();\n    return !!(token && user);\n  }\n\n  // 获取权限\n  async getPermissions() {\n    try {\n      const response = await userAPI.getPermissions();\n      if (response.success) {\n        return response.permissions;\n      } else {\n        throw new Error(response.error || '获取权限失败');\n      }\n    } catch (error) {\n      console.error('UserService getPermissions error:', error);\n      throw error;\n    }\n  }\n\n  // 获取使用统计\n  async getUsageStats() {\n    try {\n      const response = await userAPI.getUsageStats();\n      if (response.success) {\n        return response.stats;\n      } else {\n        throw new Error(response.error || '获取使用统计失败');\n      }\n    } catch (error) {\n      console.error('UserService getUsageStats error:', error);\n      throw error;\n    }\n  }\n}\nconst userService = new UserService();\nexport default userService;","map":{"version":3,"names":["authAPI","userAPI","UserService","constructor","currentUser","login","credentials","response","user","localStorage","setItem","JSON","stringify","token","success","Error","message","error","console","register","userData","verify","logout","removeItem","changePassword","passwords","getProfile","updateProfile","getCurrentUser","userStr","getItem","parse","isAuthenticated","getPermissions","permissions","getUsageStats","stats","userService"],"sources":["G:/sework/UIPrototype/src/services/UserService.js"],"sourcesContent":["import { authAPI, userAPI } from './api';\n\nclass UserService {\n  constructor() {\n    this.currentUser = null;\n  }\n\n  // 用户登录\n  async login(credentials) {\n    try {\n      const response = await authAPI.login(credentials);\n      \n      // Spring Boot直接返回AuthResponse对象\n      if (response && response.user) {\n        this.currentUser = response.user;\n        \n        // 保存到localStorage\n        localStorage.setItem('user', JSON.stringify(response.user));\n        localStorage.setItem('authToken', response.token);\n        \n        return { success: true, user: response.user, token: response.token };\n      } else {\n        throw new Error(response.message || '登录失败');\n      }\n    } catch (error) {\n      console.error('UserService login error:', error);\n      throw error;\n    }\n  }\n\n  // 用户注册\n  async register(userData) {\n    try {\n      const response = await authAPI.register(userData);\n      \n      // Spring Boot直接返回AuthResponse对象\n      if (response && response.user) {\n        this.currentUser = response.user;\n        \n        // 保存到localStorage\n        localStorage.setItem('user', JSON.stringify(response.user));\n        localStorage.setItem('authToken', response.token);\n        \n        return { success: true, user: response.user, token: response.token };\n      } else {\n        throw new Error(response.message || '注册失败');\n      }\n    } catch (error) {\n      console.error('UserService register error:', error);\n      throw error;\n    }\n  }\n\n  // 验证token\n  async verify() {\n    try {\n      const response = await authAPI.verify();\n      \n      if (response.success && response.user) {\n        this.currentUser = response.user;\n        return response;\n      } else {\n        // Token无效，清除本地存储\n        this.logout();\n        throw new Error('Token验证失败');\n      }\n    } catch (error) {\n      console.error('UserService verify error:', error);\n      this.logout();\n      throw error;\n    }\n  }\n\n  // 用户注销\n  async logout() {\n    try {\n      await authAPI.logout();\n    } catch (error) {\n      console.error('UserService logout error:', error);\n    } finally {\n      // 清除本地存储\n      this.currentUser = null;\n      localStorage.removeItem('user');\n      localStorage.removeItem('authToken');\n    }\n  }\n\n  // 修改密码\n  async changePassword(passwords) {\n    try {\n      const response = await authAPI.changePassword(passwords);\n      \n      if (response.success) {\n        return response;\n      } else {\n        throw new Error(response.error || '修改密码失败');\n      }\n    } catch (error) {\n      console.error('UserService changePassword error:', error);\n      throw error;\n    }\n  }\n\n  // 获取用户profile\n  async getProfile() {\n    try {\n      const response = await userAPI.getProfile();\n      \n      if (response.success && response.user) {\n        this.currentUser = response.user;\n        localStorage.setItem('user', JSON.stringify(response.user));\n        return response;\n      } else {\n        throw new Error(response.error || '获取用户信息失败');\n      }\n    } catch (error) {\n      console.error('UserService getProfile error:', error);\n      throw error;\n    }\n  }\n\n  // 更新用户profile\n  async updateProfile(userData) {\n    try {\n      const response = await userAPI.updateProfile(userData);\n      \n      if (response.success && response.user) {\n        this.currentUser = response.user;\n        localStorage.setItem('user', JSON.stringify(response.user));\n        return response;\n      } else {\n        throw new Error(response.error || '更新用户信息失败');\n      }\n    } catch (error) {\n      console.error('UserService updateProfile error:', error);\n      throw error;\n    }\n  }\n\n  // 获取当前用户信息\n  getCurrentUser() {\n    if (!this.currentUser) {\n      const userStr = localStorage.getItem('user');\n      if (userStr) {\n        try {\n          this.currentUser = JSON.parse(userStr);\n        } catch (error) {\n          console.error('解析用户信息失败:', error);\n          localStorage.removeItem('user');\n        }\n      }\n    }\n    return this.currentUser;\n  }\n\n  // 检查是否已登录\n  isAuthenticated() {\n    const token = localStorage.getItem('authToken');\n    const user = this.getCurrentUser();\n    return !!(token && user);\n  }\n\n  // 获取权限\n  async getPermissions() {\n    try {\n      const response = await userAPI.getPermissions();\n      \n      if (response.success) {\n        return response.permissions;\n      } else {\n        throw new Error(response.error || '获取权限失败');\n      }\n    } catch (error) {\n      console.error('UserService getPermissions error:', error);\n      throw error;\n    }\n  }\n\n  // 获取使用统计\n  async getUsageStats() {\n    try {\n      const response = await userAPI.getUsageStats();\n      \n      if (response.success) {\n        return response.stats;\n      } else {\n        throw new Error(response.error || '获取使用统计失败');\n      }\n    } catch (error) {\n      console.error('UserService getUsageStats error:', error);\n      throw error;\n    }\n  }\n}\n\nconst userService = new UserService();\nexport default userService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}