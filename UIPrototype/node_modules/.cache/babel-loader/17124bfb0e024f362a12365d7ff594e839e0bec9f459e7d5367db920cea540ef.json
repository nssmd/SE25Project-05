{"ast":null,"code":"import axios from 'axios';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器 - 自动添加token\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log('API Request:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.baseURL + config.url, config.data);\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器 - 统一错误处理\napi.interceptors.response.use(response => {\n  return response.data;\n}, error => {\n  var _error$response, _error$response2, _error$response3, _error$response3$data, _error$response4, _error$response4$data;\n  console.error('API Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n    // Token过期或无效，清除本地存储并跳转到登录页\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n\n  // 返回更友好的错误信息\n  const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || error.message || '网络错误';\n  return Promise.reject(new Error(message));\n});\n\n// 认证相关API\nexport const authAPI = {\n  // 用户注册\n  register: userData => api.post('/auth/register', userData),\n  // 用户登录\n  login: credentials => api.post('/auth/login', credentials),\n  // 验证token\n  verify: () => api.get('/auth/verify'),\n  // 注销\n  logout: () => api.post('/auth/logout'),\n  // 修改密码\n  changePassword: passwords => api.post('/auth/change-password', passwords)\n};\n\n// 聊天相关API\nexport const chatAPI = {\n  // 创建新对话\n  create: chatData => api.post('/chat/create', chatData),\n  // 发送消息\n  sendMessage: (chatId, messageData) => api.post(`/chat/${chatId}/message`, messageData),\n  // 获取对话消息\n  getMessages: (chatId, params = {}) => api.get(`/chat/${chatId}/messages`, {\n    params\n  }),\n  // 删除对话\n  delete: chatId => api.delete(`/chat/${chatId}`),\n  // 更新对话标题\n  updateTitle: (chatId, title) => api.patch(`/chat/${chatId}/title`, {\n    title\n  }),\n  // 切换收藏状态\n  toggleFavorite: chatId => api.patch(`/chat/${chatId}/favorite`),\n  // 切换保护状态\n  toggleProtection: chatId => api.patch(`/chat/${chatId}/protect`)\n};\n\n// 历史记录相关API\nexport const historyAPI = {\n  // 获取对话列表\n  getChats: (params = {}) => api.get('/history/chats', {\n    params\n  }),\n  // 获取对话详情\n  getChatDetail: chatId => api.get(`/history/chats/${chatId}`),\n  // 获取搜索建议\n  getSearchSuggestions: query => api.get('/history/search-suggestions', {\n    params: {\n      query\n    }\n  }),\n  // 获取用户统计信息\n  getStats: () => api.get('/history/stats'),\n  // 批量操作对话\n  batchOperation: (operation, chatIds) => api.post('/history/batch-operation', {\n    operation,\n    chatIds\n  })\n};\n\n// 数据管理相关API\nexport const dataAPI = {\n  // 获取用户设置\n  getSettings: () => api.get('/data/settings'),\n  // 更新用户设置\n  updateSettings: settings => api.put('/data/settings', settings),\n  // 获取数据统计\n  getStatistics: () => api.get('/data/statistics'),\n  // 立即清理过期数据\n  cleanup: () => api.post('/data/cleanup'),\n  // 删除所有数据\n  deleteAll: confirmText => api.delete('/data/all', {\n    data: {\n      confirmText\n    }\n  }),\n  // 导出数据\n  exportData: () => api.get('/data/export')\n};\n\n// 用户相关API\nexport const userAPI = {\n  // 获取用户profile\n  getProfile: () => api.get('/user/profile'),\n  // 更新用户profile\n  updateProfile: userData => api.put('/user/profile', userData),\n  // 获取用户权限\n  getPermissions: () => api.get('/user/permissions'),\n  // 获取使用统计\n  getUsageStats: () => api.get('/user/usage-stats'),\n  // 获取活动日志\n  getActivityLogs: (params = {}) => api.get('/user/activity-logs', {\n    params\n  }),\n  // 消息相关\n  getMessages: () => api.get('/user/messages'),\n  markMessageAsRead: messageId => api.patch(`/user/messages/${messageId}/read`),\n  deleteMessage: messageId => api.delete(`/user/messages/${messageId}`),\n  // 客服对话\n  getSupportChat: () => api.get('/user/support/chat'),\n  sendToSupport: messageData => api.post('/user/support/message', messageData)\n};\n\n// 管理员相关API\nexport const adminAPI = {\n  // 获取所有用户\n  getUsers: (params = {}) => api.get('/admin/users', {\n    params\n  }),\n  // 更新用户状态\n  updateUserStatus: (userId, status) => api.patch(`/admin/users/${userId}/status`, {\n    status\n  }),\n  // 更新用户权限\n  updateUserPermissions: (userId, permissions) => api.patch(`/admin/users/${userId}/permissions`, {\n    permissions\n  }),\n  // 修改用户角色\n  updateUserRole: (userId, roleData) => api.put(`/admin/users/${userId}/role`, roleData),\n  // 发送消息给指定用户\n  sendMessage: (userId, messageData) => api.post(`/admin/users/${userId}/message`, messageData),\n  // 获取发送的消息历史\n  getSentMessages: (params = {}) => api.get('/admin/messages/sent', {\n    params\n  }),\n  // 获取系统统计\n  getStatistics: () => api.get('/admin/statistics'),\n  // 获取系统日志\n  getLogs: (params = {}) => api.get('/admin/logs', {\n    params\n  })\n};\n\n// 工具函数\nexport const apiUtils = {\n  // 设置认证token\n  setAuthToken: token => {\n    localStorage.setItem('authToken', token);\n  },\n  // 清除认证token\n  clearAuthToken: () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n  },\n  // 获取当前token\n  getAuthToken: () => {\n    return localStorage.getItem('authToken');\n  },\n  // 检查是否已登录\n  isAuthenticated: () => {\n    return !!localStorage.getItem('authToken');\n  },\n  // 获取当前用户信息\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  },\n  // 保存用户信息\n  setCurrentUser: user => {\n    localStorage.setItem('user', JSON.stringify(user));\n  },\n  // 检查用户角色\n  hasRole: role => {\n    const user = apiUtils.getCurrentUser();\n    return (user === null || user === void 0 ? void 0 : user.role) === role;\n  },\n  // 检查用户权限\n  hasPermission: permission => {\n    var _user$permissions;\n    const user = apiUtils.getCurrentUser();\n    return (user === null || user === void 0 ? void 0 : (_user$permissions = user.permissions) === null || _user$permissions === void 0 ? void 0 : _user$permissions[permission]) === true;\n  }\n};\n\n// 导出默认api实例\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","data","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response4","_error$response4$data","status","removeItem","window","location","href","message","Error","authAPI","register","userData","post","login","credentials","verify","get","logout","changePassword","passwords","chatAPI","chatData","sendMessage","chatId","messageData","getMessages","params","delete","updateTitle","title","patch","toggleFavorite","toggleProtection","historyAPI","getChats","getChatDetail","getSearchSuggestions","query","getStats","batchOperation","operation","chatIds","dataAPI","getSettings","updateSettings","settings","put","getStatistics","cleanup","deleteAll","confirmText","exportData","userAPI","getProfile","updateProfile","getPermissions","getUsageStats","getActivityLogs","markMessageAsRead","messageId","deleteMessage","getSupportChat","sendToSupport","adminAPI","getUsers","updateUserStatus","userId","updateUserPermissions","permissions","updateUserRole","roleData","getSentMessages","getLogs","apiUtils","setAuthToken","setItem","clearAuthToken","getAuthToken","isAuthenticated","getCurrentUser","userStr","JSON","parse","setCurrentUser","user","stringify","hasRole","role","hasPermission","permission","_user$permissions"],"sources":["G:/sework/UIPrototype/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 请求拦截器 - 自动添加token\napi.interceptors.request.use(\n  (config) => {\n    console.log('API Request:', config.method?.toUpperCase(), config.baseURL + config.url, config.data);\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器 - 统一错误处理\napi.interceptors.response.use(\n  (response) => {\n    return response.data;\n  },\n  (error) => {\n    console.error('API Error:', error.response?.data);\n    \n    if (error.response?.status === 401) {\n      // Token过期或无效，清除本地存储并跳转到登录页\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    \n    // 返回更友好的错误信息\n    const message = error.response?.data?.message || error.response?.data?.error || error.message || '网络错误';\n    return Promise.reject(new Error(message));\n  }\n);\n\n// 认证相关API\nexport const authAPI = {\n  // 用户注册\n  register: (userData) => api.post('/auth/register', userData),\n  \n  // 用户登录\n  login: (credentials) => api.post('/auth/login', credentials),\n  \n  // 验证token\n  verify: () => api.get('/auth/verify'),\n  \n  // 注销\n  logout: () => api.post('/auth/logout'),\n  \n  // 修改密码\n  changePassword: (passwords) => api.post('/auth/change-password', passwords),\n};\n\n// 聊天相关API\nexport const chatAPI = {\n  // 创建新对话\n  create: (chatData) => api.post('/chat/create', chatData),\n  \n  // 发送消息\n  sendMessage: (chatId, messageData) => api.post(`/chat/${chatId}/message`, messageData),\n  \n  // 获取对话消息\n  getMessages: (chatId, params = {}) => api.get(`/chat/${chatId}/messages`, { params }),\n  \n  // 删除对话\n  delete: (chatId) => api.delete(`/chat/${chatId}`),\n  \n  // 更新对话标题\n  updateTitle: (chatId, title) => api.patch(`/chat/${chatId}/title`, { title }),\n  \n  // 切换收藏状态\n  toggleFavorite: (chatId) => api.patch(`/chat/${chatId}/favorite`),\n  \n  // 切换保护状态\n  toggleProtection: (chatId) => api.patch(`/chat/${chatId}/protect`),\n};\n\n// 历史记录相关API\nexport const historyAPI = {\n  // 获取对话列表\n  getChats: (params = {}) => api.get('/history/chats', { params }),\n  \n  // 获取对话详情\n  getChatDetail: (chatId) => api.get(`/history/chats/${chatId}`),\n  \n  // 获取搜索建议\n  getSearchSuggestions: (query) => api.get('/history/search-suggestions', { params: { query } }),\n  \n  // 获取用户统计信息\n  getStats: () => api.get('/history/stats'),\n  \n  // 批量操作对话\n  batchOperation: (operation, chatIds) => api.post('/history/batch-operation', { operation, chatIds }),\n};\n\n// 数据管理相关API\nexport const dataAPI = {\n  // 获取用户设置\n  getSettings: () => api.get('/data/settings'),\n  \n  // 更新用户设置\n  updateSettings: (settings) => api.put('/data/settings', settings),\n  \n  // 获取数据统计\n  getStatistics: () => api.get('/data/statistics'),\n  \n  // 立即清理过期数据\n  cleanup: () => api.post('/data/cleanup'),\n  \n  // 删除所有数据\n  deleteAll: (confirmText) => api.delete('/data/all', { data: { confirmText } }),\n  \n  // 导出数据\n  exportData: () => api.get('/data/export'),\n};\n\n// 用户相关API\nexport const userAPI = {\n  // 获取用户profile\n  getProfile: () => api.get('/user/profile'),\n  \n  // 更新用户profile\n  updateProfile: (userData) => api.put('/user/profile', userData),\n  \n  // 获取用户权限\n  getPermissions: () => api.get('/user/permissions'),\n  \n  // 获取使用统计\n  getUsageStats: () => api.get('/user/usage-stats'),\n  \n  // 获取活动日志\n  getActivityLogs: (params = {}) => api.get('/user/activity-logs', { params }),\n  \n  // 消息相关\n  getMessages: () => api.get('/user/messages'),\n  markMessageAsRead: (messageId) => api.patch(`/user/messages/${messageId}/read`),\n  deleteMessage: (messageId) => api.delete(`/user/messages/${messageId}`),\n  \n  // 客服对话\n  getSupportChat: () => api.get('/user/support/chat'),\n  sendToSupport: (messageData) => api.post('/user/support/message', messageData),\n};\n\n// 管理员相关API\nexport const adminAPI = {\n  // 获取所有用户\n  getUsers: (params = {}) => api.get('/admin/users', { params }),\n  \n  // 更新用户状态\n  updateUserStatus: (userId, status) => api.patch(`/admin/users/${userId}/status`, { status }),\n  \n  // 更新用户权限\n  updateUserPermissions: (userId, permissions) => api.patch(`/admin/users/${userId}/permissions`, { permissions }),\n  \n  // 修改用户角色\n  updateUserRole: (userId, roleData) => api.put(`/admin/users/${userId}/role`, roleData),\n  \n  // 发送消息给指定用户\n  sendMessage: (userId, messageData) => api.post(`/admin/users/${userId}/message`, messageData),\n  \n  // 获取发送的消息历史\n  getSentMessages: (params = {}) => api.get('/admin/messages/sent', { params }),\n  \n  // 获取系统统计\n  getStatistics: () => api.get('/admin/statistics'),\n  \n  // 获取系统日志\n  getLogs: (params = {}) => api.get('/admin/logs', { params }),\n};\n\n// 工具函数\nexport const apiUtils = {\n  // 设置认证token\n  setAuthToken: (token) => {\n    localStorage.setItem('authToken', token);\n  },\n  \n  // 清除认证token\n  clearAuthToken: () => {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n  },\n  \n  // 获取当前token\n  getAuthToken: () => {\n    return localStorage.getItem('authToken');\n  },\n  \n  // 检查是否已登录\n  isAuthenticated: () => {\n    return !!localStorage.getItem('authToken');\n  },\n  \n  // 获取当前用户信息\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  },\n  \n  // 保存用户信息\n  setCurrentUser: (user) => {\n    localStorage.setItem('user', JSON.stringify(user));\n  },\n  \n  // 检查用户角色\n  hasRole: (role) => {\n    const user = apiUtils.getCurrentUser();\n    return user?.role === role;\n  },\n  \n  // 检查用户权限\n  hasPermission: (permission) => {\n    const user = apiUtils.getCurrentUser();\n    return user?.permissions?.[permission] === true;\n  },\n};\n\n// 导出默认api实例\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}