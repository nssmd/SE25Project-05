2025-07-03 10:23:09 [main] INFO  c.a.AiChatBackendApplication - Starting AiChatBackendApplication using Java 21.0.7 with PID 688 (/mnt/c/myProject/UIPrototype/SE25Project-05/UIPrototype/server/java-backend/target/classes started by yang in /mnt/c/myProject/UIPrototype/SE25Project-05/UIPrototype/server/java-backend)
2025-07-03 10:23:09 [main] DEBUG c.a.AiChatBackendApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-07-03 10:23:09 [main] INFO  c.a.AiChatBackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-03 10:23:13 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-03 10:23:13 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-03 10:23:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 1523 ms. Found 7 JPA repository interfaces.
2025-07-03 10:23:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-03 10:23:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-03 10:23:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.AdminMessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-03 10:23:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.ChatRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-03 10:23:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-03 10:23:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.SupportChatRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-03 10:23:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.SystemLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-03 10:23:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-03 10:23:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-03 10:23:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 98 ms. Found 0 Redis repository interfaces.
2025-07-03 10:23:17 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-03 10:23:17 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-03 10:23:17 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-07-03 10:23:17 [main] INFO  o.a.c.c.C.[.[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-07-03 10:23:17 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 7861 ms
2025-07-03 10:23:18 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-03 10:23:18 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-07-03 10:23:18 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-03 10:23:20 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-03 10:23:21 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-03 10:23:22 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6acb45c1
2025-07-03 10:23:22 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-03 10:23:22 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-03 10:23:22 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-07-03 10:23:27 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-03 10:23:27 [main] DEBUG org.hibernate.SQL - 
    alter table admin_messages 
       modify column from_user_id bigint not null
2025-07-03 10:23:27 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table admin_messages 
       modify column from_user_id bigint not null" via JDBC [Cannot change column 'from_user_id': used in a foreign key constraint 'admin_messages_ibfk_1']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table admin_messages 
       modify column from_user_id bigint not null" via JDBC [Cannot change column 'from_user_id': used in a foreign key constraint 'admin_messages_ibfk_1']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1429)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'from_user_id': used in a foreign key constraint 'admin_messages_ibfk_1'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-03 10:23:27 [main] DEBUG org.hibernate.SQL - 
    alter table admin_messages 
       modify column to_user_id bigint
2025-07-03 10:23:27 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table admin_messages 
       modify column to_user_id bigint" via JDBC [Cannot change column 'to_user_id': used in a foreign key constraint 'admin_messages_ibfk_2']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table admin_messages 
       modify column to_user_id bigint" via JDBC [Cannot change column 'to_user_id': used in a foreign key constraint 'admin_messages_ibfk_2']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1429)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'to_user_id': used in a foreign key constraint 'admin_messages_ibfk_2'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-03 10:23:27 [main] DEBUG org.hibernate.SQL - 
    alter table chats 
       modify column id bigint not null auto_increment
2025-07-03 10:23:27 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table chats 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'fk_messages_chat_id' of table 'database.messages']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table chats 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'fk_messages_chat_id' of table 'database.messages']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1429)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'id': used in a foreign key constraint 'fk_messages_chat_id' of table 'database.messages'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-03 10:23:27 [main] DEBUG org.hibernate.SQL - 
    alter table chats 
       modify column user_id bigint not null
2025-07-03 10:23:27 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table chats 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'chats_ibfk_1']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table chats 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'chats_ibfk_1']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1429)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'user_id': used in a foreign key constraint 'chats_ibfk_1'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-03 10:23:27 [main] DEBUG org.hibernate.SQL - 
    alter table messages 
       modify column chat_id bigint not null
2025-07-03 10:23:27 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table messages 
       modify column chat_id bigint not null" via JDBC [Cannot change column 'chat_id': used in a foreign key constraint 'fk_messages_chat_id']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table messages 
       modify column chat_id bigint not null" via JDBC [Cannot change column 'chat_id': used in a foreign key constraint 'fk_messages_chat_id']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1429)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'chat_id': used in a foreign key constraint 'fk_messages_chat_id'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-03 10:23:27 [main] DEBUG org.hibernate.SQL - 
    alter table system_logs 
       modify column user_id bigint
2025-07-03 10:23:28 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table system_logs 
       modify column user_id bigint" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'system_logs_ibfk_1']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table system_logs 
       modify column user_id bigint" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'system_logs_ibfk_1']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1429)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'user_id': used in a foreign key constraint 'system_logs_ibfk_1'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-03 10:23:28 [main] DEBUG org.hibernate.SQL - 
    alter table user_settings 
       modify column user_id bigint not null
2025-07-03 10:23:28 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table user_settings 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'fk_user_settings_user_id']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table user_settings 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'fk_user_settings_user_id']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1429)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'user_id': used in a foreign key constraint 'fk_user_settings_user_id'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-03 10:23:28 [main] DEBUG org.hibernate.SQL - 
    alter table users 
       modify column id bigint not null auto_increment
2025-07-03 10:23:28 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table users 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'admin_messages_ibfk_1' of table 'database.admin_messages']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table users 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'admin_messages_ibfk_1' of table 'database.admin_messages']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1429)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'id': used in a foreign key constraint 'admin_messages_ibfk_1' of table 'database.admin_messages'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-03 10:23:28 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-03 10:23:29 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-03 10:23:30 [main] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-07-03 10:23:31 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-03 10:23:32 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@78288298, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@544364ba, org.springframework.security.web.context.SecurityContextHolderFilter@6337c48d, org.springframework.security.web.header.HeaderWriterFilter@70832ddb, org.springframework.web.filter.CorsFilter@1e0ccdd6, org.springframework.security.web.authentication.logout.LogoutFilter@15dbd88e, com.aiplatform.security.JwtAuthenticationFilter@6dd65b79, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1c59f6ae, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@24ad12ff, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5f849a79, org.springframework.security.web.session.SessionManagementFilter@1006fe59, org.springframework.security.web.access.ExceptionTranslationFilter@10cd5b30, org.springframework.security.web.access.intercept.AuthorizationFilter@37f37699]
2025-07-03 10:23:35 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-07-03 10:23:35 [main] INFO  c.a.AiChatBackendApplication - Started AiChatBackendApplication in 27.585 seconds (process running for 26.732)
2025-07-03 10:25:10 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-03 10:25:10 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-03 10:25:10 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-07-03 10:25:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-03 10:25:10 [http-nio-8080-exec-3] ERROR c.a.security.JwtTokenProvider - JWT令牌验证失败: JWT expired at 2025-07-02T08:04:51Z. Current time: 2025-07-03T02:25:10Z, a difference of 66019990 milliseconds.  Allowed clock skew: 0 milliseconds.
2025-07-03 10:25:11 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-03 10:25:11 [http-nio-8080-exec-3] WARN  o.s.w.s.h.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/auth/me' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-07-03 10:25:11 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-07-03 10:25:11 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-07-03 10:25:11 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-03 10:25:11 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-07-03 10:25:11 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-03 10:25:11 [http-nio-8080-exec-4] ERROR c.a.security.JwtTokenProvider - JWT令牌验证失败: JWT expired at 2025-07-02T08:04:51Z. Current time: 2025-07-03T02:25:11Z, a difference of 66020069 milliseconds.  Allowed clock skew: 0 milliseconds.
2025-07-03 10:25:11 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-03 10:25:11 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-07-03 10:25:11 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /error
2025-07-03 10:25:11 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-03 10:25:11 [http-nio-8080-exec-4] DEBUG o.s.s.w.a.Http403ForbiddenEntryPoint - Pre-authenticated entry point called. Rejecting access
2025-07-03 10:25:50 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-07-03 10:25:50 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-03 10:25:50 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-07-03 10:25:50 [http-nio-8080-exec-8] INFO  c.a.controller.AuthController - 收到用户登录请求: ykf.263.net@sjtu.edu.cn
2025-07-03 10:25:50 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户登录请求: ykf.263.net@sjtu.edu.cn
2025-07-03 10:25:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:25:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:25:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:25:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:25:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:25:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:25:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:25:51 [http-nio-8080-exec-8] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-07-03 10:25:51 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 开始为用户 12 执行登录自动清理
2025-07-03 10:25:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-03 10:25:51 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户 12 没有需要清理的过期对话
2025-07-03 10:25:51 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户登录成功: 12
2025-07-03 10:25:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.User */update users 
    set
        email=?,
        last_login=?,
        password=?,
        permissions=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-07-03 10:25:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 10:25:51 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:25:51 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:25:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:25:51 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:25:51 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:25:51 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:25:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 10:25:51 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 10:25:51 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 10:25:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:25:51 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 10:25:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 10:25:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 10:25:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:25:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:25:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:25:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:25:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:25:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:25:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 10:25:51 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 10:25:51 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 10:25:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:25:51 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 10:25:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 10:25:55 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/12
2025-07-03 10:25:55 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:25:55 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:25:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:25:55 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:25:55 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:25:55 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:25:55 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/12
2025-07-03 10:25:55 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=12
2025-07-03 10:25:55 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 10:25:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:25:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 10:25:55 [http-nio-8080-exec-4] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=12, userId=12
2025-07-03 10:25:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 10:25:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-03 10:26:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 10:26:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 10:26:02 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 10:26:02 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:02 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 10:26:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 10:26:02 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 10:26:02 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:02 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:02 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:02 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:02 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:02 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:02 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 10:26:02 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 10:26:02 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:02 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:02 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 10:26:02 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 10:26:05 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/users?keyword=&page=0&size=50
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:05 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/users?keyword=&page=0&size=50
2025-07-03 10:26:05 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 10:26:05 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  c.a.controller.AdminController - === AdminController.getUsers 开始 ===
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  c.a.controller.AdminController - 管理员获取用户列表请求: keyword=, page=0, size=50
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  c.a.controller.AdminController - 当前请求用户: name=ykf.263.net@sjtu.edu.cn, authenticated=true, authorities=[ROLE_admin]
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  c.a.controller.AdminController - 调用 UserService.searchUsers...
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 开始 ===
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 请求参数: keyword=, page=0, size=50, sortBy=createdAt, sortDirection=desc
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 当前认证用户: name=ykf.263.net@sjtu.edu.cn, authorities=[ROLE_admin]
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 查询所有用户
2025-07-03 10:26:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 查询结果: 总数=9, 当前页数量=9
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=11, email=wzm050826@qq.com, username=zimo, role=support, status=banned
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=10, email=25812356531111@qq.com, username=25812356531111@qq.com, role=user, status=banned
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=9, email=258123565311@qq.com, username=258123565311@qq.com, role=support, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=8, email=aaa@example.com, username=aaa, role=support, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=6, email=25812356531@qq.com, username=zimo1, role=user, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=3, email=2581235653@qq.com, username=wzm11111, role=admin, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 结束 ===
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  c.a.controller.AdminController - 用户列表查询成功: 总数=9, 当前页数量=9
2025-07-03 10:26:05 [http-nio-8080-exec-9] INFO  c.a.controller.AdminController - === AdminController.getUsers 结束 ===
2025-07-03 10:26:05 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/users?keyword=&page=0&size=50
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:05 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/users?keyword=&page=0&size=50
2025-07-03 10:26:05 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 10:26:05 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  c.a.controller.AdminController - === AdminController.getUsers 开始 ===
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  c.a.controller.AdminController - 管理员获取用户列表请求: keyword=, page=0, size=50
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  c.a.controller.AdminController - 当前请求用户: name=ykf.263.net@sjtu.edu.cn, authenticated=true, authorities=[ROLE_admin]
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  c.a.controller.AdminController - 调用 UserService.searchUsers...
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 开始 ===
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 请求参数: keyword=, page=0, size=50, sortBy=createdAt, sortDirection=desc
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 当前认证用户: name=ykf.263.net@sjtu.edu.cn, authorities=[ROLE_admin]
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 查询所有用户
2025-07-03 10:26:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 查询结果: 总数=9, 当前页数量=9
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 用户: id=11, email=wzm050826@qq.com, username=zimo, role=support, status=banned
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 用户: id=10, email=25812356531111@qq.com, username=25812356531111@qq.com, role=user, status=banned
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 用户: id=9, email=258123565311@qq.com, username=258123565311@qq.com, role=support, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 用户: id=8, email=aaa@example.com, username=aaa, role=support, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 用户: id=6, email=25812356531@qq.com, username=zimo1, role=user, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 用户: id=3, email=2581235653@qq.com, username=wzm11111, role=admin, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 结束 ===
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  c.a.controller.AdminController - 用户列表查询成功: 总数=9, 当前页数量=9
2025-07-03 10:26:05 [http-nio-8080-exec-1] INFO  c.a.controller.AdminController - === AdminController.getUsers 结束 ===
2025-07-03 10:26:05 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/users?keyword=&page=0&size=50
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:05 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:05 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/users?keyword=&page=0&size=50
2025-07-03 10:26:05 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 10:26:05 [http-nio-8080-exec-10] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  c.a.controller.AdminController - === AdminController.getUsers 开始 ===
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  c.a.controller.AdminController - 管理员获取用户列表请求: keyword=, page=0, size=50
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  c.a.controller.AdminController - 当前请求用户: name=ykf.263.net@sjtu.edu.cn, authenticated=true, authorities=[ROLE_admin]
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  c.a.controller.AdminController - 调用 UserService.searchUsers...
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 开始 ===
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 请求参数: keyword=, page=0, size=50, sortBy=createdAt, sortDirection=desc
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 当前认证用户: name=ykf.263.net@sjtu.edu.cn, authorities=[ROLE_admin]
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 查询所有用户
2025-07-03 10:26:05 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 查询结果: 总数=9, 当前页数量=9
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 用户: id=11, email=wzm050826@qq.com, username=zimo, role=support, status=banned
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 用户: id=10, email=25812356531111@qq.com, username=25812356531111@qq.com, role=user, status=banned
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 用户: id=9, email=258123565311@qq.com, username=258123565311@qq.com, role=support, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 用户: id=8, email=aaa@example.com, username=aaa, role=support, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 用户: id=6, email=25812356531@qq.com, username=zimo1, role=user, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 用户: id=3, email=2581235653@qq.com, username=wzm11111, role=admin, status=active
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 结束 ===
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  c.a.controller.AdminController - 用户列表查询成功: 总数=9, 当前页数量=9
2025-07-03 10:26:05 [http-nio-8080-exec-10] INFO  c.a.controller.AdminController - === AdminController.getUsers 结束 ===
2025-07-03 10:26:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 10:26:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 10:26:19 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 10:26:19 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:19 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 10:26:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 10:26:19 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 10:26:19 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:19 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:19 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:19 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:19 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:19 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:19 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 10:26:19 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 10:26:19 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:19 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:19 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 10:26:19 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 10:26:23 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-03 10:26:23 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-03 10:26:23 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:23 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:23 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:23 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:23 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:23 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:23 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:23 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:23 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:23 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:23 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:23 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:23 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-03 10:26:23 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-03 10:26:23 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:23 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:23 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-03 10:26:23 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:23 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:23 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-03 10:26:23 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:23 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:23 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:23 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-03 10:26:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:23 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-03 10:26:23 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-03 10:26:23 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-03 10:26:23 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:23 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:23 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:23 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:23 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:23 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:23 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-03 10:26:23 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:23 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-03 10:26:23 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-03 10:26:23 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-03 10:26:27 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 10:26:27 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:27 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:27 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:27 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:27 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:27 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 10:26:27 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 10:26:27 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:27 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 10:26:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 10:26:27 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 10:26:27 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:27 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:27 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:27 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:27 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:27 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 10:26:27 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 10:26:27 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:27 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 10:26:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 10:26:29 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 10:26:29 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 10:26:29 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:29 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:29 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:29 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:29 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:29 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:29 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:29 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:29 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:29 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:29 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 10:26:29 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 10:26:29 [http-nio-8080-exec-5] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 10:26:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 10:26:29 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 10:26:29 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 10:26:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 10:26:29 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:29 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 10:26:29 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:29 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:29 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:29 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 10:26:29 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 10:26:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 10:26:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 10:26:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:29 [http-nio-8080-exec-10] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 10:26:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 10:26:32 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 10:26:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:32 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 10:26:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:33 [http-nio-8080-exec-4] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 10:26:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 10:26:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 10:26:33 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 10:26:33 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:33 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:33 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:33 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:33 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:33 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 10:26:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:33 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 10:26:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 10:26:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 10:26:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 10:26:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 10:26:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:35 [http-nio-8080-exec-7] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 10:26:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 10:26:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 10:26:43 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 10:26:43 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:43 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:43 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:43 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:43 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:43 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 10:26:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:43 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 10:26:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 10:26:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 10:26:43 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 10:26:43 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:43 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:43 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:43 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:43 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:43 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 10:26:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:43 [http-nio-8080-exec-5] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 10:26:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 10:26:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 10:26:45 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 10:26:45 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:45 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:45 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:45 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:45 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:45 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 10:26:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:45 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 10:26:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 10:26:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 10:26:45 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 10:26:45 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:45 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:45 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:45 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:45 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:45 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 10:26:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:45 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 10:26:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 10:26:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 10:26:47 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 10:26:47 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:47 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:47 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:47 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:47 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:47 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 10:26:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:47 [http-nio-8080-exec-10] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 10:26:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 10:26:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 10:26:47 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 10:26:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:47 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 10:26:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:47 [http-nio-8080-exec-3] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 10:26:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 10:26:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 10:26:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 10:26:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 10:26:51 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 10:26:51 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:51 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 10:26:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 10:26:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 10:26:51 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:51 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:51 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:51 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:51 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 10:26:51 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 10:26:51 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:51 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 10:26:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 10:26:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-07-03 10:26:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 10:26:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 10:26:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 10:26:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 10:26:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 10:26:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 10:26:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-07-03 14:58:23 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-07-03 14:58:23 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-03 14:58:23 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-07-03 14:58:23 [http-nio-8080-exec-10] INFO  c.a.controller.AuthController - 收到用户登录请求: ykf.263.net@sjtu.edu.cn
2025-07-03 14:58:23 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 用户登录请求: ykf.263.net@sjtu.edu.cn
2025-07-03 14:58:24 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 14:58:24 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 14:58:24 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 14:58:24 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 14:58:24 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 14:58:24 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 14:58:24 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 14:58:24 [http-nio-8080-exec-10] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-07-03 14:58:24 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 开始为用户 12 执行登录自动清理
2025-07-03 14:58:24 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-03 14:58:24 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 用户 12 没有需要清理的过期对话
2025-07-03 14:58:24 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 用户登录成功: 12
2025-07-03 14:58:24 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.User */update users 
    set
        email=?,
        last_login=?,
        password=?,
        permissions=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-07-03 14:58:25 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 14:58:25 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 14:58:25 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 14:58:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 14:58:25 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 14:58:25 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 14:58:25 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 14:58:25 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 14:58:25 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 14:58:25 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 14:58:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 14:58:25 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 14:58:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 14:58:26 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 14:58:26 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 14:58:26 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 14:58:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 14:58:26 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 14:58:26 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 14:58:26 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 14:58:26 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 14:58:26 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 14:58:26 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 14:58:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 14:58:26 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 14:58:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:08:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-07-03 15:08:20 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:08:20 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:08:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:20 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:08:20 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:08:20 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:08:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-07-03 15:08:28 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-07-03 15:08:28 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-03 15:08:28 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-07-03 15:08:28 [http-nio-8080-exec-8] INFO  c.a.controller.AuthController - 收到用户登录请求: ykf.263.net@sjtu.edu.cn
2025-07-03 15:08:28 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户登录请求: ykf.263.net@sjtu.edu.cn
2025-07-03 15:08:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:28 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:08:28 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:08:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:28 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:08:28 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:08:28 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:08:28 [http-nio-8080-exec-8] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-07-03 15:08:28 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 开始为用户 12 执行登录自动清理
2025-07-03 15:08:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-03 15:08:29 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户 12 没有需要清理的过期对话
2025-07-03 15:08:29 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户登录成功: 12
2025-07-03 15:08:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.User */update users 
    set
        email=?,
        last_login=?,
        password=?,
        permissions=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-07-03 15:08:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:08:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:08:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:08:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:08:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:08:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:08:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:08:29 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:08:29 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:08:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:29 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:08:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:08:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:08:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:08:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:08:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:08:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:08:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:08:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:08:29 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:08:29 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:08:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:29 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:08:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:08:30 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-07-03 15:08:30 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:08:30 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:08:30 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:30 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:08:30 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:08:30 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:08:30 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-07-03 15:08:36 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-07-03 15:08:36 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-03 15:08:36 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-07-03 15:08:36 [http-nio-8080-exec-6] INFO  c.a.controller.AuthController - 收到用户登录请求: zhangsan@example.com
2025-07-03 15:08:36 [http-nio-8080-exec-6] INFO  com.aiplatform.service.UserService - 用户登录请求: zhangsan@example.com
2025-07-03 15:08:36 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:36 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:08:36 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: zhangsan@example.com
2025-07-03 15:08:36 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:36 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 15:08:36 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_support
2025-07-03 15:08:36 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_support]
2025-07-03 15:08:36 [http-nio-8080-exec-6] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-07-03 15:08:36 [http-nio-8080-exec-6] INFO  com.aiplatform.service.UserService - 开始为用户 13 执行登录自动清理
2025-07-03 15:08:36 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-03 15:08:36 [http-nio-8080-exec-6] INFO  com.aiplatform.service.UserService - 用户 13 没有需要清理的过期对话
2025-07-03 15:08:36 [http-nio-8080-exec-6] INFO  com.aiplatform.service.UserService - 用户登录成功: 13
2025-07-03 15:08:36 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.User */update users 
    set
        email=?,
        last_login=?,
        password=?,
        permissions=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-07-03 15:08:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:08:36 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:08:36 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: zhangsan@example.com
2025-07-03 15:08:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:36 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 15:08:36 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_support
2025-07-03 15:08:36 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_support]
2025-07-03 15:08:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:08:36 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:08:36 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: zhangsan@example.com
2025-07-03 15:08:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:36 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:08:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:08:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:08:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:08:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: zhangsan@example.com
2025-07-03 15:08:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 15:08:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_support
2025-07-03 15:08:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_support]
2025-07-03 15:08:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:08:36 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:08:36 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: zhangsan@example.com
2025-07-03 15:08:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:36 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:08:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:08:37 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/support/customer-chats
2025-07-03 15:08:37 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 15:08:37 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:08:37 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:08:37 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: zhangsan@example.com
2025-07-03 15:08:37 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: zhangsan@example.com
2025-07-03 15:08:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:37 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 15:08:37 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_support
2025-07-03 15:08:37 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_support]
2025-07-03 15:08:37 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/support/customer-chats
2025-07-03 15:08:37 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getCustomerChats(); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 15:08:37 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 15:08:37 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_support
2025-07-03 15:08:37 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_support]
2025-07-03 15:08:37 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 15:08:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:37 [http-nio-8080-exec-1] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getCustomerChats(); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 15:08:37 [http-nio-8080-exec-1] INFO  c.a.controller.AdminController - 客服工作台访问请求:
2025-07-03 15:08:37 [http-nio-8080-exec-1] INFO  c.a.controller.AdminController - - 用户名: zhangsan@example.com
2025-07-03 15:08:37 [http-nio-8080-exec-1] INFO  c.a.controller.AdminController - - 权限列表: [ROLE_support]
2025-07-03 15:08:37 [http-nio-8080-exec-1] INFO  c.a.controller.AdminController - - 是否已认证: true
2025-07-03 15:08:37 [http-nio-8080-exec-1] INFO  c.a.controller.AdminController - 开始获取客户对话列表
2025-07-03 15:08:37 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取用户 zhangsan@example.com 的消息列表
2025-07-03 15:08:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:08:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        sc.userId 
    FROM
        SupportChat sc 
    WHERE
        sc.senderType = 'USER' 
    GROUP BY
        sc.userId 
    ORDER BY
        MAX(sc.createdAt) DESC */ select
            sc1_0.user_id 
        from
            support_chats sc1_0 
        where
            sc1_0.sender_type='USER' 
        group by
            sc1_0.user_id 
        order by
            max(sc1_0.created_at) desc
2025-07-03 15:08:37 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 15:08:37 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:08:37 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: zhangsan@example.com
2025-07-03 15:08:37 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:37 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 15:08:37 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_support
2025-07-03 15:08:37 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_support]
2025-07-03 15:08:37 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 15:08:37 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:08:37 [http-nio-8080-exec-4] INFO  c.a.controller.UserController - 获取用户 zhangsan@example.com 的消息列表
2025-07-03 15:08:37 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:08:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:08:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:08:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:08:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:08:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:08:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:08:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:08:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:08:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:08:38 [http-nio-8080-exec-1] INFO  c.a.controller.AdminController - 获取到 5 个客户对话
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/support/customer-chats
2025-07-03 15:08:38 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:08:38 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: zhangsan@example.com
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:38 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 15:08:38 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_support
2025-07-03 15:08:38 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_support]
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/support/customer-chats
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getCustomerChats(); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getCustomerChats(); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 15:08:38 [http-nio-8080-exec-6] INFO  c.a.controller.AdminController - 客服工作台访问请求:
2025-07-03 15:08:38 [http-nio-8080-exec-6] INFO  c.a.controller.AdminController - - 用户名: zhangsan@example.com
2025-07-03 15:08:38 [http-nio-8080-exec-6] INFO  c.a.controller.AdminController - - 权限列表: [ROLE_support]
2025-07-03 15:08:38 [http-nio-8080-exec-6] INFO  c.a.controller.AdminController - - 是否已认证: true
2025-07-03 15:08:38 [http-nio-8080-exec-6] INFO  c.a.controller.AdminController - 开始获取客户对话列表
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        sc.userId 
    FROM
        SupportChat sc 
    WHERE
        sc.senderType = 'USER' 
    GROUP BY
        sc.userId 
    ORDER BY
        MAX(sc.createdAt) DESC */ select
            sc1_0.user_id 
        from
            support_chats sc1_0 
        where
            sc1_0.sender_type='USER' 
        group by
            sc1_0.user_id 
        order by
            max(sc1_0.created_at) desc
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:08:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:08:38 [http-nio-8080-exec-6] INFO  c.a.controller.AdminController - 获取到 5 个客户对话
2025-07-03 15:08:52 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:08:52 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:08:52 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: zhangsan@example.com
2025-07-03 15:08:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:52 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 15:08:52 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_support
2025-07-03 15:08:52 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_support]
2025-07-03 15:08:52 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:08:52 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:08:52 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: zhangsan@example.com
2025-07-03 15:08:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:52 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:08:53 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:08:53 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:08:53 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:08:53 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: zhangsan@example.com
2025-07-03 15:08:53 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:53 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 15:08:53 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_support
2025-07-03 15:08:53 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_support]
2025-07-03 15:08:53 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:08:53 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:08:53 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: zhangsan@example.com
2025-07-03 15:08:53 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:53 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:08:53 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:08:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-07-03 15:08:54 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:08:54 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: zhangsan@example.com
2025-07-03 15:08:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:08:54 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 15:08:54 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_support
2025-07-03 15:08:54 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_support]
2025-07-03 15:08:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-07-03 15:09:01 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-07-03 15:09:01 [http-nio-8080-exec-7] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-03 15:09:01 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-07-03 15:09:01 [http-nio-8080-exec-7] INFO  c.a.controller.AuthController - 收到用户登录请求: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 用户登录请求: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:01 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:01 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:01 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:01 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:01 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:01 [http-nio-8080-exec-7] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-07-03 15:09:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 开始为用户 12 执行登录自动清理
2025-07-03 15:09:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-03 15:09:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 用户 12 没有需要清理的过期对话
2025-07-03 15:09:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 用户登录成功: 12
2025-07-03 15:09:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.User */update users 
    set
        email=?,
        last_login=?,
        password=?,
        permissions=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-07-03 15:09:01 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:09:01 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:01 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:01 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:01 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:01 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:01 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:01 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:09:01 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:09:01 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:01 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:01 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:09:01 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:09:01 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:09:01 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:01 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:01 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:01 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:01 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:01 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:01 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:09:01 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:09:01 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:01 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:01 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:09:01 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:09:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 15:09:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 15:09:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 15:09:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 15:09:02 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 15:09:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 15:09:02 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 15:09:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:09:02 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 15:09:02 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 15:09:02 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:02 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:02 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:02 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:02 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:02 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:02 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:02 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:02 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 15:09:02 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 15:09:02 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 15:09:02 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:02 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:02 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:02 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 15:09:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:02 [http-nio-8080-exec-2] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 15:09:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:09:04 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:09:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:04 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:09:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:04 [http-nio-8080-exec-10] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:09:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:09:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:09:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:09:04 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:04 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:04 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:04 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:04 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:09:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:04 [http-nio-8080-exec-3] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:09:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:09:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:09:06 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:09:06 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:06 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:06 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:06 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:06 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:06 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:09:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:06 [http-nio-8080-exec-4] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:09:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:09:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:09:07 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:09:07 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:07 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:07 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:07 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:07 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:07 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:07 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:09:07 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:07 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:09:07 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:09:07 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:09:08 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:09:08 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:08 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:08 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:08 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:08 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:08 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:09:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:08 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:09:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:09:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:09:08 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:09:08 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:08 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:08 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:08 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:08 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:08 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:08 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:09:08 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:08 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:09:08 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:09:08 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:09:34 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:09:34 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:34 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:34 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:34 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:34 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:34 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:09:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:34 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:09:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:09:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:09:34 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:09:34 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:34 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:34 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:34 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:34 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:34 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:34 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:09:34 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:34 [http-nio-8080-exec-2] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:09:34 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:09:34 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:09:35 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:09:35 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:35 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:35 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:35 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:35 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:35 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:09:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:35 [http-nio-8080-exec-5] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:09:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:09:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:09:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:09:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:09:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:35 [http-nio-8080-exec-7] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:09:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:09:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:09:54 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:09:54 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:54 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:54 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:54 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:54 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:54 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:09:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:54 [http-nio-8080-exec-3] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:09:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:09:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:09:55 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:09:55 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:55 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:55 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:55 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:55 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:55 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:09:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:55 [http-nio-8080-exec-4] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:09:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:09:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:09:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:09:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:09:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:09:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:09:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:09:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:09:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:09:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:09:55 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:09:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:09:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:10:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:10:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:10:16 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:10:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:10:16 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:10:16 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:10:16 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:10:16 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:10:16 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:10:16 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:10:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:10:16 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:10:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:10:16 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:10:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:10:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:10:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:10:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:10:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:10:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:10:16 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:10:16 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:10:16 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:10:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:10:16 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:10:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:12:47 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-07-03 15:12:47 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:12:47 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:12:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:12:47 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:12:47 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:12:47 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:12:47 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-07-03 15:12:58 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-07-03 15:12:58 [http-nio-8080-exec-10] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-03 15:12:58 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-07-03 15:12:58 [http-nio-8080-exec-10] INFO  c.a.controller.AuthController - 收到用户登录请求: ykf.263.net@sjtu.edu.cn
2025-07-03 15:12:58 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 用户登录请求: ykf.263.net@sjtu.edu.cn
2025-07-03 15:12:58 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:12:58 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:12:58 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:12:58 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:12:58 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:12:58 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:12:58 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:12:58 [http-nio-8080-exec-10] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-07-03 15:12:58 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 开始为用户 12 执行登录自动清理
2025-07-03 15:12:58 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-03 15:12:58 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 用户 12 没有需要清理的过期对话
2025-07-03 15:12:58 [http-nio-8080-exec-10] INFO  com.aiplatform.service.UserService - 用户登录成功: 12
2025-07-03 15:12:58 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.User */update users 
    set
        email=?,
        last_login=?,
        password=?,
        permissions=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-07-03 15:12:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:12:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:12:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:12:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:12:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:12:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:12:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:12:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:12:58 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:12:58 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:12:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:12:58 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:12:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:12:58 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:12:58 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:12:58 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:12:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:12:58 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:12:58 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:12:58 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:12:58 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:12:58 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:12:58 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:12:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:12:58 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:12:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:20:42 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:20:42 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:20:42 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:20:42 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:20:43 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:20:43 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:20:43 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:20:43 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:20:43 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:20:43 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:20:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:20:43 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:20:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:20:54 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:20:54 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:20:54 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:20:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:20:55 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:20:55 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:20:55 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:20:55 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:20:55 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:20:55 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:20:55 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:20:55 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:20:55 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:21:07 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:21:07 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:21:07 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:21:07 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:21:08 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:21:08 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:21:08 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:21:08 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:21:08 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:21:08 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:21:08 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:21:08 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:21:08 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:21:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:21:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:21:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:21:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:21:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:21:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:21:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:21:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:21:08 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:21:08 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:21:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:21:08 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:21:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:23:07 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:23:07 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:23:07 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:23:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:23:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:23:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:23:08 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:23:08 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:23:08 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:23:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:08 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:23:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:23:08 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:23:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:23:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:23:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:23:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:23:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:23:08 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:23:08 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:23:08 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:23:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:08 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:23:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:23:49 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:23:49 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:23:49 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:23:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:49 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:23:49 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:23:49 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:23:49 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:23:49 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:23:49 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:23:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:49 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:23:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:23:49 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:23:49 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:23:49 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:23:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:49 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:23:49 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:23:49 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:23:49 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:23:49 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:23:49 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:23:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:49 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:23:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:23:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 15:23:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 15:23:51 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:23:51 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:23:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:23:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:23:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:23:51 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:23:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:23:51 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:23:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:23:51 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:23:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 15:23:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 15:23:51 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 15:23:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 15:23:51 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 15:23:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:23:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 15:23:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:23:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:23:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 15:23:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:23:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:23:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:23:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:23:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:23:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 15:23:51 [http-nio-8080-exec-2] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 15:23:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 15:23:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:23:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:23:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:23:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 15:23:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:51 [http-nio-8080-exec-5] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 15:23:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:23:53 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:23:53 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:23:53 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:23:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:53 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:23:53 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:23:53 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:23:53 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:23:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:53 [http-nio-8080-exec-7] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:23:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:23:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:23:53 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:23:53 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:23:53 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:23:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:53 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:23:53 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:23:53 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:23:53 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:23:54 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:23:54 [http-nio-8080-exec-10] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:23:54 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:23:54 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:24:08 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:24:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:08 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:24:08 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:24:08 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:08 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:24:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:24:08 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:24:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:08 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:24:08 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:24:08 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:08 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:24:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:24:10 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-03 15:24:10 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-03 15:24:10 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:10 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:10 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:10 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:10 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:11 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:11 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:11 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:11 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:11 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:11 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:11 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-03 15:24:11 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-03 15:24:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-03 15:24:11 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-03 15:24:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-03 15:24:11 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:11 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:11 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-03 15:24:11 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:11 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:11 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:11 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-03 15:24:11 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:11 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-03 15:24:11 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:11 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:11 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:11 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:11 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:11 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-03 15:24:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-03 15:24:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-03 15:24:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-03 15:24:13 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:24:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:13 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:24:13 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:24:13 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:13 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:24:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:24:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:24:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:24:13 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:24:13 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:13 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:24:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:24:16 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 15:24:16 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 15:24:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:16 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:16 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:16 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:16 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:16 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:16 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 15:24:16 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 15:24:16 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 15:24:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 15:24:16 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 15:24:16 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 15:24:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:24:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:16 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 15:24:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:16 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 15:24:16 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 15:24:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 15:24:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:16 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 15:24:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:16 [http-nio-8080-exec-5] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 15:24:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:24:20 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:24:20 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:20 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:20 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:20 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:20 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:20 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:24:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:20 [http-nio-8080-exec-2] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:24:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:24:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:24:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-03 15:24:20 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:20 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:21 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:21 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:21 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:21 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-03 15:24:21 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:21 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的客服对话记录
2025-07-03 15:24:21 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-03 15:24:21 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 15:24:23 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:24:23 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:23 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:23 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:23 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:23 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:23 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:23 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:24:23 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:24:23 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:23 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:23 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:24:23 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:24:23 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:24:23 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:23 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:23 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:23 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:23 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:23 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:23 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:24:23 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:24:23 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:23 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:23 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:24:23 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:24:35 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 15:24:35 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 15:24:35 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:35 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:35 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:35 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:35 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:35 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:35 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:35 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:35 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:35 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:35 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 15:24:35 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 15:24:35 [http-nio-8080-exec-3] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 15:24:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 15:24:35 [http-nio-8080-exec-4] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 15:24:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:24:35 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 15:24:35 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:35 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:35 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:35 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:35 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:35 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:35 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 15:24:35 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 15:24:35 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 15:24:35 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 15:24:35 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:35 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:35 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:35 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:35 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:35 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 15:24:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:35 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 15:24:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:24:37 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:24:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:37 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:37 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:24:37 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:24:37 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:37 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:37 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:24:37 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:24:37 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:24:37 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:24:37 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:37 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:37 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:24:37 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:24:37 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:24:37 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:24:37 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:24:37 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:24:37 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:24:37 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:24:37 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:25:03 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 15:25:03 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 15:25:03 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:03 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:03 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:03 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:03 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:03 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:03 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 15:25:03 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 15:25:03 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 15:25:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:03 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 15:25:03 [http-nio-8080-exec-2] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 15:25:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:25:03 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 15:25:03 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:03 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:03 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:03 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:03 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:03 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 15:25:03 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 15:25:03 [http-nio-8080-exec-7] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 15:25:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 15:25:03 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:03 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:03 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:03 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:03 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:03 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:03 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 15:25:03 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:03 [http-nio-8080-exec-10] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 15:25:03 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:25:06 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:25:06 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:06 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:06 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:06 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:06 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:06 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:06 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:25:06 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:25:06 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:06 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:06 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:25:06 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:25:06 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:25:06 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:06 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:06 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:06 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:06 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:06 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:25:06 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:25:06 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:06 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:25:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:25:08 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/users?keyword=&page=0&size=50
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:08 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/users?keyword=&page=0&size=50
2025-07-03 15:25:08 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 15:25:08 [http-nio-8080-exec-9] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  c.a.controller.AdminController - === AdminController.getUsers 开始 ===
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  c.a.controller.AdminController - 管理员获取用户列表请求: keyword=, page=0, size=50
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  c.a.controller.AdminController - 当前请求用户: name=ykf.263.net@sjtu.edu.cn, authenticated=true, authorities=[ROLE_admin]
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  c.a.controller.AdminController - 调用 UserService.searchUsers...
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 开始 ===
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 请求参数: keyword=, page=0, size=50, sortBy=createdAt, sortDirection=desc
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 当前认证用户: name=ykf.263.net@sjtu.edu.cn, authorities=[ROLE_admin]
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 查询所有用户
2025-07-03 15:25:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 查询结果: 总数=9, 当前页数量=9
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=11, email=wzm050826@qq.com, username=zimo, role=support, status=banned
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=10, email=25812356531111@qq.com, username=25812356531111@qq.com, role=user, status=banned
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=9, email=258123565311@qq.com, username=258123565311@qq.com, role=support, status=active
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=8, email=aaa@example.com, username=aaa, role=support, status=active
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=6, email=25812356531@qq.com, username=zimo1, role=user, status=active
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - 用户: id=3, email=2581235653@qq.com, username=wzm11111, role=admin, status=active
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 结束 ===
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  c.a.controller.AdminController - 用户列表查询成功: 总数=9, 当前页数量=9
2025-07-03 15:25:08 [http-nio-8080-exec-9] INFO  c.a.controller.AdminController - === AdminController.getUsers 结束 ===
2025-07-03 15:25:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/users?keyword=&page=0&size=50
2025-07-03 15:25:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/users?keyword=&page=0&size=50
2025-07-03 15:25:08 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 15:25:08 [http-nio-8080-exec-5] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 15:25:08 [http-nio-8080-exec-5] INFO  c.a.controller.AdminController - === AdminController.getUsers 开始 ===
2025-07-03 15:25:08 [http-nio-8080-exec-5] INFO  c.a.controller.AdminController - 管理员获取用户列表请求: keyword=, page=0, size=50
2025-07-03 15:25:08 [http-nio-8080-exec-5] INFO  c.a.controller.AdminController - 当前请求用户: name=ykf.263.net@sjtu.edu.cn, authenticated=true, authorities=[ROLE_admin]
2025-07-03 15:25:08 [http-nio-8080-exec-5] INFO  c.a.controller.AdminController - 调用 UserService.searchUsers...
2025-07-03 15:25:08 [http-nio-8080-exec-5] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 开始 ===
2025-07-03 15:25:08 [http-nio-8080-exec-5] INFO  com.aiplatform.service.UserService - 请求参数: keyword=, page=0, size=50, sortBy=createdAt, sortDirection=desc
2025-07-03 15:25:08 [http-nio-8080-exec-5] INFO  com.aiplatform.service.UserService - 当前认证用户: name=ykf.263.net@sjtu.edu.cn, authorities=[ROLE_admin]
2025-07-03 15:25:08 [http-nio-8080-exec-5] INFO  com.aiplatform.service.UserService - 查询所有用户
2025-07-03 15:25:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:25:09 [http-nio-8080-exec-5] INFO  com.aiplatform.service.UserService - 查询结果: 总数=9, 当前页数量=9
2025-07-03 15:25:09 [http-nio-8080-exec-5] INFO  com.aiplatform.service.UserService - 用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 15:25:09 [http-nio-8080-exec-5] INFO  com.aiplatform.service.UserService - 用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:09 [http-nio-8080-exec-5] INFO  com.aiplatform.service.UserService - 用户: id=11, email=wzm050826@qq.com, username=zimo, role=support, status=banned
2025-07-03 15:25:09 [http-nio-8080-exec-5] INFO  com.aiplatform.service.UserService - 用户: id=10, email=25812356531111@qq.com, username=25812356531111@qq.com, role=user, status=banned
2025-07-03 15:25:09 [http-nio-8080-exec-5] INFO  com.aiplatform.service.UserService - 用户: id=9, email=258123565311@qq.com, username=258123565311@qq.com, role=support, status=active
2025-07-03 15:25:09 [http-nio-8080-exec-5] INFO  com.aiplatform.service.UserService - 用户: id=8, email=aaa@example.com, username=aaa, role=support, status=active
2025-07-03 15:25:09 [http-nio-8080-exec-5] INFO  com.aiplatform.service.UserService - 用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-03 15:25:09 [http-nio-8080-exec-5] INFO  com.aiplatform.service.UserService - 用户: id=6, email=25812356531@qq.com, username=zimo1, role=user, status=active
2025-07-03 15:25:09 [http-nio-8080-exec-5] INFO  com.aiplatform.service.UserService - 用户: id=3, email=2581235653@qq.com, username=wzm11111, role=admin, status=active
2025-07-03 15:25:09 [http-nio-8080-exec-5] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 结束 ===
2025-07-03 15:25:09 [http-nio-8080-exec-5] INFO  c.a.controller.AdminController - 用户列表查询成功: 总数=9, 当前页数量=9
2025-07-03 15:25:09 [http-nio-8080-exec-5] INFO  c.a.controller.AdminController - === AdminController.getUsers 结束 ===
2025-07-03 15:25:09 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/users?keyword=&page=0&size=50
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:09 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:09 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/users?keyword=&page=0&size=50
2025-07-03 15:25:09 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 15:25:09 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - === AdminController.getUsers 开始 ===
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - 管理员获取用户列表请求: keyword=, page=0, size=50
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - 当前请求用户: name=ykf.263.net@sjtu.edu.cn, authenticated=true, authorities=[ROLE_admin]
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - 调用 UserService.searchUsers...
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 开始 ===
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 请求参数: keyword=, page=0, size=50, sortBy=createdAt, sortDirection=desc
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 当前认证用户: name=ykf.263.net@sjtu.edu.cn, authorities=[ROLE_admin]
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 查询所有用户
2025-07-03 15:25:09 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 查询结果: 总数=9, 当前页数量=9
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=11, email=wzm050826@qq.com, username=zimo, role=support, status=banned
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=10, email=25812356531111@qq.com, username=25812356531111@qq.com, role=user, status=banned
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=9, email=258123565311@qq.com, username=258123565311@qq.com, role=support, status=active
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=8, email=aaa@example.com, username=aaa, role=support, status=active
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=6, email=25812356531@qq.com, username=zimo1, role=user, status=active
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=3, email=2581235653@qq.com, username=wzm11111, role=admin, status=active
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 结束 ===
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - 用户列表查询成功: 总数=9, 当前页数量=9
2025-07-03 15:25:09 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - === AdminController.getUsers 结束 ===
2025-07-03 15:25:38 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:25:39 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:39 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:39 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:39 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:39 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:39 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:39 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:25:39 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:25:39 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:39 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:39 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:25:39 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:25:39 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:25:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:39 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:25:39 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:25:39 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:39 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:25:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:25:43 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 15:25:43 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 15:25:43 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:43 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:43 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:43 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:43 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:43 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:43 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:43 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:43 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:43 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:43 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:43 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 15:25:43 [http-nio-8080-exec-4] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 15:25:43 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 15:25:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 15:25:43 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:43 [http-nio-8080-exec-3] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 15:25:43 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:25:43 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 15:25:43 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:43 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:43 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:43 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 15:25:43 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:43 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:43 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:43 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 15:25:43 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 15:25:43 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 15:25:43 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:43 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:43 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:43 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:43 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:43 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 15:25:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:43 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 15:25:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 15:25:44 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:25:44 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:44 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:44 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:44 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:44 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:44 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:25:44 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:25:44 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:44 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:25:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:25:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:25:44 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:44 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:44 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:44 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:44 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:25:44 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:25:44 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:44 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:25:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:25:46 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 15:25:46 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:46 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:46 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:46 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:46 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:46 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:46 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 15:25:46 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:25:46 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:46 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:46 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:25:46 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:25:46 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 15:25:46 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:46 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:46 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:47 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 15:25:47 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:25:47 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:47 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:25:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:25:47 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 15:25:47 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:47 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:47 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:47 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:47 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:47 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 15:25:47 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:25:47 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:47 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:25:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:25:47 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 15:25:47 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:47 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:47 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:47 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:47 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:47 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 15:25:47 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:25:47 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:47 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:25:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:25:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:25:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:25:53 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:25:53 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:53 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:25:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:25:53 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:25:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:25:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:25:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:25:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:25:53 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:25:53 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:25:53 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:25:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:25:53 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:25:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:27:39 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:27:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:27:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:27:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:27:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:27:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:27:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:27:39 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:27:39 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:27:39 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:27:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:27:39 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:27:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:27:42 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:27:42 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:27:42 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:27:42 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:27:42 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:27:42 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:27:42 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:27:42 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:27:42 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:27:42 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:27:42 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:27:42 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:27:42 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:27:55 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:27:55 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:27:55 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:27:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:27:55 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:27:55 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:27:55 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:27:55 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:27:55 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:27:55 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:27:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:27:55 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:27:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:28:05 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /chat/create
2025-07-03 15:28:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:28:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:28:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:28:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:28:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:28:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:28:05 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /chat/create
2025-07-03 15:28:05 [http-nio-8080-exec-9] INFO  c.a.controller.ChatController - 创建聊天会话: {title=hello, aiType=text_to_text}
2025-07-03 15:28:05 [http-nio-8080-exec-9] DEBUG c.a.controller.ChatController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:28:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:28:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 创建聊天会话: userId=12, title=hello, aiType=text_to_text
2025-07-03 15:28:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Chat */insert 
    into
        chats (ai_type, created_at, is_favorite, is_protected, last_activity, message_count, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 15:28:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 聊天会话创建成功: chatId=13
2025-07-03 15:28:05 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:28:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:28:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:28:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:28:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:28:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:28:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:28:05 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:28:05 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:28:05 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:28:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:28:05 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:28:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 15:28:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /chat/13/message
2025-07-03 15:28:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:28:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:28:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:28:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:28:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:28:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:28:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /chat/13/message
2025-07-03 15:28:05 [http-nio-8080-exec-8] INFO  c.a.controller.ChatController - 发送消息到聊天 13: {content=hello, role=user}
2025-07-03 15:28:05 [http-nio-8080-exec-8] DEBUG c.a.controller.ChatController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:28:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:28:05 [http-nio-8080-exec-8] INFO  c.a.controller.ChatController - 用户消息: hello
2025-07-03 15:28:05 [http-nio-8080-exec-8] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=13, userId=12, role=user
2025-07-03 15:28:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 15:28:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-03 15:28:05 [http-nio-8080-exec-8] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=63
2025-07-03 15:28:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-03 15:28:05 [http-nio-8080-exec-8] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=13, userId=12, role=assistant
2025-07-03 15:28:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 15:28:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-03 15:28:05 [http-nio-8080-exec-8] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=64
2025-07-03 15:28:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-03 15:28:06 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 15:28:06 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 15:28:06 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 15:28:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:28:06 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 15:28:06 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 15:28:06 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 15:28:06 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 15:28:06 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 15:28:06 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 15:28:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 15:28:06 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 15:28:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:39:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/12
2025-07-03 16:39:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:39:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:39:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:39:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:39:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:39:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:39:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/12
2025-07-03 16:39:49 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=12
2025-07-03 16:39:49 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:39:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:39:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 16:39:49 [http-nio-8080-exec-3] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=12, userId=12
2025-07-03 16:39:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 16:39:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-03 16:39:50 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/13
2025-07-03 16:39:50 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:39:50 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:39:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:39:50 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:39:50 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:39:50 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:39:50 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/13
2025-07-03 16:39:50 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=13
2025-07-03 16:39:50 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:39:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:39:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 16:39:50 [http-nio-8080-exec-1] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=13, userId=12
2025-07-03 16:39:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 16:39:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-03 16:39:59 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /chat/13/message
2025-07-03 16:39:59 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:39:59 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:39:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:39:59 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:39:59 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:39:59 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:39:59 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /chat/13/message
2025-07-03 16:39:59 [http-nio-8080-exec-5] INFO  c.a.controller.ChatController - 发送消息到聊天 13: {content=你是谁, role=user}
2025-07-03 16:39:59 [http-nio-8080-exec-5] DEBUG c.a.controller.ChatController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:39:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:39:59 [http-nio-8080-exec-5] INFO  c.a.controller.ChatController - 用户消息: 你是谁
2025-07-03 16:39:59 [http-nio-8080-exec-5] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=13, userId=12, role=user
2025-07-03 16:39:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 16:39:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-03 16:39:59 [http-nio-8080-exec-5] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=71
2025-07-03 16:39:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-03 16:39:59 [http-nio-8080-exec-5] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=13, userId=12, role=assistant
2025-07-03 16:39:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 16:39:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-03 16:39:59 [http-nio-8080-exec-5] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=72
2025-07-03 16:39:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-03 16:40:00 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:40:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:40:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:40:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:40:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:40:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:40:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:40:00 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:40:00 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:40:00 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:40:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:40:00 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:40:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:40:11 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing POST /chat/13/message
2025-07-03 16:40:11 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:40:11 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:40:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:40:11 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:40:11 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:40:11 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:40:11 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured POST /chat/13/message
2025-07-03 16:40:11 [http-nio-8080-exec-4] INFO  c.a.controller.ChatController - 发送消息到聊天 13: {content=弱智, role=user}
2025-07-03 16:40:11 [http-nio-8080-exec-4] DEBUG c.a.controller.ChatController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:40:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:40:11 [http-nio-8080-exec-4] INFO  c.a.controller.ChatController - 用户消息: 弱智
2025-07-03 16:40:11 [http-nio-8080-exec-4] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=13, userId=12, role=user
2025-07-03 16:40:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 16:40:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-03 16:40:11 [http-nio-8080-exec-4] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=73
2025-07-03 16:40:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-03 16:40:11 [http-nio-8080-exec-4] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=13, userId=12, role=assistant
2025-07-03 16:40:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 16:40:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-03 16:40:11 [http-nio-8080-exec-4] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=74
2025-07-03 16:40:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-03 16:40:11 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:40:11 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:40:11 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:40:11 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:40:11 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:40:11 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:40:11 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:40:11 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:40:11 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:40:11 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:40:11 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:40:11 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:40:11 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:47:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/12
2025-07-03 16:47:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:47:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:47:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:47:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:47:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:47:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:47:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/12
2025-07-03 16:47:49 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=12
2025-07-03 16:47:49 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:47:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:47:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 16:47:49 [http-nio-8080-exec-3] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=12, userId=12
2025-07-03 16:47:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 16:47:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-03 16:47:56 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:47:56 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:47:56 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:47:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:47:56 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:47:56 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:47:56 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:47:56 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:47:56 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:47:56 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:47:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:47:56 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:47:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:47:56 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:47:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:47:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:47:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:47:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:47:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:47:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:47:56 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:47:56 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:47:56 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:47:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:47:56 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:47:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:48:03 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/users?keyword=&page=0&size=50
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:03 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/users?keyword=&page=0&size=50
2025-07-03 16:48:03 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 16:48:03 [http-nio-8080-exec-2] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  c.a.controller.AdminController - === AdminController.getUsers 开始 ===
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  c.a.controller.AdminController - 管理员获取用户列表请求: keyword=, page=0, size=50
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  c.a.controller.AdminController - 当前请求用户: name=ykf.263.net@sjtu.edu.cn, authenticated=true, authorities=[ROLE_admin]
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  c.a.controller.AdminController - 调用 UserService.searchUsers...
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 开始 ===
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 请求参数: keyword=, page=0, size=50, sortBy=createdAt, sortDirection=desc
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 当前认证用户: name=ykf.263.net@sjtu.edu.cn, authorities=[ROLE_admin]
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 查询所有用户
2025-07-03 16:48:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 查询结果: 总数=9, 当前页数量=9
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 用户: id=11, email=wzm050826@qq.com, username=zimo, role=support, status=banned
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 用户: id=10, email=25812356531111@qq.com, username=25812356531111@qq.com, role=user, status=banned
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 用户: id=9, email=258123565311@qq.com, username=258123565311@qq.com, role=support, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 用户: id=8, email=aaa@example.com, username=aaa, role=support, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 用户: id=6, email=25812356531@qq.com, username=zimo1, role=user, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 用户: id=3, email=2581235653@qq.com, username=wzm11111, role=admin, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 结束 ===
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  c.a.controller.AdminController - 用户列表查询成功: 总数=9, 当前页数量=9
2025-07-03 16:48:03 [http-nio-8080-exec-2] INFO  c.a.controller.AdminController - === AdminController.getUsers 结束 ===
2025-07-03 16:48:03 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/users?keyword=&page=0&size=50
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:03 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:03 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/users?keyword=&page=0&size=50
2025-07-03 16:48:03 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 16:48:03 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - === AdminController.getUsers 开始 ===
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - 管理员获取用户列表请求: keyword=, page=0, size=50
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - 当前请求用户: name=ykf.263.net@sjtu.edu.cn, authenticated=true, authorities=[ROLE_admin]
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - 调用 UserService.searchUsers...
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 开始 ===
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 请求参数: keyword=, page=0, size=50, sortBy=createdAt, sortDirection=desc
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 当前认证用户: name=ykf.263.net@sjtu.edu.cn, authorities=[ROLE_admin]
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 查询所有用户
2025-07-03 16:48:03 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 查询结果: 总数=9, 当前页数量=9
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=11, email=wzm050826@qq.com, username=zimo, role=support, status=banned
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=10, email=25812356531111@qq.com, username=25812356531111@qq.com, role=user, status=banned
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=9, email=258123565311@qq.com, username=258123565311@qq.com, role=support, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=8, email=aaa@example.com, username=aaa, role=support, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=6, email=25812356531@qq.com, username=zimo1, role=user, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=3, email=2581235653@qq.com, username=wzm11111, role=admin, status=active
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 结束 ===
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - 用户列表查询成功: 总数=9, 当前页数量=9
2025-07-03 16:48:03 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - === AdminController.getUsers 结束 ===
2025-07-03 16:48:04 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/users?keyword=&page=0&size=50
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:04 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/users?keyword=&page=0&size=50
2025-07-03 16:48:04 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 16:48:04 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  c.a.controller.AdminController - === AdminController.getUsers 开始 ===
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  c.a.controller.AdminController - 管理员获取用户列表请求: keyword=, page=0, size=50
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  c.a.controller.AdminController - 当前请求用户: name=ykf.263.net@sjtu.edu.cn, authenticated=true, authorities=[ROLE_admin]
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  c.a.controller.AdminController - 调用 UserService.searchUsers...
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 开始 ===
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 请求参数: keyword=, page=0, size=50, sortBy=createdAt, sortDirection=desc
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 当前认证用户: name=ykf.263.net@sjtu.edu.cn, authorities=[ROLE_admin]
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 查询所有用户
2025-07-03 16:48:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 查询结果: 总数=9, 当前页数量=9
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=11, email=wzm050826@qq.com, username=zimo, role=support, status=banned
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=10, email=25812356531111@qq.com, username=25812356531111@qq.com, role=user, status=banned
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=9, email=258123565311@qq.com, username=258123565311@qq.com, role=support, status=active
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=8, email=aaa@example.com, username=aaa, role=support, status=active
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=6, email=25812356531@qq.com, username=zimo1, role=user, status=active
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=3, email=2581235653@qq.com, username=wzm11111, role=admin, status=active
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 结束 ===
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  c.a.controller.AdminController - 用户列表查询成功: 总数=9, 当前页数量=9
2025-07-03 16:48:04 [http-nio-8080-exec-4] INFO  c.a.controller.AdminController - === AdminController.getUsers 结束 ===
2025-07-03 16:48:43 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:48:43 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:43 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:43 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:43 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:43 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:43 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:48:43 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:48:43 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:43 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:48:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:48:43 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:48:43 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:43 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:43 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:43 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:43 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:43 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:43 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:48:43 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:48:43 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:43 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:43 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:48:43 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:48:53 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 16:48:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 16:48:53 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:53 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:53 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:53 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:53 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 16:48:53 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 16:48:53 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 16:48:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 16:48:53 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 16:48:53 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 16:48:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 16:48:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:53 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 16:48:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:53 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 16:48:53 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 16:48:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 16:48:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:53 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 16:48:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:53 [http-nio-8080-exec-4] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 16:48:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 16:48:56 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:48:56 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:56 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:56 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:56 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:56 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:56 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:48:56 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:48:56 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:56 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:48:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:48:56 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:48:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:56 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:56 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:48:56 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:48:56 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:56 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:56 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:48:56 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:48:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 16:48:58 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 16:48:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:58 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:58 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:58 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:58 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:58 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:58 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 16:48:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 16:48:58 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 16:48:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 16:48:58 [http-nio-8080-exec-3] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 16:48:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 16:48:58 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 16:48:58 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 16:48:58 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:58 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:58 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:58 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:58 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:58 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:58 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:58 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:58 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:58 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 16:48:58 [http-nio-8080-exec-5] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 16:48:58 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 16:48:58 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:58 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:58 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:58 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 16:48:58 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:58 [http-nio-8080-exec-2] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 16:48:58 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 16:48:59 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:48:59 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:59 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:59 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:59 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:59 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:59 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:59 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:48:59 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:48:59 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:59 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:59 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:48:59 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:48:59 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:48:59 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:48:59 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:59 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:59 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:48:59 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:48:59 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:48:59 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:48:59 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:48:59 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:48:59 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:48:59 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:48:59 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:49:00 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/users?keyword=&page=0&size=50
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:49:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:49:00 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/users?keyword=&page=0&size=50
2025-07-03 16:49:00 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 16:49:00 [http-nio-8080-exec-8] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - === AdminController.getUsers 开始 ===
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - 管理员获取用户列表请求: keyword=, page=0, size=50
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - 当前请求用户: name=ykf.263.net@sjtu.edu.cn, authenticated=true, authorities=[ROLE_admin]
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - 调用 UserService.searchUsers...
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 开始 ===
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 请求参数: keyword=, page=0, size=50, sortBy=createdAt, sortDirection=desc
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 当前认证用户: name=ykf.263.net@sjtu.edu.cn, authorities=[ROLE_admin]
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 查询所有用户
2025-07-03 16:49:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 查询结果: 总数=9, 当前页数量=9
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=11, email=wzm050826@qq.com, username=zimo, role=support, status=banned
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=10, email=25812356531111@qq.com, username=25812356531111@qq.com, role=user, status=banned
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=9, email=258123565311@qq.com, username=258123565311@qq.com, role=support, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=8, email=aaa@example.com, username=aaa, role=support, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=6, email=25812356531@qq.com, username=zimo1, role=user, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户: id=3, email=2581235653@qq.com, username=wzm11111, role=admin, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 结束 ===
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - 用户列表查询成功: 总数=9, 当前页数量=9
2025-07-03 16:49:00 [http-nio-8080-exec-8] INFO  c.a.controller.AdminController - === AdminController.getUsers 结束 ===
2025-07-03 16:49:00 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/users?keyword=&page=0&size=50
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:49:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:49:00 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/users?keyword=&page=0&size=50
2025-07-03 16:49:00 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 16:49:00 [http-nio-8080-exec-4] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  c.a.controller.AdminController - === AdminController.getUsers 开始 ===
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  c.a.controller.AdminController - 管理员获取用户列表请求: keyword=, page=0, size=50
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  c.a.controller.AdminController - 当前请求用户: name=ykf.263.net@sjtu.edu.cn, authenticated=true, authorities=[ROLE_admin]
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  c.a.controller.AdminController - 调用 UserService.searchUsers...
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 开始 ===
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 请求参数: keyword=, page=0, size=50, sortBy=createdAt, sortDirection=desc
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 当前认证用户: name=ykf.263.net@sjtu.edu.cn, authorities=[ROLE_admin]
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 查询所有用户
2025-07-03 16:49:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 查询结果: 总数=9, 当前页数量=9
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=11, email=wzm050826@qq.com, username=zimo, role=support, status=banned
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=10, email=25812356531111@qq.com, username=25812356531111@qq.com, role=user, status=banned
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=9, email=258123565311@qq.com, username=258123565311@qq.com, role=support, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=8, email=aaa@example.com, username=aaa, role=support, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=6, email=25812356531@qq.com, username=zimo1, role=user, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - 用户: id=3, email=2581235653@qq.com, username=wzm11111, role=admin, status=active
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 结束 ===
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  c.a.controller.AdminController - 用户列表查询成功: 总数=9, 当前页数量=9
2025-07-03 16:49:00 [http-nio-8080-exec-4] INFO  c.a.controller.AdminController - === AdminController.getUsers 结束 ===
2025-07-03 16:49:01 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /admin/users?keyword=&page=0&size=50
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:49:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:49:01 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /admin/users?keyword=&page=0&size=50
2025-07-03 16:49:01 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorizing method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 16:49:01 [http-nio-8080-exec-7] DEBUG o.s.s.a.m.AuthorizationManagerBeforeMethodInterceptor - Authorized method invocation ReflectiveMethodInvocation: public org.springframework.http.ResponseEntity com.aiplatform.controller.AdminController.getUsers(java.lang.String,int,int,java.lang.String,java.lang.String); target is of class [com.aiplatform.controller.AdminController]
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  c.a.controller.AdminController - === AdminController.getUsers 开始 ===
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  c.a.controller.AdminController - 管理员获取用户列表请求: keyword=, page=0, size=50
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  c.a.controller.AdminController - 当前请求用户: name=ykf.263.net@sjtu.edu.cn, authenticated=true, authorities=[ROLE_admin]
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  c.a.controller.AdminController - 调用 UserService.searchUsers...
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 开始 ===
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 请求参数: keyword=, page=0, size=50, sortBy=createdAt, sortDirection=desc
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 当前认证用户: name=ykf.263.net@sjtu.edu.cn, authorities=[ROLE_admin]
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 查询所有用户
2025-07-03 16:49:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 查询结果: 总数=9, 当前页数量=9
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 用户: id=13, email=zhangsan@example.com, username=zhangsan, role=support, status=active
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 用户: id=11, email=wzm050826@qq.com, username=zimo, role=support, status=banned
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 用户: id=10, email=25812356531111@qq.com, username=25812356531111@qq.com, role=user, status=banned
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 用户: id=9, email=258123565311@qq.com, username=258123565311@qq.com, role=support, status=active
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 用户: id=8, email=aaa@example.com, username=aaa, role=support, status=active
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 用户: id=6, email=25812356531@qq.com, username=zimo1, role=user, status=active
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - 用户: id=3, email=2581235653@qq.com, username=wzm11111, role=admin, status=active
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  com.aiplatform.service.UserService - === UserService.searchUsers 结束 ===
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  c.a.controller.AdminController - 用户列表查询成功: 总数=9, 当前页数量=9
2025-07-03 16:49:01 [http-nio-8080-exec-7] INFO  c.a.controller.AdminController - === AdminController.getUsers 结束 ===
2025-07-03 16:49:02 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:49:02 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:49:02 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:49:02 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:49:02 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:49:02 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:49:02 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:49:02 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:49:02 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:49:02 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:49:02 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:49:02 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:49:02 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:49:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:49:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:49:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:49:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:49:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:49:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:49:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:49:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:49:02 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:49:02 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:49:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:49:02 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:49:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:49:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:49:04 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:49:04 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:49:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:49:04 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:49:04 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:49:04 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:49:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:49:04 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:49:04 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:49:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:49:04 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:49:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:49:04 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:49:04 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:49:04 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:49:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:49:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:49:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:49:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:49:05 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:49:05 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:49:05 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:49:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:49:05 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:49:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:53:30 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-03 16:53:30 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:53:30 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:53:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:53:31 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:53:31 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:53:31 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:53:31 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-03 16:53:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:53:54 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:53:54 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-03 16:53:54 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:53:54 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:53:54 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:53:54 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:53:54 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:53:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:53:54 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:53:54 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:53:54 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:53:54 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:53:54 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:53:54 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:53:54 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:53:54 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:53:54 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:53:54 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:53:54 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:53:54 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-03 16:53:54 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:53:54 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:53:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:53:54 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:53:54 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:53:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:53:54 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:53:54 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:53:54 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:53:54 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:53:54 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:53:54 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:53:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:53:54 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:53:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:54:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:54:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:09 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:54:09 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:54:09 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:09 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:54:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:54:19 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 16:54:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 16:54:19 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:19 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:19 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:19 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:19 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:19 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 16:54:19 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 16:54:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 16:54:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 16:54:19 [http-nio-8080-exec-2] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 16:54:19 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 16:54:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 16:54:19 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:19 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:19 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 16:54:20 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:20 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:20 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:20 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 16:54:20 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:20 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 16:54:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 16:54:20 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:20 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:20 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 16:54:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:20 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 16:54:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 16:54:21 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:54:21 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:21 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:21 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:21 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:21 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:21 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:54:21 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:54:21 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:21 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:54:21 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:54:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:54:21 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:21 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:21 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:21 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:21 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:21 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:54:21 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:54:21 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:21 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:54:21 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:54:22 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-03 16:54:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:22 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-03 16:54:23 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:23 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-03 16:54:23 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:23 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:23 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:54:23 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:23 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:23 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:23 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-03 16:54:23 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:23 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:23 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:23 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:23 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:23 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:23 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:54:23 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:54:23 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:23 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:23 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:54:23 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:54:23 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:54:23 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:23 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:23 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:23 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:23 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:23 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:23 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:54:23 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:54:23 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:23 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:23 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:54:23 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:54:37 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:54:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:37 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:37 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:54:37 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:54:37 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:37 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:37 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:54:37 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:54:37 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:54:37 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:37 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:37 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:37 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:37 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:37 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:37 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:54:37 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:54:37 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:37 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:37 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:54:37 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:54:38 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-03 16:54:38 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-03 16:54:38 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-03 16:54:38 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:38 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:38 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:38 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:38 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:38 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:38 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:38 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:38 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:38 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:38 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:38 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-03 16:54:38 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-03 16:54:38 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-03 16:54:38 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-03 16:54:38 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:38 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-03 16:54:38 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=12
2025-07-03 16:54:38 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=12
2025-07-03 16:54:38 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-03 16:54:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-03 16:54:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-03 16:54:38 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-03 16:54:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-03 16:54:38 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-03 16:54:38 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-03 16:54:38 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-03 16:54:38 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:38 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:38 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:38 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-03 16:54:38 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:38 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:38 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:38 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-03 16:54:38 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:38 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:38 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:38 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-03 16:54:38 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=12
2025-07-03 16:54:38 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-03 16:54:38 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:38 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:38 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:38 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-03 16:54:38 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-03 16:54:38 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-03 16:54:38 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-03 16:54:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-03 16:54:38 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:38 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-03 16:54:38 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:38 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:38 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-03 16:54:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-03 16:54:38 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=12
2025-07-03 16:54:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-03 16:54:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-03 16:54:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-03 16:54:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-03 16:54:40 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:54:40 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:40 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:40 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:40 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:40 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:40 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:54:40 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:54:40 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:40 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:54:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:54:40 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:54:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:40 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:54:40 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:54:40 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:40 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:54:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:54:47 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:54:47 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:47 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:47 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:47 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:47 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:47 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:54:47 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:54:47 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:47 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:54:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:54:47 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:54:47 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:47 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:47 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:47 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:47 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:47 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:54:47 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:54:47 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:47 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:54:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:54:52 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:54:52 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:52 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:52 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:52 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:52 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:52 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:54:52 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:54:52 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:52 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:54:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:54:52 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:54:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:52 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:54:52 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:54:52 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:52 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:54:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:54:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-03 16:54:53 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-03 16:54:53 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-03 16:54:53 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:53 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:53 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:53 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:53 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:53 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:53 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-03 16:54:53 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-03 16:54:53 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-03 16:54:53 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:53 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-03 16:54:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:53 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=12
2025-07-03 16:54:53 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-03 16:54:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-03 16:54:53 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=12
2025-07-03 16:54:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-03 16:54:53 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-03 16:54:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-03 16:54:53 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-03 16:54:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-03 16:54:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-03 16:54:53 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:53 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-03 16:54:53 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:53 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:53 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:53 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-03 16:54:53 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-03 16:54:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-03 16:54:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:53 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=12
2025-07-03 16:54:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-03 16:54:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:53 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-03 16:54:53 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-03 16:54:53 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-03 16:54:53 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:53 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-03 16:54:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:53 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:53 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-03 16:54:53 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:53 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:53 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-03 16:54:53 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-03 16:54:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:53 [http-nio-8080-exec-7] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=12
2025-07-03 16:54:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-03 16:54:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-03 16:54:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-03 16:54:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-03 16:54:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-03 16:54:54 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:54:54 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:54 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:54 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:54 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:54 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:54 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:54:54 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:54:54 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:54 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:54:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:54:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:54:54 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:54:54 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:54 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:54:54 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:54:54 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:54:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:54:54 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:54:54 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:54:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:54:54 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:54:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:55:54 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-03 16:55:54 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:55:54 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:55:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:55:54 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:55:54 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:55:54 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:55:54 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-03 16:55:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:55:54 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-03 16:55:54 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:55:54 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:55:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:55:54 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:55:54 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:55:54 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:55:54 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:55:54 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:55:54 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:55:54 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:55:54 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-03 16:55:54 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:55:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:55:54 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:55:54 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:55:54 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:55:54 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:55:54 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:55:54 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:55:54 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:55:54 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:55:54 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:55:54 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:55:54 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:55:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:55:54 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:55:54 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:55:54 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:55:54 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:55:54 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:55:54 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:55:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:55:54 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:55:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:56:26 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-03 16:56:26 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:56:26 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:56:26 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:26 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:56:26 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:56:26 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:56:26 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-03 16:56:26 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:26 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-03 16:56:27 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:56:27 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:56:27 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:56:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:27 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:56:27 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:56:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:27 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:56:27 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:56:27 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:56:27 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-03 16:56:27 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:56:27 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:56:27 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:56:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:27 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:56:27 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:56:27 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:56:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:27 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:56:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:56:27 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:56:27 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:56:27 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:56:27 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:27 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:56:27 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:56:27 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:56:27 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:56:27 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:56:27 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:56:27 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:27 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:56:27 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:56:33 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-03 16:56:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:56:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:56:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:56:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:56:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:56:33 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-03 16:56:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-03 16:56:33 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:56:33 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:56:33 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:56:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:33 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:56:33 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:56:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:33 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:56:33 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:56:33 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:56:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-03 16:56:33 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:56:33 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:56:33 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:56:33 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:56:33 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:56:33 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:56:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:33 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:56:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:56:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:56:33 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:56:33 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:56:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:33 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:56:33 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:56:33 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:56:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:56:33 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:56:33 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:56:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:56:33 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:56:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:57:41 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-03 16:57:41 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:57:41 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:57:41 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:57:41 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:57:41 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:57:41 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:57:41 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-03 16:57:41 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:57:41 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-03 16:57:41 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:57:41 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:57:41 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:57:41 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:57:41 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:57:41 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:57:41 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:57:41 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:57:41 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:57:41 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:57:41 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:57:41 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:57:41 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:57:41 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-03 16:57:41 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:57:41 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:57:41 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:57:41 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:57:41 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:57:41 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:57:41 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:57:41 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:57:41 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:57:41 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:57:41 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:57:41 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:57:41 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:57:41 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:57:41 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:57:41 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:57:41 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:57:41 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:57:41 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:57:41 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:58:06 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-03 16:58:06 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-03 16:58:06 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:58:06 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:58:06 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:58:06 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:58:06 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:58:06 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:58:06 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:58:06 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:58:06 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:58:06 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:58:06 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:58:06 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:58:06 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-03 16:58:06 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-03 16:58:06 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:58:06 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:58:06 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-03 16:58:06 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-03 16:58:06 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-03 16:58:06 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:58:06 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:58:06 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:58:06 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:58:06 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-03 16:58:06 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:58:06 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:58:06 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-03 16:58:06 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:58:06 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-03 16:58:06 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:58:06 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:58:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:58:06 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:58:06 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:58:06 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:58:06 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-03 16:58:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:58:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-03 16:58:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-03 16:58:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-03 16:58:12 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:58:12 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:58:12 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:58:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:58:12 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:58:12 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:58:12 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:58:12 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:58:12 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:58:12 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:58:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:58:12 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:58:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 16:58:12 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 16:58:12 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 16:58:12 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 16:58:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:58:12 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 16:58:12 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 16:58:12 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 16:58:12 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 16:58:12 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 16:58:12 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 16:58:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 16:58:12 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 16:58:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 17:02:01 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 17:02:01 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:02:01 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:02:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:02:01 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:02:01 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:02:01 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:02:01 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 17:02:01 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 17:02:01 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:02:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:02:01 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 17:02:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 17:02:01 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 17:02:01 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:02:01 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:02:01 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:02:01 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:02:01 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:02:01 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:02:01 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 17:02:01 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 17:02:01 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:02:01 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:02:01 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 17:02:01 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 17:05:29 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 17:05:29 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:05:29 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:30 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:05:30 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:05:30 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:05:30 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 17:05:30 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 17:05:30 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:30 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 17:05:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 17:05:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 17:05:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:05:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:05:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:05:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:05:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 17:05:30 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 17:05:30 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:30 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 17:05:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 17:05:32 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 17:05:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:05:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:05:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:05:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:05:32 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 17:05:32 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 17:05:32 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:32 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 17:05:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 17:05:32 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 17:05:32 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:05:32 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:32 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:05:32 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:05:32 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:05:32 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 17:05:32 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 17:05:32 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:32 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 17:05:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 17:05:32 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 17:05:32 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:05:32 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:32 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:32 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:05:32 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:05:32 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:05:32 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 17:05:32 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 17:05:32 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:32 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:32 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 17:05:32 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 17:05:32 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 17:05:32 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:05:32 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:32 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:05:32 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:05:32 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:05:32 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-03 17:05:32 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 17:05:32 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:32 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 17:05:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 17:05:33 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 17:05:33 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:05:33 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:33 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:05:33 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:05:33 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:05:33 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 17:05:33 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 17:05:33 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:33 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 17:05:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 17:05:33 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 17:05:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:05:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:05:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:05:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:05:33 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 17:05:33 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 17:05:33 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:33 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 17:05:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 17:05:35 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 17:05:35 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 17:05:35 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:05:35 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:35 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:05:35 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:35 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:35 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:05:35 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:05:35 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:05:35 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:05:35 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:05:35 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:05:35 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 17:05:35 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 17:05:35 [http-nio-8080-exec-2] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 17:05:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:35 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 17:05:35 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 17:05:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 17:05:35 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-03 17:05:35 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:05:35 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-03 17:05:35 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:05:35 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:05:35 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:05:35 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-03 17:05:35 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-03 17:05:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-03 17:05:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:05:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:05:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:05:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:05:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-03 17:05:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:35 [http-nio-8080-exec-7] INFO  c.a.controller.UserController - 获取用户 ykf.263.net@sjtu.edu.cn 的消息列表
2025-07-03 17:05:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-03 17:05:38 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 17:05:38 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:05:38 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:38 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:38 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:05:38 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:05:38 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:05:38 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 17:05:38 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 17:05:38 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:38 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:38 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 17:05:38 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 17:05:38 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 17:05:38 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:05:38 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:38 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:05:38 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:05:38 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:05:38 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 17:05:38 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 17:05:38 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:05:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:05:38 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 17:05:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 17:06:41 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 17:06:41 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:06:41 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:06:41 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:06:41 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:06:41 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:06:41 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:06:41 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 17:06:41 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 17:06:41 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:06:41 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:06:41 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 17:06:41 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 17:06:41 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-03 17:06:41 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:06:41 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:06:41 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:06:41 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:06:41 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:06:41 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:06:41 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-03 17:06:41 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-03 17:06:41 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:06:41 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:06:41 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-03 17:06:41 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-03 17:08:42 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/13
2025-07-03 17:08:42 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:08:42 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:08:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:08:42 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:08:42 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:08:42 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:08:42 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/13
2025-07-03 17:08:42 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=13
2025-07-03 17:08:42 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:08:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:08:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 17:08:43 [http-nio-8080-exec-4] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=13, userId=12
2025-07-03 17:08:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 17:08:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-03 17:08:55 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/12
2025-07-03 17:08:55 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:08:55 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:08:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:08:55 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:08:55 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:08:55 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:08:55 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/12
2025-07-03 17:08:55 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=12
2025-07-03 17:08:55 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:08:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:08:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 17:08:55 [http-nio-8080-exec-3] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=12, userId=12
2025-07-03 17:08:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 17:08:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-03 17:08:56 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/13
2025-07-03 17:08:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-03 17:08:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: ykf.263.net@sjtu.edu.cn
2025-07-03 17:08:56 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:08:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=12, email=ykf.263.net@sjtu.edu.cn, username=yang, role=admin, status=active
2025-07-03 17:08:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_admin
2025-07-03 17:08:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_admin]
2025-07-03 17:08:56 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/13
2025-07-03 17:08:56 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=13
2025-07-03 17:08:56 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: ykf.263.net@sjtu.edu.cn
2025-07-03 17:08:56 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-03 17:08:56 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 17:08:56 [http-nio-8080-exec-10] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=13, userId=12
2025-07-03 17:08:56 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-03 17:08:56 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-03 17:10:27 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-03 17:10:27 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-03 17:10:27 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-04 14:37:32 [main] INFO  c.a.AiChatBackendApplication - Starting AiChatBackendApplication using Java 23.0.2 with PID 14844 (D:\SE Courses\SE\SE25Project-05\UIPrototype\server\java-backend\target\classes started by 31656 in D:\SE Courses\SE\SE25Project-05\UIPrototype\server\java-backend)
2025-07-04 14:37:32 [main] DEBUG c.a.AiChatBackendApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-07-04 14:37:32 [main] INFO  c.a.AiChatBackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-04 14:37:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 14:37:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-04 14:37:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 110 ms. Found 7 JPA repository interfaces.
2025-07-04 14:37:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 14:37:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 14:37:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.AdminMessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-04 14:37:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.ChatRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-04 14:37:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-04 14:37:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.SupportChatRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-04 14:37:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.SystemLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-04 14:37:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-04 14:37:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-04 14:37:32 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-07-04 14:37:33 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-04 14:37:33 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 14:37:33 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-07-04 14:37:33 [main] INFO  o.a.c.c.C.[.[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-07-04 14:37:33 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1248 ms
2025-07-04 14:37:33 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-04 14:37:33 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-07-04 14:37:33 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-04 14:37:33 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-04 14:37:33 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-04 14:37:33 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6dd38df2
2025-07-04 14:37:33 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-04 14:37:34 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-04 14:37:34 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-07-04 14:37:34 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-04 14:37:34 [main] DEBUG org.hibernate.SQL - 
    alter table admin_messages 
       modify column from_user_id bigint not null
2025-07-04 14:37:34 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table admin_messages 
       modify column from_user_id bigint not null" via JDBC [Cannot change column 'from_user_id': used in a foreign key constraint 'admin_messages_ibfk_1']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table admin_messages 
       modify column from_user_id bigint not null" via JDBC [Cannot change column 'from_user_id': used in a foreign key constraint 'admin_messages_ibfk_1']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'from_user_id': used in a foreign key constraint 'admin_messages_ibfk_1'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 14:37:34 [main] DEBUG org.hibernate.SQL - 
    alter table admin_messages 
       modify column to_user_id bigint
2025-07-04 14:37:34 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table admin_messages 
       modify column to_user_id bigint" via JDBC [Cannot change column 'to_user_id': used in a foreign key constraint 'admin_messages_ibfk_2']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table admin_messages 
       modify column to_user_id bigint" via JDBC [Cannot change column 'to_user_id': used in a foreign key constraint 'admin_messages_ibfk_2']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'to_user_id': used in a foreign key constraint 'admin_messages_ibfk_2'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 14:37:34 [main] DEBUG org.hibernate.SQL - 
    alter table chats 
       modify column id bigint not null auto_increment
2025-07-04 14:37:34 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table chats 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'fk_messages_chat_id' of table 'database.messages']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table chats 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'fk_messages_chat_id' of table 'database.messages']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'id': used in a foreign key constraint 'fk_messages_chat_id' of table 'database.messages'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 14:37:34 [main] DEBUG org.hibernate.SQL - 
    alter table chats 
       modify column user_id bigint not null
2025-07-04 14:37:34 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table chats 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'chats_ibfk_1']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table chats 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'chats_ibfk_1']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'user_id': used in a foreign key constraint 'chats_ibfk_1'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 14:37:34 [main] DEBUG org.hibernate.SQL - 
    alter table messages 
       modify column chat_id bigint not null
2025-07-04 14:37:34 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table messages 
       modify column chat_id bigint not null" via JDBC [Cannot change column 'chat_id': used in a foreign key constraint 'fk_messages_chat_id']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table messages 
       modify column chat_id bigint not null" via JDBC [Cannot change column 'chat_id': used in a foreign key constraint 'fk_messages_chat_id']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'chat_id': used in a foreign key constraint 'fk_messages_chat_id'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 14:37:34 [main] DEBUG org.hibernate.SQL - 
    alter table system_logs 
       modify column user_id bigint
2025-07-04 14:37:34 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table system_logs 
       modify column user_id bigint" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'system_logs_ibfk_1']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table system_logs 
       modify column user_id bigint" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'system_logs_ibfk_1']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'user_id': used in a foreign key constraint 'system_logs_ibfk_1'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 14:37:34 [main] DEBUG org.hibernate.SQL - 
    alter table user_settings 
       modify column user_id bigint not null
2025-07-04 14:37:34 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table user_settings 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'fk_user_settings_user_id']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table user_settings 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'fk_user_settings_user_id']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'user_id': used in a foreign key constraint 'fk_user_settings_user_id'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 14:37:34 [main] DEBUG org.hibernate.SQL - 
    alter table users 
       modify column id bigint not null auto_increment
2025-07-04 14:37:34 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table users 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'admin_messages_ibfk_1' of table 'database.admin_messages']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table users 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'admin_messages_ibfk_1' of table 'database.admin_messages']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'id': used in a foreign key constraint 'admin_messages_ibfk_1' of table 'database.admin_messages'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 14:37:35 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-04 14:37:35 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-04 14:37:35 [main] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-07-04 14:37:36 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-04 14:37:36 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3f7e5f33, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4a83736a, org.springframework.security.web.context.SecurityContextHolderFilter@4b145278, org.springframework.security.web.header.HeaderWriterFilter@58f7544c, org.springframework.web.filter.CorsFilter@3c06d119, org.springframework.security.web.authentication.logout.LogoutFilter@622168f7, com.aiplatform.security.JwtAuthenticationFilter@724d4c0a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1e68d8f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6bb37a5, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2285f28b, org.springframework.security.web.session.SessionManagementFilter@55607e6d, org.springframework.security.web.access.ExceptionTranslationFilter@3dc67c9e, org.springframework.security.web.access.intercept.AuthorizationFilter@55d41b85]
2025-07-04 14:37:37 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-07-04 14:37:37 [main] INFO  c.a.AiChatBackendApplication - Started AiChatBackendApplication in 5.336 seconds (process running for 5.996)
2025-07-04 14:38:56 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-04 14:38:56 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-04 14:38:56 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-07-04 14:38:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-07-04 14:38:56 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-04 14:38:56 [http-nio-8080-exec-2] WARN  o.s.w.s.h.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/auth/login' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-07-04 14:38:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-07-04 14:38:56 [http-nio-8080-exec-2] INFO  c.a.controller.AuthController - 收到用户登录请求: cakravartin@example.com
2025-07-04 14:38:56 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 用户登录请求: cakravartin@example.com
2025-07-04 14:38:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:38:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:38:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:38:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:38:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:38:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:38:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:38:56 [http-nio-8080-exec-2] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-07-04 14:38:56 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 开始为用户 7 执行登录自动清理
2025-07-04 14:38:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 14:38:56 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 用户 7 没有需要清理的过期对话
2025-07-04 14:38:56 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 用户登录成功: 7
2025-07-04 14:38:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.User */update users 
    set
        email=?,
        last_login=?,
        password=?,
        permissions=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-07-04 14:38:56 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 14:38:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:38:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:38:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:38:57 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:38:57 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:38:57 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:38:57 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 14:38:57 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 14:38:57 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:38:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:38:57 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 14:38:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 14:38:57 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 14:38:57 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:38:57 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:38:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:38:57 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:38:57 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:38:57 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:38:57 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 14:38:57 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 14:38:57 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:38:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:38:57 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 14:38:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 14:39:09 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 14:39:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:39:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:39:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:39:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:39:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:39:09 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 14:39:09 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 14:39:09 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:39:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:09 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 14:39:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 14:39:09 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 14:39:09 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:39:09 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:39:09 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:09 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:39:09 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:39:09 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:39:09 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 14:39:09 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 14:39:09 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:39:09 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:10 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 14:39:10 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 14:39:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 14:39:10 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:39:10 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:39:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:10 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:39:10 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:39:10 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:39:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 14:39:10 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 14:39:10 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:39:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:10 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 14:39:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 14:39:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 14:39:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:39:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:39:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:39:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:39:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:39:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 14:39:10 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 14:39:10 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:39:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:10 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 14:39:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 14:39:12 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 14:39:12 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:39:12 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:39:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:12 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:39:12 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:39:12 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:39:12 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 14:39:12 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 14:39:12 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:39:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:12 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 14:39:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 14:39:12 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 14:39:12 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:39:12 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:39:12 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:12 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:39:12 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:39:12 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:39:12 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 14:39:12 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 14:39:12 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:39:12 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:12 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 14:39:12 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 14:39:13 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 14:39:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 14:39:13 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 14:39:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:39:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:39:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:39:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:39:13 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:39:13 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:39:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:39:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:39:13 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:39:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:39:13 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:39:13 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:39:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:39:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:39:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:39:13 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 14:39:13 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 14:39:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 14:39:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:13 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 14:39:13 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:39:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:13 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 14:39:13 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 14:39:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 14:39:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 14:39:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 14:39:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 14:39:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 14:39:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 14:39:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 14:39:13 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 14:39:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.UserSettings */insert 
    into
        user_settings (auto_cleanup_enabled, cleanup_frequency, created_at, max_chats, protected_limit, retention_days, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-04 14:39:13 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:39:13 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:39:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 14:39:13 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:13 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:39:13 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:39:13 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:39:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 14:39:13 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 14:39:13 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 14:39:13 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:39:13 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:39:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:39:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:39:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:39:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:39:13 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 14:39:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 14:39:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:13 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 14:39:13 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 14:39:13 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 14:39:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 14:39:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 14:39:13 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 14:39:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 14:39:13 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:39:13 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:39:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 14:39:13 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:39:13 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:39:13 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:39:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 14:39:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 14:39:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:13 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 14:39:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 14:39:13 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 14:39:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 14:39:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:39:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:39:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:39:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:39:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:39:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 14:39:19 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 14:39:19 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:39:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:19 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 14:39:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 14:39:19 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 14:39:19 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:39:19 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:39:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:19 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:39:19 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:39:19 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:39:19 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 14:39:19 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 14:39:19 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:39:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:39:19 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 14:39:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 14:44:32 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 14:44:32 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 14:44:32 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 14:44:32 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:44:32 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:44:32 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:44:32 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:44:32 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:44:32 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:44:32 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:32 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:44:32 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:44:32 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:44:32 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:44:32 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:44:32 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:44:32 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:44:32 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:44:32 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:44:32 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 14:44:32 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 14:44:32 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 14:44:32 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 14:44:32 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:44:32 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:32 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 14:44:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 14:44:32 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 14:44:32 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 14:44:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 14:44:32 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 14:44:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 14:44:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 14:44:32 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 14:44:32 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:44:32 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:44:32 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 14:44:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 14:44:32 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:44:32 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:44:32 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:44:32 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 14:44:32 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 14:44:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 14:44:32 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:44:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:44:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:32 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 14:44:32 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 14:44:32 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 14:44:32 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:44:32 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:44:32 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:44:32 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 14:44:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:44:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:44:32 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 14:44:32 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 14:44:32 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:44:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:32 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:44:32 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:44:32 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:44:32 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 14:44:32 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 14:44:32 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 14:44:32 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 14:44:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 14:44:32 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 14:44:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 14:44:32 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 14:44:32 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 14:44:37 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 14:44:37 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:44:37 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:44:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:37 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:44:37 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:44:37 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:44:37 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 14:44:37 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 14:44:37 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:44:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:37 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 14:44:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 14:44:37 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 14:44:37 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 14:44:37 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 14:44:37 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:37 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 14:44:37 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 14:44:37 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 14:44:37 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 14:44:37 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 14:44:37 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 14:44:37 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 14:44:37 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 14:44:37 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:00:14 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:00:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:00:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:00:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:00:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:00:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:00:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:00:14 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:00:14 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:00:14 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:00:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:00:14 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:00:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:00:14 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:00:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:00:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:00:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:00:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:00:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:00:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:00:14 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:00:14 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:00:14 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:00:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:00:14 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:00:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:00:17 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:00:17 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:00:17 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:00:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:00:17 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:00:17 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:00:17 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:00:17 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:00:17 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:00:17 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:00:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:00:17 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:00:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:00:17 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:00:17 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:00:17 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:00:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:00:17 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:00:17 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:00:17 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:00:17 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:00:17 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:00:17 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:00:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:00:17 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:00:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:00:29 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:00:29 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:00:29 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:00:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:00:29 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:00:29 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:00:29 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:00:29 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:00:29 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:00:29 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:00:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:00:29 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:00:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:00:29 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:00:29 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:00:29 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:00:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:00:29 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:00:29 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:00:29 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:00:29 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:00:29 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:00:29 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:00:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:00:29 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:00:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:02:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 15:02:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 15:02:19 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 15:02:19 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:19 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:19 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:19 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:19 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:19 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:19 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 15:02:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 15:02:19 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 15:02:19 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 15:02:19 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:02:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:19 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 15:02:19 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 15:02:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 15:02:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 15:02:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 15:02:19 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 15:02:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 15:02:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 15:02:19 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 15:02:19 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:19 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 15:02:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 15:02:19 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:19 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:19 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:19 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 15:02:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 15:02:19 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 15:02:19 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 15:02:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 15:02:19 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:19 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:19 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 15:02:19 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:19 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:19 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:19 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 15:02:19 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 15:02:19 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 15:02:19 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:02:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:19 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:19 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:19 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:19 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:19 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:19 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 15:02:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 15:02:19 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 15:02:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 15:02:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 15:02:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 15:02:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 15:02:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 15:02:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 15:02:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:02:21 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:21 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:21 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:21 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:21 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:02:21 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:02:21 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:02:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:21 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:02:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:02:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:02:21 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:21 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:21 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:21 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:21 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:21 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:02:21 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:02:21 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:02:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:21 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:02:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:02:23 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:02:23 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:23 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:23 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:23 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:23 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:23 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:23 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:02:23 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:02:23 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:02:23 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:23 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:02:23 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:02:23 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:02:23 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:23 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:23 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:23 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:23 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:23 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:02:23 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:02:23 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:02:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:23 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:02:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:02:25 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-04 15:02:25 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-04 15:02:25 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:25 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:25 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:25 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:25 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:25 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:25 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:25 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:25 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-04 15:02:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:25 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:25 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:25 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:25 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-04 15:02:25 [http-nio-8080-exec-4] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-04 15:02:25 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-04 15:02:25 [http-nio-8080-exec-10] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-04 15:02:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-04 15:02:25 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-04 15:02:25 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:25 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:25 [http-nio-8080-exec-10] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-04 15:02:25 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-04 15:02:25 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:25 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:25 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:25 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:25 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:25 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-04 15:02:25 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-04 15:02:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-04 15:02:25 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:25 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:25 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:25 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-04 15:02:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:25 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-04 15:02:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-04 15:02:25 [http-nio-8080-exec-6] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-04 15:02:49 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:02:49 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:49 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:49 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:49 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:49 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:49 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:02:49 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:02:49 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:02:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:49 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:02:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:02:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:02:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:02:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:02:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:02:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:02:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:02:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:02:49 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:02:49 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:02:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:02:49 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:02:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:03:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:03:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:03:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:03:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:03:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:03:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:03:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:03:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:03:13 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:03:13 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:03:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:03:13 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:03:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:03:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:03:13 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:03:13 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:03:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:03:13 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:03:13 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:03:13 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:03:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:03:13 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:03:13 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:03:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:03:13 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:03:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:06:32 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:06:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:06:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:06:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:06:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:06:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:06:32 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:06:32 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:06:32 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:06:32 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:06:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:06:32 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:06:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:12:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:12:21 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:12:21 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:12:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:12:21 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:12:21 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:12:21 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:12:21 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:12:21 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:12:21 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:12:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:12:21 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:12:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:13:10 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:13:10 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:13:10 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:13:10 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:13:10 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:13:10 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:13:10 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:13:10 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:13:10 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:13:10 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:13:10 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:13:10 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:13:10 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:13:52 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:13:52 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:13:52 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:13:52 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:13:52 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:13:52 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:13:52 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:13:52 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:13:52 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:13:52 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:13:52 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:13:52 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:13:52 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:13:52 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:13:52 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:13:52 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:13:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:13:52 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:13:52 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:13:52 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:13:52 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:13:52 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:13:52 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:13:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:13:52 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:13:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:16:20 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:16:20 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:16:20 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:16:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:16:20 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:16:20 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:16:20 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:16:20 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:16:20 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:16:20 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:16:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:16:20 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:16:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:16:20 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:16:20 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:16:20 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:16:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:16:20 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:16:20 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:16:20 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:16:20 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:16:20 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:16:20 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:16:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:16:20 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:16:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:17:08 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:17:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:17:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:17:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:17:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:17:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:17:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:17:08 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:17:08 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:17:08 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:17:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:17:08 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:17:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:17:32 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:17:32 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:17:32 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:17:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:17:32 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:17:32 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:17:32 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:17:32 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:17:32 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:17:32 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:17:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:17:32 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:17:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:17:32 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:17:32 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:17:32 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:17:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:17:32 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:17:32 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:17:32 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:17:32 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:17:32 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:17:32 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:17:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:17:32 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:17:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:18:16 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 15:18:16 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:18:16 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:18:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:18:16 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:18:16 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:18:16 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:18:16 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 15:18:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:18:16 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 15:18:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:18:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:18:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:18:16 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:18:16 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:18:16 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:18:16 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:18:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:18:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:18:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:18:16 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 15:18:16 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:18:16 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:18:16 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:18:16 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:18:16 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:18:16 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:18:16 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:18:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:18:16 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:18:16 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:18:16 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:18:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:18:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:18:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:18:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:18:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:18:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:18:16 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:18:16 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:18:16 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:18:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:18:16 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:18:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:24:23 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:24:23 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:24:23 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:24:23 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:24:23 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:24:23 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:24:23 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:24:23 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:24:23 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:24:23 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:24:23 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:24:23 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:24:23 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:24:41 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:24:41 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:24:41 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:24:41 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:24:41 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:24:41 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:24:41 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:24:41 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:24:41 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:24:41 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:24:41 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:24:41 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:24:41 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:28:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 15:28:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:28:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:28:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:28:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:28:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:28:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:28:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 15:28:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:28:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 15:28:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:28:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:28:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:28:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:28:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:28:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:28:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:28:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 15:28:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:28:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:28:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:28:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:28:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:28:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:28:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:28:51 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:28:51 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:28:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:28:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:28:51 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:28:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:28:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:28:51 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:28:51 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:28:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:28:51 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:28:51 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:28:51 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:28:51 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:28:51 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:28:51 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:28:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:28:51 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:28:51 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:32:33 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-07-04 15:32:33 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:32:33 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:32:33 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:32:33 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:32:33 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:32:33 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:32:33 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-07-04 15:32:35 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-07-04 15:32:35 [http-nio-8080-exec-3] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-04 15:32:35 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-07-04 15:32:35 [http-nio-8080-exec-3] INFO  c.a.controller.AuthController - 收到用户登录请求: cakravartin@example.com
2025-07-04 15:32:35 [http-nio-8080-exec-3] INFO  com.aiplatform.service.UserService - 用户登录请求: cakravartin@example.com
2025-07-04 15:32:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:32:35 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:32:35 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:32:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:32:35 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:32:35 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:32:35 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:32:35 [http-nio-8080-exec-3] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-07-04 15:32:35 [http-nio-8080-exec-3] INFO  com.aiplatform.service.UserService - 开始为用户 7 执行登录自动清理
2025-07-04 15:32:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 15:32:35 [http-nio-8080-exec-3] INFO  com.aiplatform.service.UserService - 用户 7 没有需要清理的过期对话
2025-07-04 15:32:35 [http-nio-8080-exec-3] INFO  com.aiplatform.service.UserService - 用户登录成功: 7
2025-07-04 15:32:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.User */update users 
    set
        email=?,
        last_login=?,
        password=?,
        permissions=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-07-04 15:32:36 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:32:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:32:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:32:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:32:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:32:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:32:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:32:36 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:32:36 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:32:36 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:32:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:32:36 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:32:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:32:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:32:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:32:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:32:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:32:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:32:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:32:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:32:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:32:36 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:32:36 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:32:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:32:36 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:32:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:32:47 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-04 15:32:47 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:32:47 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:32:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:32:47 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:32:47 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:32:47 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:32:47 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-04 15:32:47 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-04 15:32:47 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:32:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:32:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 15:32:47 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-04 15:32:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 15:32:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 15:32:49 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/5
2025-07-04 15:32:49 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:32:49 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:32:49 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:32:49 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:32:49 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:32:49 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:32:49 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/5
2025-07-04 15:32:49 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=5
2025-07-04 15:32:49 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:32:49 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:32:49 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 15:32:49 [http-nio-8080-exec-10] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=5, userId=7
2025-07-04 15:32:49 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 15:32:49 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 15:32:49 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-04 15:32:49 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:32:49 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:32:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:32:49 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:32:49 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:32:49 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:32:49 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-04 15:32:49 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-04 15:32:49 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:32:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:32:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 15:32:49 [http-nio-8080-exec-6] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-04 15:32:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 15:32:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 15:33:00 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-04 15:33:00 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:33:00 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:33:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:33:00 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:33:00 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:33:00 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:33:00 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-04 15:33:00 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-04 15:33:00 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:33:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:33:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 15:33:00 [http-nio-8080-exec-7] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-04 15:33:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 15:33:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 15:35:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:35:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:35:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:35:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:35:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:35:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:35:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:35:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:35:19 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:35:19 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:35:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:35:19 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:35:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:35:25 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-04 15:35:25 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:35:25 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:35:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:35:25 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:35:25 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:35:25 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:35:25 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-04 15:35:25 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-04 15:35:25 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:35:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:35:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 15:35:25 [http-nio-8080-exec-2] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-04 15:35:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 15:35:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 15:41:04 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:41:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:41:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:41:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:41:05 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:41:05 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:41:05 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:41:05 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:41:05 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:41:05 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:41:05 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:41:05 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:41:05 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:41:50 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:41:50 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:41:50 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:41:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:41:50 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:41:50 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:41:50 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:41:50 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:41:50 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:41:50 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:41:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:41:50 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:41:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:43:28 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:43:28 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:43:28 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:43:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:43:28 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:43:28 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:43:28 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:43:28 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:43:28 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:43:28 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:43:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:43:28 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:43:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:47:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:47:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:47:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:47:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:47:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:47:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:47:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:47:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:47:02 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:47:02 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:47:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:47:02 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:47:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:47:22 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 15:47:22 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:47:22 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:47:22 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:47:22 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:47:22 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:47:22 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:47:22 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 15:47:22 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:47:22 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 15:47:22 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:47:22 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:47:22 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:47:22 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:47:22 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:47:22 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:47:22 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 15:47:22 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:47:22 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:47:22 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:47:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:47:22 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:47:22 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:47:22 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:47:22 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:47:22 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:47:22 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:47:22 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:47:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:47:22 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:47:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:47:22 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:47:22 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:47:22 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:47:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:47:22 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:47:22 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:47:22 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:47:22 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:47:22 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:47:22 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:47:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:47:22 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:47:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:56:29 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:56:29 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:56:29 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:56:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:56:29 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:56:29 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:56:29 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:56:29 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:56:29 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:56:29 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:56:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:56:29 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:56:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:59:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 15:59:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:59:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:59:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:59:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:59:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:59:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:59:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 15:59:10 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:59:10 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:59:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:59:10 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:59:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:59:10 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 15:59:10 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:59:10 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:59:10 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:59:11 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:59:11 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:59:11 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:59:11 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 15:59:11 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:59:11 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:59:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:59:11 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:59:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:59:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 15:59:11 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:59:11 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:59:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:59:11 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:59:11 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:59:11 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:59:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 15:59:11 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:59:11 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:59:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:59:11 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:59:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:59:11 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 15:59:11 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:59:11 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:59:11 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:59:11 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:59:11 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:59:11 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:59:11 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 15:59:11 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:59:11 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:59:11 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:59:11 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:59:11 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:59:12 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:59:12 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:59:12 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:59:12 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:59:12 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:59:12 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:59:12 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:59:12 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:59:12 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:59:12 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:59:12 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:59:12 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:59:12 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 15:59:12 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 15:59:12 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 15:59:12 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 15:59:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:59:12 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 15:59:12 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 15:59:12 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 15:59:12 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 15:59:12 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 15:59:12 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 15:59:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 15:59:12 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 15:59:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:04:23 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:04:23 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:04:23 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:04:23 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:04:23 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:04:23 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:04:23 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:04:23 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:04:23 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:04:23 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:04:23 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:04:23 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:04:23 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:01 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:08:01 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:01 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:01 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:01 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:01 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:01 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:01 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:08:01 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:01 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:01 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:01 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:01 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:01 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:08:01 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:01 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:01 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:01 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:01 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:01 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:01 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:08:01 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:01 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:01 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:01 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:01 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:02 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 16:08:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 16:08:02 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 16:08:02 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:02 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:02 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:02 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:02 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:02 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:02 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 16:08:02 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 16:08:02 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 16:08:02 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:02 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:02 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:02 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:02 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 16:08:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:02 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 16:08:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:08:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:08:02 [http-nio-8080-exec-4] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 16:08:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 16:08:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:08:02 [http-nio-8080-exec-4] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 16:08:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:08:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:08:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 16:08:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 16:08:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:08:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:02 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 16:08:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 16:08:02 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 16:08:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:02 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:02 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:02 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:02 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:02 [http-nio-8080-exec-6] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 16:08:02 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:02 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:02 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:02 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:02 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:02 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 16:08:02 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 16:08:02 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 16:08:02 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 16:08:02 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:02 [http-nio-8080-exec-6] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 16:08:02 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 16:08:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:08:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:08:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:08:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:08:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:08:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:08:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 16:08:05 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:08:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:05 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:08:05 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:05 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:05 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:05 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:08:05 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:05 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:05 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:05 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:05 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:05 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:05 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:08:05 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:05 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:05 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:05 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:05 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 16:08:05 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 16:08:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:05 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:05 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:05 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:05 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:05 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 16:08:05 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 16:08:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:08:05 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 16:08:05 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:05 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:08:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:05 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:05 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:05 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:08:05 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 16:08:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:05 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 16:08:05 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:05 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:06 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:06 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:06 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:06 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 16:08:06 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:06 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:08:06 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:08:06 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:08:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:08:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:08:08 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:08 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:08 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:08 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:08:08 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:08 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:08 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:08 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:08 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:08 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:08 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:08:08 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:08 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:08 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:08 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:08 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:08 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:08:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:08 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:08:08 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:08 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:08 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:09 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:08:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:09 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:08:09 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:09 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:09 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:09 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:08:09 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:09 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:09 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:09 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:09 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:09 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:09 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:08:09 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:09 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:09 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:09 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:09 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:09 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:08:09 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:09 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:09 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:09 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:09 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:09 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:08:09 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:09 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:09 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:10 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:08:10 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:10 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:10 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:10 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:10 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:10 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:10 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:08:10 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:10 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:10 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:10 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:10 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:10 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:08:10 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:10 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:10 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:10 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:10 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:10 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:08:10 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:10 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:10 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:12 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 16:08:12 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 16:08:12 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:12 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:12 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:12 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:12 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:12 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:12 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:12 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:12 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:12 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:12 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 16:08:12 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 16:08:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:08:12 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 16:08:12 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:12 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:08:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:08:12 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:12 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:12 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:12 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 16:08:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:12 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 16:08:12 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:12 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:12 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:12 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:12 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:12 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:12 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 16:08:12 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:12 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:08:12 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:08:12 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:08:23 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:08:23 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:23 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:23 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:23 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:23 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:23 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:23 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:08:23 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:23 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:23 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:23 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:23 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:23 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:08:23 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:23 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:23 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:23 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:23 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:23 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:08:23 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:23 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:23 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:25 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-04 16:08:25 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-04 16:08:25 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:25 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:25 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:25 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:25 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:25 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:25 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:25 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:25 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:25 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:25 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:25 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-04 16:08:25 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-04 16:08:25 [http-nio-8080-exec-3] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-04 16:08:25 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-04 16:08:25 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-04 16:08:25 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-04 16:08:25 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-04 16:08:25 [http-nio-8080-exec-8] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-04 16:08:25 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:25 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:25 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:25 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-04 16:08:25 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:25 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:25 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:25 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:25 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:25 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:25 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:25 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:25 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-04 16:08:25 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-04 16:08:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:25 [http-nio-8080-exec-5] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-04 16:08:25 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-04 16:08:25 [http-nio-8080-exec-2] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-04 16:08:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-04 16:08:25 [http-nio-8080-exec-2] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-04 16:08:27 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:08:27 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:27 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:27 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:27 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:27 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:27 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:27 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:08:27 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:27 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:27 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:27 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:27 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:27 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:08:27 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:27 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:27 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:27 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:27 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:27 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:27 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:08:27 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:27 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:27 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:27 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:27 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 16:08:29 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 16:08:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:29 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 16:08:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 16:08:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:08:29 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 16:08:29 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:29 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:08:29 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:29 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:29 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:29 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 16:08:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:08:29 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 16:08:29 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:29 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:29 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:29 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:29 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:29 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 16:08:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:08:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:08:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:08:30 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:08:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:30 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:08:30 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:30 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:08:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:08:30 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:08:30 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:08:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:08:30 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 16:08:30 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 16:08:30 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 16:08:30 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:30 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:30 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:30 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:30 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:30 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:30 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:30 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:30 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:30 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:30 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:30 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:30 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:30 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 16:08:30 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 16:08:30 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 16:08:30 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 16:08:30 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 16:08:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:08:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:08:30 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 16:08:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 16:08:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:08:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:08:30 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 16:08:30 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 16:08:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:08:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:08:30 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:30 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 16:08:30 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 16:08:30 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:30 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:30 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:30 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 16:08:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:30 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:30 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 16:08:30 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:08:30 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:08:30 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 16:08:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 16:08:30 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:30 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:30 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:30 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 16:08:30 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 16:08:30 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:08:30 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 16:08:30 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:08:30 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:08:30 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:08:30 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:08:30 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 16:08:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:08:30 [http-nio-8080-exec-7] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 16:08:30 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:08:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:08:30 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:08:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:08:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:08:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 16:09:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:09:44 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:44 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:44 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:44 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:44 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:44 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:09:44 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:09:44 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:09:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:44 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:09:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:09:44 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:09:44 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:44 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:44 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:44 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:44 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:44 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:09:44 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:09:44 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:09:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:44 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:09:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:09:46 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:09:46 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:46 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:46 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:46 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:46 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:46 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:09:46 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:09:46 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:09:46 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:09:46 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:09:46 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:09:46 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:46 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:46 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:46 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:46 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:09:46 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:09:46 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:09:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:09:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:09:46 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 16:09:46 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 16:09:46 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 16:09:46 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:46 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:46 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:46 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:46 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:46 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:46 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:46 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:46 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 16:09:46 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 16:09:46 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:46 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:46 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:46 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:46 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:46 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:46 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 16:09:46 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 16:09:46 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 16:09:46 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 16:09:46 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:09:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 16:09:46 [http-nio-8080-exec-7] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 16:09:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:09:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:09:46 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 16:09:46 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:46 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:46 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:09:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:09:46 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:46 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:46 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:09:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:09:46 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 16:09:46 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 16:09:46 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 16:09:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 16:09:46 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 16:09:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 16:09:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:46 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 16:09:46 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 16:09:46 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:09:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 16:09:46 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:46 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:09:46 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:46 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:46 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:46 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 16:09:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:09:46 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 16:09:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:09:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:09:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:09:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:09:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 16:09:47 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:09:47 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:47 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:47 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:47 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:47 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:47 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:09:47 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:09:47 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:09:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:47 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:09:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:09:47 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:09:47 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:47 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:47 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:47 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:47 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:47 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:47 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:09:47 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:09:47 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:09:47 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:47 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:09:47 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:09:48 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:09:48 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:48 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:48 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:48 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:48 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:48 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:48 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:09:48 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:09:48 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:09:48 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:48 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:09:48 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:09:48 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:09:48 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:48 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:48 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:48 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:48 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:48 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:09:48 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:09:48 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:09:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:48 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:09:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:09:48 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:09:48 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:48 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:48 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:48 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:48 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:48 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:09:48 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:09:48 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:09:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:48 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:09:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:09:48 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:09:48 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:48 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:48 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:48 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:48 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:48 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:09:48 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:09:48 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:09:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:48 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:09:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:09:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:09:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:09:49 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:09:49 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:09:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:49 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:09:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:09:49 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:09:49 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:09:49 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:09:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:49 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:09:49 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:09:49 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:09:49 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:09:49 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:09:49 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:09:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:09:49 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:09:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:11:06 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 16:11:06 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 16:11:06 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:06 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:06 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:06 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:06 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:06 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:06 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:06 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:06 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:06 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:06 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:06 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:06 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 16:11:06 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 16:11:06 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:06 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:07 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:11:07 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 16:11:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:07 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:11:07 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:11:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:07 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 16:11:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:07 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 16:11:07 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:07 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:07 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:07 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:07 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:07 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 16:11:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:11:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:11:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:11:08 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:11:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:08 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:11:08 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:11:08 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:11:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:08 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:11:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:11:08 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:11:08 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:08 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:08 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:08 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:08 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:08 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:08 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:11:08 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:11:08 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:11:08 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:08 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:11:08 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:11:09 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 16:11:09 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 16:11:09 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 16:11:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:09 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:09 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:09 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:09 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:09 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:09 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:09 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:09 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:09 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:09 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:09 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:09 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 16:11:09 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 16:11:09 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 16:11:09 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 16:11:09 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:09 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:11:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:09 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 16:11:09 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 16:11:09 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 16:11:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:11:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:11:09 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 16:11:09 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 16:11:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:11:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:11:09 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:09 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:09 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:11:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:11:09 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:09 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:09 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:09 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 16:11:09 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:09 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 16:11:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 16:11:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:09 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 16:11:09 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 16:11:09 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 16:11:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:09 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 16:11:09 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 16:11:09 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 16:11:09 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:11:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:09 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:09 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:11:09 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:09 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:09 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:09 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 16:11:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 16:11:09 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 16:11:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 16:11:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:11:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 16:11:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 16:11:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 16:11:10 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:11:10 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:10 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:10 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:10 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:10 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:10 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:10 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:11:10 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:11:10 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:11:10 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:10 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:11:10 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:11:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:11:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:11 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:11 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:11 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:11 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:11:11 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:11:11 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:11:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:11 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:11:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:11:11 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:11:11 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:11 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:11 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:11 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:11 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:11 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:11 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:11:11 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:11:11 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:11:11 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:11 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:11:11 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:11:11 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:11:11 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:11 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:11 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:11 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:11 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:11 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:11 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:11:11 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:11:11 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:11:11 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:11 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:11:11 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:11:11 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:11:11 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:11 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:11 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:11 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:11 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:11 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:11:11 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:11:11 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:11:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:11 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:11:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:11:11 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:11:11 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:11 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:11 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:11 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:11 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:11 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:11 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 16:11:11 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:11:11 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:11:11 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:11 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:11:11 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:11:13 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:11:13 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:13 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:13 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:13 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:13 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:13 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:11:13 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:11:13 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:11:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:13 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:11:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 16:11:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 16:11:13 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 16:11:13 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 16:11:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:13 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 16:11:13 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 16:11:13 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 16:11:13 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 16:11:13 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 16:11:13 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 16:11:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 16:11:13 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 16:11:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 17:14:45 [main] INFO  c.a.AiChatBackendApplication - Starting AiChatBackendApplication using Java 23.0.2 with PID 21728 (D:\SE Courses\SE\SE25Project-05\UIPrototype\server\java-backend\target\classes started by 31656 in D:\SE Courses\SE\SE25Project-05\UIPrototype\server\java-backend)
2025-07-04 17:14:45 [main] DEBUG c.a.AiChatBackendApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-07-04 17:14:45 [main] INFO  c.a.AiChatBackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-04 17:14:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 17:14:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-04 17:14:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 127 ms. Found 7 JPA repository interfaces.
2025-07-04 17:14:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-04 17:14:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-04 17:14:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.AdminMessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-04 17:14:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.ChatRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-04 17:14:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-04 17:14:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.SupportChatRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-04 17:14:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.SystemLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-04 17:14:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-04 17:14:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-04 17:14:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 0 Redis repository interfaces.
2025-07-04 17:14:46 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-04 17:14:46 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-04 17:14:46 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-07-04 17:14:46 [main] INFO  o.a.c.c.C.[.[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-07-04 17:14:46 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1261 ms
2025-07-04 17:14:47 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-04 17:14:47 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-07-04 17:14:47 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-04 17:14:47 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-04 17:14:47 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-04 17:14:47 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@49d979c4
2025-07-04 17:14:47 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-04 17:14:47 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-04 17:14:47 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-07-04 17:14:47 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-04 17:14:48 [main] DEBUG org.hibernate.SQL - 
    alter table admin_messages 
       modify column from_user_id bigint not null
2025-07-04 17:14:48 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table admin_messages 
       modify column from_user_id bigint not null" via JDBC [Cannot change column 'from_user_id': used in a foreign key constraint 'admin_messages_ibfk_1']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table admin_messages 
       modify column from_user_id bigint not null" via JDBC [Cannot change column 'from_user_id': used in a foreign key constraint 'admin_messages_ibfk_1']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'from_user_id': used in a foreign key constraint 'admin_messages_ibfk_1'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 17:14:48 [main] DEBUG org.hibernate.SQL - 
    alter table admin_messages 
       modify column to_user_id bigint
2025-07-04 17:14:48 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table admin_messages 
       modify column to_user_id bigint" via JDBC [Cannot change column 'to_user_id': used in a foreign key constraint 'admin_messages_ibfk_2']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table admin_messages 
       modify column to_user_id bigint" via JDBC [Cannot change column 'to_user_id': used in a foreign key constraint 'admin_messages_ibfk_2']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'to_user_id': used in a foreign key constraint 'admin_messages_ibfk_2'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 17:14:48 [main] DEBUG org.hibernate.SQL - 
    alter table chats 
       modify column id bigint not null auto_increment
2025-07-04 17:14:48 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table chats 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'fk_messages_chat_id' of table 'database.messages']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table chats 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'fk_messages_chat_id' of table 'database.messages']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'id': used in a foreign key constraint 'fk_messages_chat_id' of table 'database.messages'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 17:14:48 [main] DEBUG org.hibernate.SQL - 
    alter table chats 
       modify column user_id bigint not null
2025-07-04 17:14:48 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table chats 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'chats_ibfk_1']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table chats 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'chats_ibfk_1']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'user_id': used in a foreign key constraint 'chats_ibfk_1'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 17:14:48 [main] DEBUG org.hibernate.SQL - 
    alter table messages 
       modify column chat_id bigint not null
2025-07-04 17:14:48 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table messages 
       modify column chat_id bigint not null" via JDBC [Cannot change column 'chat_id': used in a foreign key constraint 'fk_messages_chat_id']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table messages 
       modify column chat_id bigint not null" via JDBC [Cannot change column 'chat_id': used in a foreign key constraint 'fk_messages_chat_id']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'chat_id': used in a foreign key constraint 'fk_messages_chat_id'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 17:14:48 [main] DEBUG org.hibernate.SQL - 
    alter table system_logs 
       modify column user_id bigint
2025-07-04 17:14:48 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table system_logs 
       modify column user_id bigint" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'system_logs_ibfk_1']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table system_logs 
       modify column user_id bigint" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'system_logs_ibfk_1']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'user_id': used in a foreign key constraint 'system_logs_ibfk_1'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 17:14:48 [main] DEBUG org.hibernate.SQL - 
    alter table user_settings 
       modify column user_id bigint not null
2025-07-04 17:14:48 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table user_settings 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'fk_user_settings_user_id']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table user_settings 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'fk_user_settings_user_id']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'user_id': used in a foreign key constraint 'fk_user_settings_user_id'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 17:14:48 [main] DEBUG org.hibernate.SQL - 
    alter table users 
       modify column id bigint not null auto_increment
2025-07-04 17:14:48 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table users 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'admin_messages_ibfk_1' of table 'database.admin_messages']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table users 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'admin_messages_ibfk_1' of table 'database.admin_messages']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'id': used in a foreign key constraint 'admin_messages_ibfk_1' of table 'database.admin_messages'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-04 17:14:48 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-04 17:14:48 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-04 17:14:49 [main] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-07-04 17:14:49 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-04 17:14:49 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@72cd5f41, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3baed0a9, org.springframework.security.web.context.SecurityContextHolderFilter@742b91a5, org.springframework.security.web.header.HeaderWriterFilter@4b3642c4, org.springframework.web.filter.CorsFilter@6fb03f5, org.springframework.security.web.authentication.logout.LogoutFilter@357d4b6d, com.aiplatform.security.JwtAuthenticationFilter@39da0d43, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3b968111, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@75dbf41c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1355d2a0, org.springframework.security.web.session.SessionManagementFilter@63e38fc8, org.springframework.security.web.access.ExceptionTranslationFilter@7e626011, org.springframework.security.web.access.intercept.AuthorizationFilter@7af66b8a]
2025-07-04 17:14:50 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-07-04 17:14:50 [main] INFO  c.a.AiChatBackendApplication - Started AiChatBackendApplication in 4.928 seconds (process running for 5.381)
2025-07-04 17:17:50 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-04 17:17:50 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-04 17:17:50 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-07-04 17:17:50 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 17:17:50 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 17:17:50 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 17:17:50 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 17:17:50 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 17:17:50 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 17:17:50 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 17:17:50 [http-nio-8080-exec-4] WARN  o.s.w.s.h.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/auth/me' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-07-04 17:17:50 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 17:17:50 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 17:17:50 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 17:17:50 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 17:17:50 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 17:17:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 17:17:50 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 17:17:50 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 17:17:50 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 17:17:50 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 17:17:50 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 17:17:50 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 17:17:50 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 17:17:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 17:17:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 17:17:50 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 17:17:50 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 17:17:50 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 17:17:50 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 17:17:50 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 17:17:50 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 17:17:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 17:17:50 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 17:17:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 17:17:50 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 17:17:50 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 17:17:50 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 17:17:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 17:17:50 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 17:17:50 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 17:17:50 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 17:17:50 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 17:17:50 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 17:17:50 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 17:17:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 17:17:50 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 17:17:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 18:22:08 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=47m20s492ms894µs600ns).
2025-07-04 19:01:46 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:01:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:01:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:01:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:01:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:01:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:01:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:01:46 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:01:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:12 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:05:12 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:12 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:12 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:13 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:13 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:13 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:13 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:05:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:05:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:13 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:05:13 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:13 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:13 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:05:13 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:13 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:13 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:13 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:05:13 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:05:13 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:05:13 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:13 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:05:13 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:05:13 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:05:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:13 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:05:13 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:05:13 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:05:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:13 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:05:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:05:25 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:05:25 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:25 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:25 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:25 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:25 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:25 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:25 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:05:25 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:25 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:05:25 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:25 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:25 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:05:25 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:25 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:25 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:25 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:25 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:25 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:05:25 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:25 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:25 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:26 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:05:26 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:05:26 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:05:26 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:26 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:26 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:05:26 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:05:26 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:05:26 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:26 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:26 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:26 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:26 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:26 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:26 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:05:26 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:05:26 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:05:26 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:26 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:05:26 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:05:35 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:05:35 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:35 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:35 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:35 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:35 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:35 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:35 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:05:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:05:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:36 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:05:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:05:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:36 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:05:36 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:05:36 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:05:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:36 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:05:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:05:36 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:05:36 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:36 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:36 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:36 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:36 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:36 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:05:36 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:05:36 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:05:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:36 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:05:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:05:41 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 19:05:41 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 19:05:41 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:41 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:41 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:41 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:41 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:41 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:41 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:41 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:41 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:41 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:41 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:41 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 19:05:41 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 19:05:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:41 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:41 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 19:05:41 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:41 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:41 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:41 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 19:05:41 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:41 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:41 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:41 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 19:05:41 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:41 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 19:05:41 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 19:05:41 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 19:05:41 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:41 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:41 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:42 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:42 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:42 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:42 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 19:05:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 19:05:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 19:05:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 19:05:43 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:05:43 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:43 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:43 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:43 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:43 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:43 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:05:43 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:05:43 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:05:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:43 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:05:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:05:43 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:05:43 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:05:43 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:05:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:43 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:05:43 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:05:43 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:05:43 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:05:43 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:05:43 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:05:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:05:43 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:05:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:10:56 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:10:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:10:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:10:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:10:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:10:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:10:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:10:56 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:10:56 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:10:56 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:10:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:10:56 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:10:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:10:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:10:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:10:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:10:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:10:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:10:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:10:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:10:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:10:56 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:10:56 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:10:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:10:56 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:10:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:15:11 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 19:15:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 19:15:11 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 19:15:11 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:11 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:11 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:11 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:11 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:11 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:12 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:12 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:12 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:12 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 19:15:12 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:12 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:12 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:12 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:12 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:12 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:12 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:12 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 19:15:12 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 19:15:12 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 19:15:12 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:15:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:12 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 19:15:12 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 19:15:12 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 19:15:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 19:15:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 19:15:12 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 19:15:12 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 19:15:12 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:12 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 19:15:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 19:15:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:12 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:12 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:12 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:12 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 19:15:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 19:15:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 19:15:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:12 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 19:15:12 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 19:15:12 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 19:15:12 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:12 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 19:15:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:12 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 19:15:12 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:12 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:12 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:12 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 19:15:12 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 19:15:12 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:15:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:12 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 19:15:12 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:12 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 19:15:12 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:12 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:12 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:12 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 19:15:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 19:15:12 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 19:15:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 19:15:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 19:15:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 19:15:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 19:15:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 19:15:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:15:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:15:13 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:15:13 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:15:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:13 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:15:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:15:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:15:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:13 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:13 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:15:13 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:15:13 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:15:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:13 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:15:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:15:14 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 19:15:14 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 19:15:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:14 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:14 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:14 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:14 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:14 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:14 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:14 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 19:15:14 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 19:15:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:14 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:14 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 19:15:14 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 19:15:14 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:14 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:14 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:14 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 19:15:14 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:14 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:14 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:14 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 19:15:14 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:14 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 19:15:14 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 19:15:14 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:14 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:14 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:14 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:14 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:14 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 19:15:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 19:15:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 19:15:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 19:15:15 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:15:15 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:15 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:15 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:15 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:15 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:15 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:15:15 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:15:15 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:15:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:15 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:15:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:15:15 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:15:15 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:15 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:15 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:15 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:15 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:15 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:15:15 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:15:15 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:15:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:15 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:15:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:15:17 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-04 19:15:17 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-04 19:15:17 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:17 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:17 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:17 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:17 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:17 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:17 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:17 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:17 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-04 19:15:17 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:17 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:17 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:17 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-04 19:15:17 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-04 19:15:17 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-04 19:15:17 [http-nio-8080-exec-2] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-04 19:15:17 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-04 19:15:17 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-04 19:15:17 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:17 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:17 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:17 [http-nio-8080-exec-2] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-04 19:15:17 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:17 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:17 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:17 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-04 19:15:17 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-04 19:15:17 [http-nio-8080-exec-7] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-04 19:15:17 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-04 19:15:17 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:17 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:17 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:17 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:17 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:17 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:17 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-04 19:15:17 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:17 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-04 19:15:17 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-04 19:15:17 [http-nio-8080-exec-1] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-04 19:15:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:15:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:15:19 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:15:19 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:15:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:19 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:15:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:15:19 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:15:19 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:15:19 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:15:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:19 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:15:19 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:15:19 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:15:19 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:15:19 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:15:19 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:15:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:15:19 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:15:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:17:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:17:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:17:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:17:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:17:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:17:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:17:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:17:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:17:02 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:17:02 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:17:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:17:02 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:17:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:18:43 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:18:43 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:18:43 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:18:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:18:43 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:18:43 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:18:43 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:18:43 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:18:43 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:18:43 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:18:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:18:43 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:18:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:20:52 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:20:52 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:20:52 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:20:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:20:52 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:20:52 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:20:52 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:20:52 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:20:52 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:20:52 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:20:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:20:52 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:20:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:20:52 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:20:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:20:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:20:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:20:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:20:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:20:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:20:52 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:20:52 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:20:52 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:20:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:20:52 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:20:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:20:58 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:20:58 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:20:58 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:20:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:20:58 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:20:58 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:20:58 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:20:58 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:20:58 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:20:58 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:20:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:20:58 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:20:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:20:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:20:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:20:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:20:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:20:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:20:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:20:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:20:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:20:58 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:20:58 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:20:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:20:58 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:20:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:21:02 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:21:02 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:21:02 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:21:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:02 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:21:02 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:21:02 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:21:02 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:21:02 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:21:02 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:21:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:02 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:21:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:21:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:21:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:21:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:21:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:21:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:21:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:21:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:21:02 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:21:02 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:21:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:02 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:21:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:21:04 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 19:21:04 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 19:21:04 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:21:04 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:21:04 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:21:04 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:21:04 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 19:21:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:04 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:21:04 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:21:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:04 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:21:04 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:21:04 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:21:04 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 19:21:04 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:21:04 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:21:04 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:21:04 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 19:21:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:04 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:21:04 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:21:04 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:21:04 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 19:21:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:04 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 19:21:04 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:21:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:04 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 19:21:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 19:21:04 [http-nio-8080-exec-6] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 19:21:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 19:21:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 19:21:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 19:21:04 [http-nio-8080-exec-6] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 19:21:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 19:21:04 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 19:21:04 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:21:04 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:21:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 19:21:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 19:21:04 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:21:04 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:21:04 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:21:04 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 19:21:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 19:21:04 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 19:21:04 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:21:04 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:21:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:04 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 19:21:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 19:21:04 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 19:21:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:21:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:21:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:04 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:21:04 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:21:04 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:21:04 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 19:21:04 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 19:21:04 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:21:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:04 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 19:21:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:21:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:21:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:21:04 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 19:21:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 19:21:04 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 19:21:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 19:21:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 19:21:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 19:21:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 19:21:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 19:21:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 19:21:05 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:21:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:21:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:21:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:21:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:21:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:21:05 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:21:05 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:21:05 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:21:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:05 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:21:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:21:05 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:21:05 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:21:05 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:21:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:05 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:21:05 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:21:05 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:21:05 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:21:05 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:21:05 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:21:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:05 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:21:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:21:07 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:21:07 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:21:07 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:21:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:07 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:21:07 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:21:07 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:21:07 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:21:07 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:21:07 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:21:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:07 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:21:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:21:07 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:21:07 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:21:07 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:21:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:07 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:21:07 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:21:07 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:21:07 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:21:07 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:21:07 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:21:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:07 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:21:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:21:22 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:21:22 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:21:22 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:21:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:22 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:21:22 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:21:22 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:21:22 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:21:22 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:21:22 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:21:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:22 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:21:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:21:22 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:21:22 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:21:22 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:21:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:22 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:21:22 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:21:22 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:21:22 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:21:22 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:21:22 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:21:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:21:22 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:21:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:24:56 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:24:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:24:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:24:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:24:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:24:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:24:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:24:56 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:24:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:25:30 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:25:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:25:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:25:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:25:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:25:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:25:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:25:30 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:25:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:25:30 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:25:30 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:25:30 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:25:30 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:25:30 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:25:30 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:25:30 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:25:30 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:25:30 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:25:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:25:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:25:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:25:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:25:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:25:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:25:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:25:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:25:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:25:32 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:25:32 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:25:32 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:25:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:25:32 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:25:32 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:25:32 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:25:32 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:25:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:25:32 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:25:32 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:25:32 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:25:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:25:32 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:25:32 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:25:32 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:25:32 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:25:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:26:17 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:26:17 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:26:17 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:26:17 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:26:17 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:26:17 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:26:17 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:26:17 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:26:17 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:26:17 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:26:17 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:26:17 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:26:17 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:26:17 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:26:17 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:26:17 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:26:17 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:26:17 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:26:17 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:26:17 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:26:17 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:26:17 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:26:17 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:26:17 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:26:17 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:26:17 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:26:17 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:26:53 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:26:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:26:53 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:26:53 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:26:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:26:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:26:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:26:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:26:53 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:26:53 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:26:53 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:26:53 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:26:53 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:26:53 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:26:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:26:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:26:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:26:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:26:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:26:53 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:26:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:26:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:26:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:26:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:26:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:26:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:26:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:26:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:26:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:26:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:26:53 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:26:53 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:26:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:26:53 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:26:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:28:40 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:28:40 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:28:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:28:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:28:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:28:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:28:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:28:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:28:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:28:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:28:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:28:40 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:28:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:28:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:28:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:28:40 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:28:40 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:28:40 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:28:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:28:40 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:28:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:28:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:28:40 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:28:40 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:28:40 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:28:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:28:40 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:28:40 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:28:40 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:28:40 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:28:40 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:28:40 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:28:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:28:40 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:28:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:28:43 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:28:43 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:28:43 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:28:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:28:43 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:28:43 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:28:43 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:28:43 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:28:43 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:28:43 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:28:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:28:43 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:28:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:28:43 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:28:43 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:28:43 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:28:43 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:28:43 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:28:43 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:28:43 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:28:43 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:28:43 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:28:43 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:28:43 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:28:43 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:28:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:28:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:28:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:28:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:28:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:28:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:28:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:28:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:28:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:28:49 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:28:49 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:28:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:28:49 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:28:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:28:49 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:28:49 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:28:49 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:28:49 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:28:49 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:28:49 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:28:49 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:28:49 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:28:49 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:28:49 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:28:49 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:28:49 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:28:49 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:31:48 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:31:48 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:31:48 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:31:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:31:48 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:31:48 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:31:48 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:31:48 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:31:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:31:48 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:31:48 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:31:48 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:31:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:31:48 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:31:48 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:31:48 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:31:48 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:31:48 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:31:48 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:31:48 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:31:48 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:31:48 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:31:48 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:31:48 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:31:48 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:31:48 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:31:48 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:31:48 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:31:48 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:31:48 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:31:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:31:48 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:31:48 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:31:48 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:31:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:31:48 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:31:48 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:31:48 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:31:48 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:31:48 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:31:48 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:31:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:31:48 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:31:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:33:58 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:33:58 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:33:58 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:33:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:33:58 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:33:58 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:33:58 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:33:58 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:33:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:34:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:34:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:34:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:34:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:34:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:34:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:34:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:34:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:34:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:34:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:34:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:34:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:34:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:34:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:02 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:34:02 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:34:02 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:34:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:03 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:34:03 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:34:03 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:34:03 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:34:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:03 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:34:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:34:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:34:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:34:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:34:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:34:03 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:34:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:03 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:34:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:34:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:34:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:34:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:34:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:34:03 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:34:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:03 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:34:03 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:34:03 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:34:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:03 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:34:03 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:34:03 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:34:03 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:34:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:31 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:34:31 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:34:31 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:34:31 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:34:31 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:34:31 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:34:31 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:31 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:34:31 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:34:31 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:34:31 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:34:31 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:34:31 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:34:31 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:34:31 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:34:31 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:34:31 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:31 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:34:31 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:34:31 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:34:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:31 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:34:31 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:34:31 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:34:31 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:31 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:34:31 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:34:31 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:34:31 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:34:31 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:34:31 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:34:31 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:34:31 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:34:31 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:40:04 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:40:04 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:40:04 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:40:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:40:04 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:40:04 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:40:04 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:40:04 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:40:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:40:08 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:40:08 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:40:08 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:40:08 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:40:08 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:40:08 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:40:08 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:40:08 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:40:08 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:40:08 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:40:08 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:40:08 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:40:08 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:40:08 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:40:08 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:40:08 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:40:08 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:40:08 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:40:46 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:40:46 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:40:46 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:40:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:40:46 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:40:46 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:40:46 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:40:46 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:40:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:40:47 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:40:47 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:40:47 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:40:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:40:47 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:40:47 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:40:47 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:40:47 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:40:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:40:47 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:40:47 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:40:47 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:40:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:40:47 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:40:47 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:40:47 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:40:47 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:40:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:43:07 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:43:07 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:43:07 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:43:07 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:43:07 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:43:07 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:43:07 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:43:07 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:43:07 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:43:07 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:43:07 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:43:07 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:43:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:43:07 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:43:07 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:43:07 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:43:07 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:43:07 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:43:07 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:43:07 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:43:07 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:43:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:43:07 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:43:07 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:43:07 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:43:07 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:43:07 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:43:07 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:43:07 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:43:07 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:43:07 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:43:07 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:43:07 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:43:07 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:43:07 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:43:07 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:43:07 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:43:07 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:43:07 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:43:07 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:43:07 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:43:07 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:43:07 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:43:07 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:48:03 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:48:03 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:48:03 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:48:03 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:48:03 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:48:03 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:48:03 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:03 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:48:03 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:48:03 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:48:03 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:48:03 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:48:03 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:48:03 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:48:03 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:48:03 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:48:03 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:48:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:04 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:48:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:48:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:04 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:48:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:48:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:48:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:48:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:48:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:48:04 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:48:04 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:48:04 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:48:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:04 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:48:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:48:33 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:48:33 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:48:33 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:48:33 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:48:33 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:48:33 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:48:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:33 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:48:33 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:48:33 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:48:33 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:48:33 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:48:33 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:48:33 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:48:33 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:48:33 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:48:33 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:48:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:33 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:48:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:48:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:33 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:48:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:48:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:48:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:48:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:48:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:48:33 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:48:33 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:48:33 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:48:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:33 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:48:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:48:38 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:48:38 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:48:38 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:48:38 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:38 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:48:38 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:48:38 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:48:38 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:48:38 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:48:38 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:48:38 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:39 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:48:39 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:48:39 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:48:39 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:48:39 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:48:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:39 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:48:39 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:48:39 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:48:39 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:48:39 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:48:39 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:48:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:48:39 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:48:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:51:40 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:51:40 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:51:40 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:51:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:51:40 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:51:40 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:51:40 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:51:40 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:51:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:53:39 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:53:39 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:53:39 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:53:39 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:53:39 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:53:39 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:53:39 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:53:39 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:53:39 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:53:44 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:53:44 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:53:44 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:53:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:53:44 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:53:44 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:53:44 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:53:44 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:53:44 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:53:44 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:53:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:53:44 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:53:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:53:44 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:53:44 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:53:44 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:53:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:53:44 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:53:44 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:53:44 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:53:44 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:53:44 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:53:44 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:53:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:53:44 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:53:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:54:54 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:54:54 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:54:54 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:54:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:54:54 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:54:54 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:54:54 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:54:54 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:54:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:54:58 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:54:58 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:54:58 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:54:58 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:54:58 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:54:58 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:54:58 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:54:58 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:54:58 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:54:58 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:54:58 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:54:58 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:54:58 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:54:58 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:54:58 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:54:58 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:54:58 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:54:58 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:54:58 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:54:58 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:54:58 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:54:58 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:54:58 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:54:58 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:54:58 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:54:58 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:55:20 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:55:20 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:55:20 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:55:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:55:20 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:55:20 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:55:20 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:55:20 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:55:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:55:48 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:55:48 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:55:48 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:55:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:55:48 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:55:48 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:55:48 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:55:48 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:55:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:55:48 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:55:48 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:55:48 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:55:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:55:48 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:55:48 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:55:48 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:55:48 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:55:48 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:55:48 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:55:48 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:55:48 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:55:48 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:55:48 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:55:48 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:55:48 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:55:48 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:55:48 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:55:48 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:55:48 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:55:48 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:55:48 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:55:48 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:55:48 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:55:48 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:55:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:55:48 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:55:48 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:55:48 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:55:48 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:55:48 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:55:48 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:55:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:55:48 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:55:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:55:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:55:51 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:55:51 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:55:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:55:51 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:55:51 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:55:51 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:55:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:55:51 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:55:51 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:55:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:55:51 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:55:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:55:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:55:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:55:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:55:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:55:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:55:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:55:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:55:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:55:51 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:55:51 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:55:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:55:51 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:55:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:56:18 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:56:18 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:56:18 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:56:18 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:56:18 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:56:18 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:56:18 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:56:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:56:18 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:56:18 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:56:18 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:56:18 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:56:18 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:56:18 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:56:18 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:56:18 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:56:18 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:56:18 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:56:18 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:56:18 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:56:18 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:56:18 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:56:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:56:18 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:56:18 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:56:18 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:56:18 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:56:18 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:56:18 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:56:18 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:56:18 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:56:18 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:57:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:57:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:57:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:57:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:57:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:57:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:57:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:57:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:57:49 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:57:49 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:57:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:57:49 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:57:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:57:49 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:57:49 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:57:49 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:57:49 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:57:49 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:57:49 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:57:49 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:57:49 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:57:49 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:57:49 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:57:49 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:57:49 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:57:49 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:57:56 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:57:56 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:57:56 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:57:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:57:56 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:57:56 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:57:56 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:57:56 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:57:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:57:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:57:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:57:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:57:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:57:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:57:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:57:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:57:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:57:56 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:57:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:57:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:57:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:57:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:57:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:57:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:57:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:57:56 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:57:56 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:57:56 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:57:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:57:56 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:57:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:57:56 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:57:56 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:57:56 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:57:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:57:56 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:57:56 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:57:56 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:57:56 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:57:56 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:57:56 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:57:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:57:56 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:57:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:58:26 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:58:26 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:26 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:26 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:26 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:26 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:26 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:26 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:58:26 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:26 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:58:26 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:26 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:26 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:26 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:26 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:26 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:26 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:58:26 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:29 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:58:29 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:29 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:29 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:29 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:29 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:29 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:58:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:29 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:58:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:58:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:29 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:58:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:58:29 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:58:29 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:58:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:29 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:58:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:58:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:58:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:58:30 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:58:30 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:58:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:30 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:58:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:58:32 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:58:32 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:32 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:32 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:32 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:32 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:32 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:58:32 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:58:32 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:58:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:32 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:58:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:58:32 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:58:32 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:32 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:32 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:32 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:32 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:32 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:58:32 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:58:32 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:58:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:32 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:58:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:58:34 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 19:58:34 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:34 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:34 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:34 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:34 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:34 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:34 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 19:58:34 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:58:34 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:58:34 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:34 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:58:34 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:58:34 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 19:58:34 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:34 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:34 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:34 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:34 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:34 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:34 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 19:58:34 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:58:34 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:58:34 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:34 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:58:34 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:58:34 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 19:58:34 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:34 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:34 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:34 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:34 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:34 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 19:58:34 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:58:34 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:58:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:34 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:58:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:58:34 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 19:58:34 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:34 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:34 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:34 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:34 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:34 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 19:58:34 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:58:34 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:58:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:34 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:58:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:58:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:58:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:35 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:35 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:58:35 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:58:35 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:58:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:35 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:58:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:58:35 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:58:35 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:35 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:35 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:35 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:35 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:35 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:35 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:58:35 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:58:35 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:58:35 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:35 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:58:35 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:58:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 19:58:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 19:58:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:56 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:58:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:56 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:58:56 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:58:56 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:58:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:56 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:58:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:58:56 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:58:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:58:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:58:56 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:58:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:58:56 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:58:56 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:58:56 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:58:56 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:58:56 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:58:57 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:58:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:59:04 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-04 19:59:04 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-04 19:59:04 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:59:04 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:59:04 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:59:04 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:59:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:59:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:59:04 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:59:04 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:59:04 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:59:04 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:59:04 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:59:04 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:59:04 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-04 19:59:04 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-04 19:59:04 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-04 19:59:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:59:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-04 19:59:04 [http-nio-8080-exec-5] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-04 19:59:04 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-04 19:59:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-04 19:59:04 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:59:04 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:59:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:59:04 [http-nio-8080-exec-5] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-04 19:59:04 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-04 19:59:04 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:59:04 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:59:04 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:59:04 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-04 19:59:04 [http-nio-8080-exec-3] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-04 19:59:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-04 19:59:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:59:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:59:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:59:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:59:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:59:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:59:04 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-04 19:59:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:59:04 [http-nio-8080-exec-4] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-04 19:59:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-04 19:59:04 [http-nio-8080-exec-4] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-04 19:59:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:59:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:59:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:59:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:59:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:59:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:59:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:59:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:59:05 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:59:05 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:59:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:59:05 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:59:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 19:59:05 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 19:59:05 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 19:59:05 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 19:59:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:59:05 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 19:59:05 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 19:59:05 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 19:59:05 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 19:59:05 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 19:59:05 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 19:59:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 19:59:05 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 19:59:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:01:25 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:01:25 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:01:25 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:01:25 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:01:25 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:01:25 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:01:25 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:01:25 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:01:25 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:01:25 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:01:25 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:01:25 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:01:25 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:01:31 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:01:31 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:01:31 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:01:31 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:01:31 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:01:31 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:01:31 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:01:31 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:01:31 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:01:31 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:01:31 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:01:31 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:01:31 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:01:31 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:01:31 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:01:31 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:01:31 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:01:31 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:01:31 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:01:31 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:01:31 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:01:31 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:01:31 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:01:31 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:01:31 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:01:31 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:02:09 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:02:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:02:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:02:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:02:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:02:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:02:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:02:09 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:02:09 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:02:09 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:02:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:02:09 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:02:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:02:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:02:10 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:02:10 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:02:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:02:10 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:02:10 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:02:10 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:02:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:02:10 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:02:10 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:02:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:02:10 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:02:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:02:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:02:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:02:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:02:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:02:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:02:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:02:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:02:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:02:10 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:02:10 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:02:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:02:10 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:02:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:02:10 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:02:10 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:02:10 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:02:10 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:02:10 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:02:10 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:02:10 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:02:10 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:02:10 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:02:10 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:02:10 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:02:10 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:02:10 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:02:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:02:10 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:02:10 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:02:10 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:02:10 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:02:10 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:02:10 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:02:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:02:10 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:02:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:02:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:02:11 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:02:11 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:02:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:02:11 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:02:11 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:02:11 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:02:11 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:02:11 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:02:11 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:02:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:02:11 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:02:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:02:11 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:02:11 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:02:11 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:02:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:02:11 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:02:11 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:02:11 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:02:11 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:02:11 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:02:11 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:02:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:02:11 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:02:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:04:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 20:04:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:04:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:04:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:04:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:04:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:04:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:04:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 20:04:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:04:09 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:04:09 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:04:09 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:04:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:04:09 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:04:09 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:04:09 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:04:09 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:04:09 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:04:09 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:04:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:04:09 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:04:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:04:09 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:04:09 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:04:09 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:04:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:04:09 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:04:09 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:04:09 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:04:09 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:04:09 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:04:09 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:04:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:04:09 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:04:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:14:07 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:14:07 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:14:07 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:14:07 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:14:07 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:14:07 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:14:07 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:14:07 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:14:07 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:14:07 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:14:07 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:14:07 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:14:07 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:20:45 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:20:45 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:20:45 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:20:45 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:20:45 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:20:45 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:20:45 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:20:45 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:20:45 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:20:45 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:20:45 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:20:45 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:20:45 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:36:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:36:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:36:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:36:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:36:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:36:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:36:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:36:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:36:36 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:36:36 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:36:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:36:36 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:36:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:42:01 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:42:01 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:42:01 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:42:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:01 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 20:42:01 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:42:01 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:42:01 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:01 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:42:01 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:42:01 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:42:01 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:42:01 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:42:01 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:42:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:01 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:42:01 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:42:01 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:42:01 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 20:42:01 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:42:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:42:01 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:03 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-04 20:42:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:42:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:42:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:42:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:42:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:42:03 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-04 20:42:03 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-04 20:42:03 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:42:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:42:03 [http-nio-8080-exec-1] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-04 20:42:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:42:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:42:07 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /chat/17/message
2025-07-04 20:42:07 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:42:07 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:42:07 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:07 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:42:07 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:42:07 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:42:07 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /chat/17/message
2025-07-04 20:42:07 [http-nio-8080-exec-9] INFO  c.a.controller.ChatController - 发送消息到聊天 17: {content=666, role=user}
2025-07-04 20:42:07 [http-nio-8080-exec-9] DEBUG c.a.controller.ChatController - 当前认证主体: cakravartin@example.com
2025-07-04 20:42:07 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:07 [http-nio-8080-exec-9] INFO  c.a.controller.ChatController - 用户消息: 666
2025-07-04 20:42:07 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=17, userId=7, role=user
2025-07-04 20:42:07 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:42:07 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-04 20:42:07 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=103
2025-07-04 20:42:07 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-04 20:42:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=17, userId=7, role=assistant
2025-07-04 20:42:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:42:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-04 20:42:08 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=104
2025-07-04 20:42:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-04 20:42:08 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:42:08 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:42:08 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:42:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:08 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:42:08 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:42:08 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:42:08 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:42:08 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:42:08 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:42:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:08 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:42:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:42:13 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:42:13 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:42:13 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:42:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:13 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:42:13 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:42:13 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:42:13 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:42:13 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:42:13 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:42:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:13 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:42:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:42:14 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:42:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:42:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:42:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:42:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:42:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:42:14 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:42:14 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:42:14 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:42:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:14 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:42:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:42:18 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:42:18 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:42:18 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:42:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:18 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:42:18 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:42:18 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:42:18 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:42:18 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:42:18 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:42:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:18 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:42:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:42:18 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:42:18 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:42:18 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:42:18 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:18 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:42:18 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:42:18 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:42:18 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:42:18 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:42:18 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:42:18 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:42:18 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:42:18 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:43:00 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:43:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:00 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:43:00 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:43:00 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:00 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:43:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:43:02 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-04 20:43:02 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:02 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:02 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:02 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:02 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:02 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-04 20:43:02 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-04 20:43:02 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:02 [http-nio-8080-exec-1] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-04 20:43:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:02 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-04 20:43:02 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:02 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:02 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:02 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:02 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:02 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-04 20:43:02 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-04 20:43:02 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:02 [http-nio-8080-exec-2] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-04 20:43:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:07 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/5
2025-07-04 20:43:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:07 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/5
2025-07-04 20:43:07 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=5
2025-07-04 20:43:07 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:07 [http-nio-8080-exec-10] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=5, userId=7
2025-07-04 20:43:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:09 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-04 20:43:09 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:09 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:09 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:09 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:09 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:09 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-04 20:43:09 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-04 20:43:09 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:09 [http-nio-8080-exec-6] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-04 20:43:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:11 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-04 20:43:11 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:11 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:11 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:11 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:11 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:11 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-04 20:43:11 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-04 20:43:11 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:11 [http-nio-8080-exec-5] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-04 20:43:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:23 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-04 20:43:23 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:23 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:23 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:23 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:23 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:23 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:23 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-04 20:43:23 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-04 20:43:23 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:23 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:23 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:24 [http-nio-8080-exec-4] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-04 20:43:24 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:24 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:24 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/5
2025-07-04 20:43:24 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:24 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:24 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:24 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:24 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:24 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/5
2025-07-04 20:43:24 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=5
2025-07-04 20:43:24 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:24 [http-nio-8080-exec-8] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=5, userId=7
2025-07-04 20:43:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:25 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-04 20:43:25 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:25 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:25 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:25 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:25 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:25 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-04 20:43:25 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-04 20:43:25 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:25 [http-nio-8080-exec-7] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-04 20:43:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:31 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:43:31 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:31 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:31 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:31 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:31 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:31 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:31 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:43:31 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:43:31 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:31 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:31 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:43:31 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:43:35 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /chat/create
2025-07-04 20:43:35 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:35 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:35 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:35 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:35 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:35 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /chat/create
2025-07-04 20:43:35 [http-nio-8080-exec-9] INFO  c.a.controller.ChatController - 创建聊天会话: {title=89789, aiType=text_to_text}
2025-07-04 20:43:35 [http-nio-8080-exec-9] DEBUG c.a.controller.ChatController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:35 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 创建聊天会话: userId=7, title=89789, aiType=text_to_text
2025-07-04 20:43:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Chat */insert 
    into
        chats (ai_type, created_at, is_favorite, is_protected, last_activity, message_count, title, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-04 20:43:35 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 聊天会话创建成功: chatId=24
2025-07-04 20:43:35 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:43:35 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:35 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:35 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:35 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:35 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:35 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:35 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:43:35 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:43:35 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:35 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:35 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:43:35 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:43:35 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /chat/24/message
2025-07-04 20:43:35 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:35 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:35 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:35 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:35 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:35 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /chat/24/message
2025-07-04 20:43:35 [http-nio-8080-exec-5] INFO  c.a.controller.ChatController - 发送消息到聊天 24: {content=89789, role=user}
2025-07-04 20:43:35 [http-nio-8080-exec-5] DEBUG c.a.controller.ChatController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:35 [http-nio-8080-exec-5] INFO  c.a.controller.ChatController - 用户消息: 89789
2025-07-04 20:43:35 [http-nio-8080-exec-5] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=24, userId=7, role=user
2025-07-04 20:43:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-04 20:43:35 [http-nio-8080-exec-5] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=105
2025-07-04 20:43:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-04 20:43:35 [http-nio-8080-exec-5] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=24, userId=7, role=assistant
2025-07-04 20:43:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-04 20:43:35 [http-nio-8080-exec-5] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=106
2025-07-04 20:43:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-04 20:43:35 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:43:35 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:35 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:35 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:35 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:35 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:35 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:43:35 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:43:35 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:35 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:43:35 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:43:39 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-04 20:43:39 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:39 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:39 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:39 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:39 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:39 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:39 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-04 20:43:39 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-04 20:43:39 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:39 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:39 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:39 [http-nio-8080-exec-4] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-04 20:43:39 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:39 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:40 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-04 20:43:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:40 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-04 20:43:40 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-04 20:43:40 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:40 [http-nio-8080-exec-7] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-04 20:43:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:41 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-04 20:43:41 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:41 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:41 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:41 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:41 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:41 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-04 20:43:41 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-04 20:43:41 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:41 [http-nio-8080-exec-1] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-04 20:43:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:42 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-04 20:43:42 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:42 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:42 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:42 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:42 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:42 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-04 20:43:42 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-04 20:43:42 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:42 [http-nio-8080-exec-2] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-04 20:43:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:42 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:44 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-04 20:43:44 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:44 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:44 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:44 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:44 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:44 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-04 20:43:44 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-04 20:43:44 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:44 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-04 20:43:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:45 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-04 20:43:45 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:45 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:45 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:45 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:45 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:45 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:45 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-04 20:43:45 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-04 20:43:45 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:45 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:45 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:45 [http-nio-8080-exec-10] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-04 20:43:45 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:45 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:49 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /chat/24/message
2025-07-04 20:43:49 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:49 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:49 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:49 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:49 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:49 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /chat/24/message
2025-07-04 20:43:49 [http-nio-8080-exec-6] INFO  c.a.controller.ChatController - 发送消息到聊天 24: {content=67, role=user}
2025-07-04 20:43:49 [http-nio-8080-exec-6] DEBUG c.a.controller.ChatController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:49 [http-nio-8080-exec-6] INFO  c.a.controller.ChatController - 用户消息: 67
2025-07-04 20:43:49 [http-nio-8080-exec-6] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=24, userId=7, role=user
2025-07-04 20:43:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-04 20:43:49 [http-nio-8080-exec-6] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=107
2025-07-04 20:43:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-04 20:43:49 [http-nio-8080-exec-6] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=24, userId=7, role=assistant
2025-07-04 20:43:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-04 20:43:49 [http-nio-8080-exec-6] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=108
2025-07-04 20:43:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-04 20:43:49 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:43:49 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:49 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:49 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:49 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:49 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:49 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:49 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:43:49 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:43:49 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:49 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:49 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:43:49 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:43:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-04 20:43:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-04 20:43:53 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-04 20:43:53 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:53 [http-nio-8080-exec-3] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-04 20:43:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:54 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-04 20:43:54 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:54 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:54 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:54 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:54 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:54 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:54 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-04 20:43:54 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-04 20:43:54 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:54 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:54 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:54 [http-nio-8080-exec-4] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-04 20:43:54 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:54 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:55 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-04 20:43:55 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:55 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:55 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:55 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:55 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:55 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:55 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-04 20:43:55 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-04 20:43:55 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:55 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:55 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:55 [http-nio-8080-exec-8] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-04 20:43:55 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:55 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:43:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-04 20:43:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:43:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:43:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:43:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:43:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:43:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-04 20:43:55 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-04 20:43:55 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:43:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:43:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:55 [http-nio-8080-exec-7] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-04 20:43:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:43:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:44:03 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /chat/6/message
2025-07-04 20:44:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:44:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:44:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:44:04 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:44:04 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:44:04 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:44:04 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /chat/6/message
2025-07-04 20:44:04 [http-nio-8080-exec-2] INFO  c.a.controller.ChatController - 发送消息到聊天 6: {content=555, role=user}
2025-07-04 20:44:04 [http-nio-8080-exec-2] DEBUG c.a.controller.ChatController - 当前认证主体: cakravartin@example.com
2025-07-04 20:44:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:44:04 [http-nio-8080-exec-2] INFO  c.a.controller.ChatController - 用户消息: 555
2025-07-04 20:44:04 [http-nio-8080-exec-2] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=6, userId=7, role=user
2025-07-04 20:44:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:44:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-04 20:44:04 [http-nio-8080-exec-2] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=109
2025-07-04 20:44:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-04 20:44:04 [http-nio-8080-exec-2] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=6, userId=7, role=assistant
2025-07-04 20:44:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:44:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-04 20:44:04 [http-nio-8080-exec-2] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=110
2025-07-04 20:44:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-04 20:44:04 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:44:04 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:44:04 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:44:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:44:04 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:44:04 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:44:04 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:44:04 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:44:04 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:44:04 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:44:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:44:04 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:44:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:46:27 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:46:27 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:27 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:27 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:27 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:27 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:27 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:46:27 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:46:27 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:27 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:46:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:46:28 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-04 20:46:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:28 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-04 20:46:28 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-04 20:46:28 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:28 [http-nio-8080-exec-5] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-04 20:46:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:46:28 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-04 20:46:28 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:28 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:28 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:28 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:28 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:28 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:28 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-04 20:46:28 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-04 20:46:28 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:28 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:28 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:28 [http-nio-8080-exec-3] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-04 20:46:28 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:28 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:46:29 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/5
2025-07-04 20:46:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:29 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/5
2025-07-04 20:46:29 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=5
2025-07-04 20:46:29 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:29 [http-nio-8080-exec-4] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=5, userId=7
2025-07-04 20:46:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:46:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-04 20:46:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-04 20:46:30 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-04 20:46:30 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:30 [http-nio-8080-exec-8] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-04 20:46:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:46:31 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-04 20:46:31 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:31 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:31 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:31 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:31 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:31 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-04 20:46:31 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-04 20:46:31 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:31 [http-nio-8080-exec-7] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-04 20:46:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:46:40 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-04 20:46:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:40 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-04 20:46:40 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-04 20:46:40 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:40 [http-nio-8080-exec-1] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-04 20:46:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:46:40 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-04 20:46:40 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:40 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:40 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:40 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:40 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:40 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-04 20:46:40 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-04 20:46:40 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:40 [http-nio-8080-exec-2] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-04 20:46:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:46:43 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing POST /chat/6/message
2025-07-04 20:46:43 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:43 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:43 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:43 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:43 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:43 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured POST /chat/6/message
2025-07-04 20:46:43 [http-nio-8080-exec-9] INFO  c.a.controller.ChatController - 发送消息到聊天 6: {content=777, role=user}
2025-07-04 20:46:43 [http-nio-8080-exec-9] DEBUG c.a.controller.ChatController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:43 [http-nio-8080-exec-9] INFO  c.a.controller.ChatController - 用户消息: 777
2025-07-04 20:46:43 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=6, userId=7, role=user
2025-07-04 20:46:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-04 20:46:43 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=111
2025-07-04 20:46:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-04 20:46:43 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=6, userId=7, role=assistant
2025-07-04 20:46:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-04 20:46:44 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=112
2025-07-04 20:46:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-04 20:46:44 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:46:44 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:44 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:44 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:44 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:44 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:44 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:46:44 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:46:44 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:44 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:46:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:46:46 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-04 20:46:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:46 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-04 20:46:46 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-04 20:46:46 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:46 [http-nio-8080-exec-6] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-04 20:46:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:46:46 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-04 20:46:46 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:46 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:46 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:46 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:46 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:46 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-04 20:46:46 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-04 20:46:46 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:46 [http-nio-8080-exec-5] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-04 20:46:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:46:47 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-04 20:46:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:47 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-04 20:46:47 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-04 20:46:47 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:47 [http-nio-8080-exec-3] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-04 20:46:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:46:48 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-04 20:46:48 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:48 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:48 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:48 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:48 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:48 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-04 20:46:48 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-04 20:46:48 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:48 [http-nio-8080-exec-4] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-04 20:46:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:46:50 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-04 20:46:50 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:50 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:50 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:50 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:50 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:50 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:50 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-04 20:46:50 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-04 20:46:50 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:50 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:50 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:50 [http-nio-8080-exec-8] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-04 20:46:50 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:50 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:46:50 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-04 20:46:50 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:46:50 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:46:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:50 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:46:50 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:46:50 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:46:50 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-04 20:46:50 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-04 20:46:50 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:46:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:46:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:50 [http-nio-8080-exec-7] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-04 20:46:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:46:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:47:15 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:47:15 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:47:15 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:47:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:47:15 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:47:15 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:47:15 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:47:15 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:47:15 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:47:15 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:47:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:47:15 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:47:15 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:47:15 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:47:15 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:47:15 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:47:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:47:15 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:47:15 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:47:15 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:47:15 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:47:15 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:47:15 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:47:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:47:15 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:47:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:47:15 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:47:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:47:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:47:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:47:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:47:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:47:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:47:15 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:47:15 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:47:15 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:47:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:47:15 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:47:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:47:15 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:47:15 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:47:15 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:47:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:47:15 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:47:15 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:47:15 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:47:15 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 20:47:15 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:47:15 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:47:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:47:15 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:47:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:47:16 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:47:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:47:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:47:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:47:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:47:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:47:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:47:16 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:47:16 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:47:16 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:47:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:47:16 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:47:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:47:16 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:47:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:47:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:47:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:47:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:47:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:47:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:47:16 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:47:16 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:47:16 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:47:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:47:16 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:47:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:48:33 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 20:48:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:48:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:48:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:48:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:48:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:48:33 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:48:33 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 20:48:33 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 20:48:33 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:48:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:48:33 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 20:48:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 20:48:45 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-04 20:48:45 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:48:45 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:48:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:48:45 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:48:45 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:48:45 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:48:45 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-04 20:48:45 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-04 20:48:45 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:48:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:48:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:48:45 [http-nio-8080-exec-7] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-04 20:48:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:48:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:48:45 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/5
2025-07-04 20:48:45 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:48:45 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:48:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:48:45 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:48:45 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:48:45 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:48:45 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/5
2025-07-04 20:48:45 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=5
2025-07-04 20:48:45 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:48:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:48:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:48:45 [http-nio-8080-exec-1] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=5, userId=7
2025-07-04 20:48:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:48:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:51:49 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-04 20:51:49 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:51:49 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:51:49 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:51:49 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:51:49 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:51:49 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:51:49 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-04 20:51:49 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-04 20:51:49 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:51:49 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:51:49 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:51:49 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-04 20:51:49 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:51:49 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:52:58 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-04 20:52:58 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:52:58 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:52:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:52:58 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:52:58 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:52:58 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:52:58 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-04 20:52:58 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-04 20:52:58 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:52:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:52:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:52:58 [http-nio-8080-exec-6] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-04 20:52:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:52:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:52:59 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-04 20:52:59 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:52:59 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:52:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:52:59 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:52:59 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:52:59 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:52:59 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-04 20:52:59 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-04 20:52:59 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:52:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:52:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:52:59 [http-nio-8080-exec-5] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-04 20:52:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:52:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:53:00 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/5
2025-07-04 20:53:00 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:53:00 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:53:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:53:00 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:53:00 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:53:00 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:53:00 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/5
2025-07-04 20:53:00 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=5
2025-07-04 20:53:00 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:53:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:53:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:53:00 [http-nio-8080-exec-4] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=5, userId=7
2025-07-04 20:53:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:53:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:53:01 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-04 20:53:01 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:53:01 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:53:01 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:53:01 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:53:01 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:53:01 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:53:01 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-04 20:53:01 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-04 20:53:01 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:53:01 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:53:01 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:53:01 [http-nio-8080-exec-3] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-04 20:53:01 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:53:01 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:53:01 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-04 20:53:01 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:53:01 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:53:01 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:53:01 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:53:01 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:53:01 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:53:01 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-04 20:53:01 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-04 20:53:01 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:53:01 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:53:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:53:02 [http-nio-8080-exec-8] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-04 20:53:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:53:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:53:02 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-04 20:53:02 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:53:02 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:53:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:53:02 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:53:02 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:53:02 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:53:02 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-04 20:53:02 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-04 20:53:02 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:53:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:53:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:53:02 [http-nio-8080-exec-7] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-04 20:53:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:53:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:53:03 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-04 20:53:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:53:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:53:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:53:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:53:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:53:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:53:03 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-04 20:53:03 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-04 20:53:03 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:53:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:53:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:53:03 [http-nio-8080-exec-1] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-04 20:53:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:53:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:53:03 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-04 20:53:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:53:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:53:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:53:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:53:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:53:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:53:03 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-04 20:53:03 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-04 20:53:03 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:53:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:53:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:53:03 [http-nio-8080-exec-2] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-04 20:53:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:53:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 20:53:04 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-04 20:53:04 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 20:53:04 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 20:53:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:53:04 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 20:53:04 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 20:53:04 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 20:53:04 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-04 20:53:04 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-04 20:53:04 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 20:53:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 20:53:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:53:04 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-04 20:53:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-04 20:53:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-04 21:06:01 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:06:01 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:06:01 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:06:01 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:06:01 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:06:01 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:06:01 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:06:01 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:06:01 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:06:01 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:06:01 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:06:01 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:06:01 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:06:01 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:06:01 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:06:01 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:06:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:06:01 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:06:01 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:06:01 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:06:01 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:06:01 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:06:01 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:06:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:06:01 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:06:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:11:35 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:11:35 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:11:35 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:11:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:11:35 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:11:35 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:11:35 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:11:35 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:11:35 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:11:35 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:11:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:11:35 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:11:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:15:40 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:15:40 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:15:40 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:15:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:15:40 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:15:40 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:15:40 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:15:40 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:15:40 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:15:40 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:15:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:15:40 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:15:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:18:35 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:18:35 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:18:35 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:18:35 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:18:35 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:18:35 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:18:35 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:18:35 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:18:35 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:18:35 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:18:35 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:18:35 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:18:35 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:18:35 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:18:35 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:18:35 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:18:35 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:18:35 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:18:35 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:18:35 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:18:35 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:18:35 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:18:35 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:18:35 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:18:35 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:18:35 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:19:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:19:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:19:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:19:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:19:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:19:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:19:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:19:53 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:19:53 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:19:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:53 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:19:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:19:53 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:19:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:19:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:19:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:19:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:19:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:19:53 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:19:53 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:19:53 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:19:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:53 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:19:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:19:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:19:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:19:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:19:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:19:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:19:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:19:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:19:55 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:19:55 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:19:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:55 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:19:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:19:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:19:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:19:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:19:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:19:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:19:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:19:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:19:55 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:19:55 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:19:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:55 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:19:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:19:57 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:19:57 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:19:57 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:19:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:57 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:19:57 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:19:57 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:19:57 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:19:57 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:19:57 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:19:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:57 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:19:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:19:57 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:19:57 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:19:57 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:19:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:57 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:19:57 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:19:57 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:19:57 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:19:57 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:19:57 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:19:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:57 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:19:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:19:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:19:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:19:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:19:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:19:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:19:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:19:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:19:58 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:19:58 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:19:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:58 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:19:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:19:58 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:19:58 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:19:58 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:19:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:58 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:19:58 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:19:58 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:19:58 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:19:58 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:19:58 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:19:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:58 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:19:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:19:58 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:19:58 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:19:58 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:19:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:58 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:19:58 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:19:58 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:19:58 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:19:58 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:19:58 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:19:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:58 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:19:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:19:58 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:19:58 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:19:58 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:19:58 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:58 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:19:58 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:19:58 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:19:58 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:19:58 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:19:58 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:19:58 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:58 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:19:58 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:19:58 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:19:58 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:19:58 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:19:58 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:58 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:19:58 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:19:58 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:19:58 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:19:58 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:19:58 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:19:58 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:58 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:19:58 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:19:58 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:19:58 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:19:58 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:19:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:58 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:19:58 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:19:58 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:19:58 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:19:58 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:19:58 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:19:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:19:58 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:19:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:20:27 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:20:27 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:27 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:27 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:27 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:27 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:27 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:20:27 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:20:27 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:20:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:27 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:20:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:20:27 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:20:27 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:27 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:27 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:27 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:27 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:27 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:27 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:20:27 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:20:27 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:20:27 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:27 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:20:27 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:20:28 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 21:20:28 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 21:20:28 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 21:20:28 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:28 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:28 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:28 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:28 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:28 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:28 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:28 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:28 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:28 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:28 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:28 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:28 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:28 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:28 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:28 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:28 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 21:20:28 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 21:20:28 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 21:20:28 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 21:20:28 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:20:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:28 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:28 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 21:20:28 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 21:20:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 21:20:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 21:20:28 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 21:20:28 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 21:20:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 21:20:28 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 21:20:28 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 21:20:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 21:20:28 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 21:20:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:28 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 21:20:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:28 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 21:20:28 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 21:20:28 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:28 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:28 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 21:20:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 21:20:28 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 21:20:28 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:28 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:28 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:28 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 21:20:28 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 21:20:28 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:20:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:28 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 21:20:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 21:20:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:28 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 21:20:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 21:20:28 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 21:20:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 21:20:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 21:20:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 21:20:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 21:20:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 21:20:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:20:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:20:29 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:20:29 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:20:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:29 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:20:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:20:29 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:20:29 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:29 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:29 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:29 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:29 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:29 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:20:29 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:20:29 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:20:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:29 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:20:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:20:29 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 21:20:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 21:20:29 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:29 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:29 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:29 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:29 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:29 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:29 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 21:20:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 21:20:29 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:29 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 21:20:29 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 21:20:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:29 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 21:20:29 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 21:20:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:29 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:29 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 21:20:29 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:29 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 21:20:29 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:29 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:29 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:29 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:29 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:29 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 21:20:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 21:20:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 21:20:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 21:20:30 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:20:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:30 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:20:30 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:20:30 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:20:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:30 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:20:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:20:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:20:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:20:30 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:20:30 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:20:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:30 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:20:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:20:32 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:20:32 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:32 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:32 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:32 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:32 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:32 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:20:32 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:20:32 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:20:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:32 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:20:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:20:32 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:20:32 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:20:32 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:20:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:32 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:20:32 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:20:32 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:20:32 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:20:32 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:20:32 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:20:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:20:32 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:20:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:21:14 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:21:14 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:14 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:14 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:14 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:14 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:14 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:14 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:21:14 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:21:14 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:21:14 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:14 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:21:14 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:21:14 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:21:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:14 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:21:14 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:21:14 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:21:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:14 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:21:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:21:14 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:21:14 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:14 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:14 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:14 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:14 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:14 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:21:14 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:21:14 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:21:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:14 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:21:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:21:14 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:21:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:14 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 21:21:14 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:21:14 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:21:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:14 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:21:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:21:19 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:21:19 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:19 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:19 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:19 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:19 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:19 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:21:19 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:21:19 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:21:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:19 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:21:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:21:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:21:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:19 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:19 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:21:19 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:21:19 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:21:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:19 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:21:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:21:20 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 21:21:20 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:20 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 21:21:20 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 21:21:20 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:20 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:20 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:20 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:20 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:20 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:20 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:20 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 21:21:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:20 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:20 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:20 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:20 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 21:21:20 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 21:21:20 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:21:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:20 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 21:21:20 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:20 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:20 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 21:21:20 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 21:21:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 21:21:20 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 21:21:20 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 21:21:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 21:21:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 21:21:20 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:20 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 21:21:20 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:20 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:20 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 21:21:20 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 21:21:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 21:21:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 21:21:20 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 21:21:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 21:21:20 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 21:21:20 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:20 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 21:21:20 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 21:21:20 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:20 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:20 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:20 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 21:21:20 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 21:21:20 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:21:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:20 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 21:21:20 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:20 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 21:21:20 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:20 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:20 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 21:21:20 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 21:21:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 21:21:20 [http-nio-8080-exec-6] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 21:21:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 21:21:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 21:21:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 21:21:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 21:21:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:21:21 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:21 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:21 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:21 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:21 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:21 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:21 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:21:21 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:21:21 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:21:21 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:21 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:21:21 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:21:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:21:21 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:21 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:21 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:21 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:21 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:21 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:21:21 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:21:21 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:21:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:21 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:21:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:21:23 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:21:23 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:23 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:23 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:23 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:23 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:23 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:23 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:21:23 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:21:23 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:21:23 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:23 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:21:23 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:21:23 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:21:23 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:23 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:23 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:23 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:23 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:23 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:23 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:21:23 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:21:23 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:21:23 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:23 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:21:23 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:21:24 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 21:21:24 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:24 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:24 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:24 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:24 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:24 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:24 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 21:21:24 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:24 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 21:21:24 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:24 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:24 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:21:24 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:24 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:24 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:24 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:24 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:24 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:24 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 21:21:24 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:24 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:24 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:24 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:21:24 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:21:24 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:21:24 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:24 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:21:24 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:21:24 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:21:24 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:24 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:24 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:24 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:24 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:24 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:21:24 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:21:24 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:21:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:24 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:21:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 21:21:42 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 21:21:42 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 21:21:42 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 21:21:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:42 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 21:21:42 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 21:21:42 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 21:21:42 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 21:21:42 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 21:21:42 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 21:21:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 21:21:42 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 21:21:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:30:57 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=52m16s255ms206µs).
2025-07-04 22:33:07 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:33:07 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 22:33:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:33:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:33:07 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:33:07 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:33:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:07 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:08 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:33:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:33:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:33:08 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:33:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:33:08 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:33:08 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 22:33:08 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:33:08 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:33:08 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:33:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:08 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:33:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:33:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:08 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:33:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:33:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:33:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:33:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:33:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:33:08 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:33:08 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:33:08 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:33:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:08 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:33:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:33:24 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:33:24 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:33:24 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:33:24 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:24 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:33:24 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:33:24 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:33:24 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:33:24 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:33:24 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:33:24 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:24 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:33:24 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:33:24 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:33:24 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:33:24 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:33:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:24 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:33:24 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:33:24 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:33:24 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:33:24 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:33:24 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:33:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:24 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:33:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:33:24 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:33:24 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:33:24 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:33:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:24 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:33:24 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:33:24 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:33:24 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:33:24 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:33:24 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:33:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:24 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:33:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:33:24 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:33:24 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:33:24 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:33:24 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:24 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:33:24 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:33:24 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:33:24 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:33:24 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:33:24 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:33:24 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:24 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:33:24 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:33:27 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 22:33:27 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 22:33:27 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 22:33:27 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:33:27 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:33:27 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:33:27 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:33:27 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:33:27 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:33:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:27 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:27 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:33:27 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:33:27 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:33:27 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:33:27 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:33:27 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:33:27 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:33:27 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:33:27 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:33:27 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 22:33:27 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 22:33:27 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 22:33:27 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:33:27 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 22:33:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:27 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:27 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 22:33:27 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 22:33:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:33:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 22:33:27 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:33:27 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 22:33:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 22:33:27 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 22:33:27 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 22:33:27 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:33:27 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:33:27 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:33:27 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:33:27 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:33:27 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:33:27 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:33:27 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 22:33:27 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:27 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 22:33:27 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 22:33:27 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:33:27 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:33:27 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:27 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 22:33:27 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 22:33:27 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 22:33:27 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:33:27 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:33:27 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 22:33:27 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:33:27 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 22:33:27 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 22:33:27 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:33:27 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:27 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:33:27 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:33:27 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:27 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:33:27 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:33:27 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:33:27 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:33:27 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 22:33:27 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:33:27 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 22:33:27 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 22:33:27 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:33:27 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:33:27 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 22:33:27 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:33:27 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 22:34:36 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:34:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:34:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:34:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:34:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:34:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:34:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:34:36 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:34:36 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:34:36 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:34:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:34:36 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:34:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:34:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:34:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:34:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:34:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:34:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:34:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:34:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:34:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:34:36 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:34:36 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:34:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:34:36 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:34:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:35:22 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:35:22 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:35:22 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:35:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:35:22 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:35:22 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:35:22 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:35:22 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:35:22 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:35:22 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:35:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:35:22 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:35:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:35:22 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:35:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:35:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:35:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:35:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:35:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:35:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:35:22 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:35:22 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:35:22 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:35:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:35:22 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:35:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:37:23 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:37:23 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:37:23 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:37:23 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:37:23 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 22:37:23 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:37:23 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:37:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:37:23 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:37:23 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:37:23 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:37:23 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:37:23 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:37:23 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:37:23 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:37:23 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:37:23 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:37:23 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:37:23 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 22:37:23 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:37:23 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:37:23 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:37:23 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:37:23 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:37:23 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:37:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:37:23 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:37:23 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:37:23 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:37:23 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:37:23 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:37:23 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:37:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:37:23 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:37:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:38:25 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 22:38:25 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:38:25 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:38:25 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:38:25 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:38:25 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:38:25 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:38:25 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 22:38:25 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:53 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:53 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:53 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:39:53 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:39:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:39:53 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:53 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:53 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:39:53 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:39:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:39:53 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:53 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:53 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:53 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:53 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:53 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:53 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:39:53 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:39:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:39:53 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:53 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:53 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:53 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:53 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:53 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:53 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:39:53 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:39:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:39:53 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 22:39:53 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:53 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 22:39:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 22:39:53 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:53 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:53 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:53 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:53 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 22:39:53 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:53 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:53 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:53 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:53 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 22:39:53 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 22:39:53 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 22:39:53 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 22:39:53 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 22:39:53 [http-nio-8080-exec-6] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 22:39:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:39:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:39:53 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 22:39:53 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 22:39:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 22:39:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 22:39:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:53 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 22:39:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:39:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:39:53 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 22:39:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 22:39:53 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 22:39:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 22:39:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 22:39:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:53 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 22:39:53 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 22:39:53 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 22:39:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:53 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:39:53 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:53 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:53 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:53 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 22:39:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:53 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 22:39:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 22:39:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:39:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:39:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 22:39:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:39:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 22:39:54 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 22:39:54 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 22:39:54 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:54 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:54 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:54 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:54 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:54 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:54 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:54 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:54 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:54 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:54 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:54 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 22:39:54 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 22:39:54 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:54 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:54 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:39:54 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 22:39:54 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:54 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:54 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:54 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 22:39:54 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:54 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:54 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:54 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 22:39:54 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:54 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 22:39:54 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 22:39:54 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:54 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:54 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:54 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:54 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:54 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 22:39:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:39:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 22:39:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 22:39:55 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 22:39:55 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:55 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 22:39:55 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 22:39:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:55 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:55 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:55 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:55 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:55 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:55 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 22:39:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:55 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:55 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:55 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:55 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 22:39:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 22:39:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:55 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 22:39:55 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:39:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:55 [http-nio-8080-exec-4] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 22:39:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 22:39:55 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 22:39:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:39:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:39:55 [http-nio-8080-exec-4] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 22:39:55 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 22:39:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 22:39:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 22:39:55 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:55 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:55 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:55 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:55 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:39:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:39:55 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 22:39:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:55 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 22:39:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 22:39:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 22:39:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 22:39:55 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:55 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:55 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 22:39:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 22:39:55 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:55 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:55 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 22:39:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:55 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 22:39:55 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:39:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 22:39:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:39:55 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 22:39:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:39:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 22:39:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 22:39:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:39:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:39:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 22:39:56 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:56 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:56 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:39:56 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:39:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:56 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:39:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:39:56 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:56 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:56 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:56 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:56 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:56 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:56 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:56 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:56 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:39:56 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:39:56 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:56 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:39:56 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:39:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:56 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:56 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:56 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:39:56 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:39:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:56 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:39:56 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:39:56 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:56 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:39:56 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:39:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:56 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:39:56 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:39:56 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:39:56 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:39:56 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:39:56 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:39:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:39:56 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:39:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:40:40 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 22:40:40 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 22:40:40 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 22:40:40 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:40:40 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:40:40 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:40:40 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:40:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:40:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:40:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:40 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:40:40 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:40:40 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:40:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:40:40 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:40:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:40:40 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:40:40 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:40:40 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:40:40 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 22:40:40 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 22:40:40 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 22:40:40 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 22:40:40 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:40:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:40 [http-nio-8080-exec-4] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 22:40:40 [http-nio-8080-exec-7] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 22:40:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:40:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 22:40:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:40:40 [http-nio-8080-exec-7] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 22:40:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 22:40:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 22:40:40 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 22:40:40 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:40:40 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:40:40 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:40 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:40:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:40:40 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:40:40 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:40:40 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:40:40 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 22:40:40 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 22:40:40 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 22:40:40 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:40:40 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:40:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:40 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 22:40:40 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 22:40:40 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 22:40:40 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:40:40 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:40:40 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:40:40 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 22:40:40 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 22:40:40 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:40:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:40:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:40:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:40 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 22:40:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:40:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:40:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:40:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:40:40 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 22:40:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:40 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 22:40:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 22:40:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 22:40:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:40:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 22:40:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 22:40:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 22:40:41 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:40:41 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:40:41 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:40:41 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:41 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:40:41 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:40:41 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:40:41 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:40:41 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:40:41 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:40:41 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:41 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:40:41 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:40:41 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:40:41 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:40:41 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:40:41 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:41 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:40:41 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:40:41 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:40:41 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:40:41 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:40:41 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:40:41 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:40:41 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:40:41 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:41:57 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:41:57 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:41:57 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:41:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:41:57 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:41:57 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:41:57 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:41:57 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:41:57 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:41:57 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:41:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:41:57 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:41:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:41:57 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:41:57 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:41:57 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:41:57 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:41:57 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:41:57 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:41:57 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:41:57 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:41:57 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:41:57 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:41:57 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:41:57 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:41:57 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:41:57 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:41:57 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:41:57 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:41:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:41:57 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:41:57 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:41:57 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:41:57 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:41:57 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:41:57 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:41:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:41:57 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:41:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:41:57 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:41:57 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:41:57 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:41:57 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:41:57 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:41:57 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:41:57 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:41:57 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:41:57 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:41:57 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:41:57 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:41:57 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:41:57 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:42:13 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:42:13 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:42:13 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:42:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:42:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:42:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:42:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:42:14 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:42:14 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:42:14 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:42:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:42:14 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:42:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:42:14 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:42:14 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:42:14 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:42:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:42:14 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:42:14 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:42:14 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:42:14 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:42:14 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:42:14 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:42:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:42:14 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:42:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:43:26 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:43:26 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:43:26 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:43:26 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:43:26 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:43:26 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:43:26 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:43:26 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:43:26 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:43:26 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:43:26 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:43:26 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:43:26 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:43:26 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:43:26 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:43:26 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:43:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:43:26 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:43:26 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:43:26 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:43:26 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:43:26 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:43:26 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:43:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:43:26 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:43:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:48:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:48:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:48:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:48:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:48:36 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 22:48:36 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:48:36 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:48:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:48:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:48:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:48:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:48:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:48:36 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:48:36 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:48:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:48:36 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:48:36 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:48:36 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:48:36 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 22:48:36 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:48:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:48:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:48:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:48:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:48:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:48:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:48:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:48:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:48:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:48:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:48:36 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:48:36 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:48:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:48:36 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:48:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:49:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:49:30 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 22:49:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:49:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:49:30 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:49:30 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:49:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:49:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:49:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:49:30 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:49:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:49:30 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:49:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:49:30 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:49:30 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 22:49:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:49:30 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:49:30 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:49:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:49:30 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:49:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:49:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:49:30 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:49:30 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:49:30 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:49:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:49:30 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:49:30 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:49:30 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:49:30 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:49:30 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:49:30 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:49:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:49:30 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:49:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:50:42 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:50:42 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:50:42 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:50:42 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:50:42 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:50:42 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:50:42 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:50:42 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:50:42 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:50:42 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:50:42 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:50:42 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:50:42 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:50:42 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:50:42 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:50:42 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:50:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:50:42 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:50:42 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:50:42 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:50:42 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:50:42 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:50:42 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:50:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:50:42 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:50:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:50:42 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:50:42 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:50:42 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:50:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:50:42 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:50:42 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:50:42 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:50:42 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:50:42 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:50:42 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:50:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:50:42 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:50:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:50:42 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:50:42 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:50:42 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:50:42 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:50:42 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:50:42 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:50:42 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:50:42 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:50:42 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:50:42 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:50:42 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:50:42 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:50:42 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:50:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:50:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:50:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:50:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:50:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:50:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:50:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:50:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:50:51 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:50:51 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:50:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:50:51 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:50:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:50:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:50:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:50:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:50:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:50:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:50:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:50:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:50:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:50:51 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:50:51 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:50:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:50:51 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:50:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:51:45 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 22:51:45 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:51:45 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:51:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:51:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:51:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:51:46 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:51:46 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 22:51:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:51:46 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 22:51:46 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:51:46 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:51:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:51:46 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:51:46 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:51:46 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:51:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:51:46 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:51:46 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:51:46 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:51:46 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 22:51:46 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:51:46 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:51:46 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:51:46 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:51:46 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:51:46 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:51:46 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:51:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:51:46 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:51:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:51:46 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:51:46 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:51:46 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:51:46 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:51:46 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:51:46 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:51:46 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:51:46 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:51:46 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:51:46 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:51:46 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:51:46 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:51:46 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:53:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-07-04 22:53:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:53:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:53:13 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:53:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:53:13 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:53:13 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-07-04 22:53:16 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-07-04 22:53:16 [http-nio-8080-exec-6] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-04 22:53:16 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-07-04 22:53:16 [http-nio-8080-exec-6] INFO  c.a.controller.AuthController - 收到用户登录请求: cakravartin@example.com
2025-07-04 22:53:16 [http-nio-8080-exec-6] INFO  com.aiplatform.service.UserService - 用户登录请求: cakravartin@example.com
2025-07-04 22:53:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:53:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:53:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:53:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:53:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:53:16 [http-nio-8080-exec-6] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-07-04 22:53:16 [http-nio-8080-exec-6] INFO  com.aiplatform.service.UserService - 开始为用户 7 执行登录自动清理
2025-07-04 22:53:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 22:53:16 [http-nio-8080-exec-6] INFO  com.aiplatform.service.UserService - 用户 7 没有需要清理的过期对话
2025-07-04 22:53:16 [http-nio-8080-exec-6] INFO  com.aiplatform.service.UserService - 用户登录成功: 7
2025-07-04 22:53:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.User */update users 
    set
        email=?,
        last_login=?,
        password=?,
        permissions=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-07-04 22:53:16 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:53:16 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:53:16 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:53:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:16 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:53:16 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:53:16 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:53:16 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:53:16 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:53:16 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:53:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:16 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:53:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:53:16 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:53:16 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:53:16 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:53:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:16 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:53:16 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:53:16 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:53:16 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:53:16 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:53:16 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:53:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:16 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:53:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:53:54 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 22:53:54 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:53:54 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:53:54 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:54 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:53:54 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:53:54 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:53:54 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 22:53:54 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-07-04 22:53:54 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:53:54 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:53:54 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:54 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:53:54 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:53:54 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:53:54 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-07-04 22:53:56 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-07-04 22:53:56 [http-nio-8080-exec-1] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-04 22:53:56 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-07-04 22:53:56 [http-nio-8080-exec-1] INFO  c.a.controller.AuthController - 收到用户登录请求: cakravartin@example.com
2025-07-04 22:53:56 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 用户登录请求: cakravartin@example.com
2025-07-04 22:53:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:53:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:53:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:53:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:53:56 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:53:56 [http-nio-8080-exec-1] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-07-04 22:53:56 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 开始为用户 7 执行登录自动清理
2025-07-04 22:53:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 22:53:56 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 用户 7 没有需要清理的过期对话
2025-07-04 22:53:56 [http-nio-8080-exec-1] INFO  com.aiplatform.service.UserService - 用户登录成功: 7
2025-07-04 22:53:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.User */update users 
    set
        email=?,
        last_login=?,
        password=?,
        permissions=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-07-04 22:53:56 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:53:56 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:53:56 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:53:56 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:56 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:53:56 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:53:56 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:53:56 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:53:56 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:53:56 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:53:56 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:56 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:53:56 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:53:56 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:53:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:53:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:53:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:53:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:53:56 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:53:56 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:53:56 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:53:56 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:53:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:53:56 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:53:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:54:31 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/logout
2025-07-04 22:54:31 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:54:31 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:54:31 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:54:31 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:54:31 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:54:31 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:54:31 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/logout
2025-07-04 22:54:44 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-07-04 22:54:44 [http-nio-8080-exec-2] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-04 22:54:44 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-07-04 22:54:44 [http-nio-8080-exec-2] INFO  c.a.controller.AuthController - 收到用户登录请求: cakravartin@example.com
2025-07-04 22:54:44 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 用户登录请求: cakravartin@example.com
2025-07-04 22:54:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:54:44 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:54:44 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:54:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:54:44 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:54:44 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:54:44 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:54:44 [http-nio-8080-exec-2] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-07-04 22:54:44 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 开始为用户 7 执行登录自动清理
2025-07-04 22:54:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 22:54:44 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 用户 7 没有需要清理的过期对话
2025-07-04 22:54:44 [http-nio-8080-exec-2] INFO  com.aiplatform.service.UserService - 用户登录成功: 7
2025-07-04 22:54:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.User */update users 
    set
        email=?,
        last_login=?,
        password=?,
        permissions=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-07-04 22:54:45 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:54:45 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:54:45 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:54:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:54:45 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:54:45 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:54:45 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:54:45 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:54:45 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:54:45 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:54:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:54:45 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:54:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:54:45 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:54:45 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:54:45 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:54:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:54:45 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:54:45 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:54:45 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:54:45 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:54:45 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:54:45 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:54:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:54:45 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:54:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:58:25 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:58:25 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:58:25 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:58:25 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:58:25 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:58:25 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:58:25 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:58:25 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:58:25 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:58:25 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:58:25 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:58:25 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:58:25 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:58:25 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:58:25 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:58:25 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:58:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:58:25 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:58:25 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:58:25 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:58:25 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:58:25 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:58:25 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:58:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:58:25 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:58:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:58:25 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:58:25 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:58:25 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:58:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:58:25 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:58:25 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:58:25 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:58:25 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:58:25 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:58:25 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:58:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:58:25 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:58:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:58:25 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:58:25 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:58:25 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:58:25 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:58:25 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:58:25 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:58:25 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:58:25 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 22:58:25 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:58:25 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:58:25 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:58:25 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:58:25 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:58:27 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:58:27 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:58:27 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:58:27 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:58:27 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:58:27 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:58:27 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:58:27 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:58:27 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:58:27 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:58:27 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:58:27 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:58:27 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 22:58:27 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 22:58:27 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 22:58:27 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 22:58:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:58:27 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 22:58:27 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 22:58:27 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 22:58:27 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 22:58:27 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 22:58:27 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 22:58:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 22:58:27 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 22:58:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:01:00 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 23:01:00 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:01:00 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:01:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:01:00 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-04 23:01:00 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:01:00 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:01:00 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:01:00 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:01:00 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:01:00 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:01:00 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 23:01:00 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:01:00 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:01:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:01:00 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:01:00 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:01:00 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:01:00 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-04 23:01:00 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:01:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:01:00 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 23:01:00 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:01:00 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:01:00 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:01:00 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:01:00 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:01:00 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:01:00 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:01:00 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 23:01:00 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:01:00 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:01:00 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:01:00 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:01:00 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:03:37 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 23:03:37 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 23:03:37 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 23:03:37 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:03:37 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:03:37 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:03:37 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:03:37 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:03:37 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:03:37 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:37 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:37 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:03:37 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:03:37 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:03:37 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:03:37 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:03:37 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:03:37 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:03:37 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:03:37 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:03:37 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 23:03:37 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 23:03:37 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 23:03:37 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 23:03:37 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:03:37 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:37 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:37 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 23:03:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 23:03:37 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 23:03:37 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:03:37 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:03:37 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 23:03:37 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 23:03:37 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:03:37 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:03:37 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:03:37 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:03:37 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:37 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:03:37 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:03:37 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:03:37 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:03:37 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:03:37 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 23:03:37 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:37 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 23:03:37 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:03:37 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:03:37 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 23:03:37 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:37 [http-nio-8080-exec-7] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 23:03:37 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 23:03:37 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:03:37 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:03:37 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:03:37 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 23:03:37 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 23:03:37 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:03:37 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:37 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 23:03:37 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:03:37 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:03:37 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:37 [http-nio-8080-exec-7] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 23:03:37 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:03:37 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:03:37 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:03:37 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:03:37 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 23:03:37 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:38 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 23:03:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:03:38 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:03:38 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:03:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:03:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:03:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 23:03:47 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:03:47 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:03:47 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:03:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:47 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:03:47 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:03:47 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:03:47 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:03:47 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:03:47 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:03:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:47 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:03:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:03:47 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:03:47 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:03:47 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:03:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:47 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:03:47 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:03:47 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:03:47 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:03:47 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:03:47 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:03:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:47 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:03:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:03:47 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:03:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:03:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:03:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:03:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:03:47 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:03:47 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:03:47 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:03:47 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:03:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:47 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:03:47 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:03:47 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:03:47 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:03:47 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:03:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:47 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:03:47 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:03:47 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:03:47 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:03:47 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:03:47 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:03:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:47 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:03:47 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:03:48 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 23:03:48 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 23:03:48 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:03:48 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:03:48 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:03:48 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:03:48 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:48 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:03:48 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:03:48 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:03:48 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:03:48 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:03:48 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:03:48 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 23:03:48 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 23:03:48 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:03:48 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 23:03:48 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:03:48 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:03:48 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:03:48 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:03:48 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:03:48 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:03:48 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:03:48 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 23:03:48 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:48 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 23:03:48 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:03:48 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:03:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:48 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:03:48 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:03:48 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:03:48 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 23:03:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:03:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:03:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:03:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:04:15 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-04 23:04:15 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-04 23:04:15 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:15 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:15 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:15 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:15 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:15 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-04 23:04:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:15 [http-nio-8080-exec-3] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-04 23:04:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:15 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-04 23:04:15 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-04 23:04:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-04 23:04:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-04 23:04:15 [http-nio-8080-exec-3] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-04 23:04:15 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-04 23:04:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-04 23:04:15 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:15 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:15 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:15 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:15 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:15 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-04 23:04:15 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-04 23:04:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-04 23:04:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-04 23:04:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:15 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-04 23:04:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-04 23:04:15 [http-nio-8080-exec-8] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-04 23:04:28 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 23:04:28 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 23:04:28 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:28 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:28 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:28 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:28 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:28 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 23:04:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:28 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:28 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:28 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 23:04:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 23:04:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:04:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:04:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:04:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:28 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 23:04:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 23:04:28 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:28 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:28 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:28 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:28 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 23:04:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:04:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:04:28 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:04:28 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 23:04:28 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 23:04:28 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 23:04:28 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:28 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:28 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:28 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:28 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:28 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:28 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:28 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 23:04:28 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 23:04:28 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:28 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:28 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:28 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 23:04:28 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 23:04:28 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:04:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 23:04:28 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 23:04:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 23:04:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:04:28 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:04:28 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 23:04:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:04:28 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:04:28 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 23:04:28 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:28 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:28 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:04:28 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:04:28 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:28 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:28 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:28 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 23:04:28 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 23:04:28 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 23:04:28 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 23:04:28 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 23:04:28 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:28 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 23:04:28 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 23:04:28 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:28 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:28 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:28 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:28 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 23:04:28 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 23:04:28 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:04:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:28 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:28 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:28 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 23:04:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:04:28 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 23:04:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:04:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:04:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:04:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:04:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:04:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 23:04:29 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 23:04:29 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:29 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:29 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:29 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:29 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:29 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 23:04:29 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:04:29 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:04:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:29 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:04:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:04:29 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 23:04:29 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:29 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:29 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:29 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:29 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:29 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:29 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 23:04:29 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:04:29 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:04:29 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:29 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:04:29 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:04:38 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 23:04:38 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 23:04:38 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:38 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:38 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:38 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:38 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:38 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:38 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:38 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:38 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:38 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:38 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:38 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 23:04:38 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 23:04:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:38 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:04:38 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 23:04:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:04:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:04:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:38 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 23:04:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:38 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 23:04:38 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:38 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:38 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:38 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:38 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:38 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:38 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 23:04:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:04:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:04:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:04:41 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 23:04:41 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:41 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:41 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:41 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:41 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:41 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:41 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 23:04:41 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:04:41 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:04:41 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:41 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:04:41 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:04:41 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 23:04:41 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:41 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:41 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:41 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:41 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:41 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 23:04:41 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:04:41 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:04:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:41 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:04:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:04:43 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:04:43 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:43 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:43 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:43 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:43 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:04:43 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:04:43 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:04:43 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:04:43 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:04:43 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:43 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:43 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:43 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:43 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:04:43 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:04:43 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:04:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:04:43 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:04:43 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:43 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:43 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:43 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:43 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:04:43 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:04:43 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:04:43 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:04:43 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:04:43 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:43 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:43 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:43 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:43 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:04:43 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:04:43 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:04:43 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:04:43 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 23:04:43 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 23:04:43 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 23:04:43 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:43 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:43 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:43 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:43 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:43 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:43 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 23:04:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:43 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:43 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:43 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:43 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:43 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:43 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 23:04:43 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 23:04:43 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 23:04:43 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-4] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 23:04:43 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 23:04:43 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 23:04:43 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:04:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:04:43 [http-nio-8080-exec-4] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 23:04:43 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 23:04:43 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:43 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:04:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:04:43 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:43 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:43 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:43 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 23:04:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:04:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:04:43 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 23:04:43 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 23:04:43 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 23:04:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 23:04:43 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:43 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 23:04:43 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 23:04:43 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:43 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:43 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:43 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 23:04:43 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 23:04:43 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:43 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:04:43 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:43 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:43 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:43 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 23:04:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:43 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:04:43 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 23:04:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:04:43 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:04:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:04:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:04:43 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 23:04:44 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 23:04:44 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 23:04:44 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:44 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:44 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:44 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:44 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:44 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:44 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:44 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:44 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:44 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:44 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 23:04:44 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 23:04:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:04:44 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 23:04:44 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:44 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:44 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:04:44 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:44 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:44 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:44 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 23:04:44 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:04:44 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 23:04:44 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:04:44 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:04:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:44 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:04:44 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:04:44 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:04:44 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 23:04:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:04:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:04:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:04:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:05:16 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:05:16 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:16 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:16 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:16 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:16 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:16 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:05:16 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:05:16 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:05:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:16 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:05:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:05:16 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:05:16 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:16 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:16 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:16 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:16 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:16 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:05:16 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:05:16 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:05:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:16 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:05:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:05:16 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:05:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:16 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:16 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:05:16 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:05:16 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:05:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:16 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:05:16 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:05:16 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:05:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:16 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:05:16 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:05:16 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:05:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:16 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:05:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:05:56 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:05:56 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:56 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:56 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:56 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:56 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:56 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:56 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:05:56 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:05:56 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:05:56 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:56 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:05:56 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:05:56 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:05:56 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:56 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:56 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:56 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:56 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:56 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:05:56 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:05:56 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:05:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:56 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:05:56 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:05:57 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 23:05:57 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 23:05:57 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 23:05:57 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:57 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:57 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:57 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:57 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:57 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:57 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:57 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:57 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:57 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 23:05:57 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 23:05:57 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:05:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:57 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:57 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:57 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:57 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:57 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:57 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:57 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 23:05:57 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 23:05:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:05:57 [http-nio-8080-exec-6] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 23:05:57 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 23:05:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:05:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 23:05:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:05:57 [http-nio-8080-exec-6] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 23:05:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:05:57 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 23:05:57 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:57 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:57 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:05:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:05:57 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:57 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:57 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:57 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 23:05:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:57 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 23:05:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 23:05:57 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:57 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:57 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 23:05:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 23:05:57 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:57 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:57 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:57 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 23:05:57 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 23:05:57 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 23:05:57 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:05:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:57 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:57 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:57 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 23:05:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:05:57 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:57 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:57 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:57 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 23:05:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:05:57 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 23:05:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:05:57 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:05:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:05:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:05:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 23:05:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 23:05:58 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 23:05:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:58 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:58 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:58 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:58 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:58 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:58 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:58 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:58 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 23:05:58 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 23:05:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:58 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:05:58 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 23:05:58 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:58 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:05:58 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:58 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:58 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:58 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 23:05:58 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:05:58 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 23:05:58 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:05:58 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:05:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:58 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:05:58 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:05:58 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:05:58 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 23:05:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:05:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:05:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:05:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:06:04 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-04 23:06:04 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-04 23:06:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:04 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:04 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:04 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:04 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:04 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:04 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:04 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-04 23:06:04 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-04 23:06:04 [http-nio-8080-exec-4] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-04 23:06:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:04 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-04 23:06:04 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-04 23:06:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-04 23:06:04 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-04 23:06:04 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:04 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:04 [http-nio-8080-exec-6] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-04 23:06:04 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-04 23:06:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:04 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:04 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:04 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:04 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-04 23:06:04 [http-nio-8080-exec-2] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-04 23:06:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-04 23:06:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:04 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:04 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-04 23:06:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:04 [http-nio-8080-exec-10] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-04 23:06:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-04 23:06:04 [http-nio-8080-exec-10] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-04 23:06:05 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 23:06:05 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 23:06:05 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 23:06:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:05 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:05 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:05 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:05 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 23:06:05 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:05 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:05 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:05 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 23:06:05 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 23:06:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:05 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 23:06:05 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:06:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:05 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 23:06:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 23:06:05 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 23:06:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:06:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:06:05 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 23:06:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:06:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:06:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 23:06:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:06:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:06:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:05 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:05 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 23:06:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 23:06:05 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 23:06:05 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:05 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:05 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 23:06:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 23:06:05 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 23:06:05 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:05 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:05 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 23:06:05 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:05 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:05 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:05 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 23:06:05 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 23:06:05 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:06:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:05 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:05 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:05 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:05 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 23:06:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:06:05 [http-nio-8080-exec-7] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 23:06:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:06:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:06:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:06:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:06:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:06:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 23:06:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 23:06:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 23:06:10 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:06:10 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:06:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:10 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:06:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:06:10 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 23:06:10 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:10 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:10 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:10 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:10 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:10 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:10 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 23:06:10 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:06:10 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:06:10 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:10 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:06:10 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:06:13 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:06:13 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:13 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:13 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:13 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:13 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:13 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:06:13 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:06:13 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:06:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:13 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:06:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:06:13 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:06:13 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:13 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:13 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:13 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:13 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:13 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:06:13 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:06:13 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:06:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:13 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:06:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:06:13 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:06:13 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:13 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:13 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:13 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:13 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:13 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:06:13 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:06:13 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:06:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:13 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:06:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:06:13 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:06:13 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:13 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:13 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:13 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:13 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:13 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:13 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-04 23:06:13 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:06:13 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:06:13 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:13 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:06:13 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:06:14 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 23:06:14 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 23:06:14 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 23:06:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:14 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:14 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:14 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:14 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:14 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:14 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:14 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:14 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:14 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:14 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 23:06:14 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 23:06:14 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 23:06:14 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 23:06:14 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:06:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 23:06:14 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 23:06:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:06:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 23:06:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:06:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:06:14 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 23:06:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:06:14 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-04 23:06:14 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:14 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:14 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:06:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:06:14 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:14 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:14 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:14 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-04 23:06:14 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 23:06:14 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-04 23:06:14 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:14 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:14 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-7] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-04 23:06:14 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-04 23:06:14 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-04 23:06:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:14 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:14 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:14 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-04 23:06:14 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-04 23:06:14 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:06:14 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-7] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-04 23:06:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:14 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-04 23:06:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:06:14 [http-nio-8080-exec-6] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-04 23:06:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:06:14 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:06:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:06:14 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:06:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-04 23:06:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-04 23:06:14 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 23:06:14 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 23:06:14 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:14 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:14 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:14 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:14 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:14 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:14 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:14 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 23:06:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:14 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:14 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:14 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 23:06:14 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-04 23:06:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:06:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:14 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:14 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-04 23:06:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:06:14 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:06:14 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-04 23:06:14 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:14 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:14 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:14 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:14 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-04 23:06:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-04 23:06:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-04 23:06:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-04 23:06:45 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 23:06:45 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:45 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:45 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:45 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:45 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:45 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 23:06:45 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:06:45 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:06:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:45 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:06:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-04 23:06:45 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-04 23:06:45 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-04 23:06:45 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-04 23:06:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:45 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-04 23:06:45 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-04 23:06:45 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-04 23:06:45 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-04 23:06:45 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-04 23:06:45 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-04 23:06:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-04 23:06:45 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-04 23:06:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:37:17 [main] INFO  c.a.AiChatBackendApplication - Starting AiChatBackendApplication using Java 23.0.2 with PID 2388 (D:\SE Courses\SE\SE25Project-05\UIPrototype\server\java-backend\target\classes started by 31656 in D:\SE Courses\SE\SE25Project-05\UIPrototype\server\java-backend)
2025-07-05 11:37:17 [main] DEBUG c.a.AiChatBackendApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-07-05 11:37:17 [main] INFO  c.a.AiChatBackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-05 11:37:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-05 11:37:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-05 11:37:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 109 ms. Found 7 JPA repository interfaces.
2025-07-05 11:37:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-05 11:37:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-05 11:37:18 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.AdminMessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-05 11:37:18 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.ChatRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-05 11:37:18 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-05 11:37:18 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.SupportChatRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-05 11:37:18 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.SystemLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-05 11:37:18 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-05 11:37:18 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-05 11:37:18 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-07-05 11:37:18 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-05 11:37:18 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-05 11:37:18 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-07-05 11:37:18 [main] INFO  o.a.c.c.C.[.[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-07-05 11:37:18 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1156 ms
2025-07-05 11:37:18 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-05 11:37:18 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-07-05 11:37:18 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-05 11:37:18 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-05 11:37:18 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-05 11:37:18 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@52290e63
2025-07-05 11:37:18 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-05 11:37:19 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-05 11:37:19 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-07-05 11:37:19 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-05 11:37:19 [main] DEBUG org.hibernate.SQL - 
    alter table admin_messages 
       modify column from_user_id bigint not null
2025-07-05 11:37:19 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table admin_messages 
       modify column from_user_id bigint not null" via JDBC [Cannot change column 'from_user_id': used in a foreign key constraint 'admin_messages_ibfk_1']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table admin_messages 
       modify column from_user_id bigint not null" via JDBC [Cannot change column 'from_user_id': used in a foreign key constraint 'admin_messages_ibfk_1']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'from_user_id': used in a foreign key constraint 'admin_messages_ibfk_1'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 11:37:19 [main] DEBUG org.hibernate.SQL - 
    alter table admin_messages 
       modify column to_user_id bigint
2025-07-05 11:37:19 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table admin_messages 
       modify column to_user_id bigint" via JDBC [Cannot change column 'to_user_id': used in a foreign key constraint 'admin_messages_ibfk_2']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table admin_messages 
       modify column to_user_id bigint" via JDBC [Cannot change column 'to_user_id': used in a foreign key constraint 'admin_messages_ibfk_2']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'to_user_id': used in a foreign key constraint 'admin_messages_ibfk_2'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 11:37:19 [main] DEBUG org.hibernate.SQL - 
    alter table chats 
       modify column id bigint not null auto_increment
2025-07-05 11:37:19 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table chats 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'fk_messages_chat_id' of table 'database.messages']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table chats 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'fk_messages_chat_id' of table 'database.messages']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'id': used in a foreign key constraint 'fk_messages_chat_id' of table 'database.messages'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 11:37:19 [main] DEBUG org.hibernate.SQL - 
    alter table chats 
       modify column user_id bigint not null
2025-07-05 11:37:19 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table chats 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'chats_ibfk_1']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table chats 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'chats_ibfk_1']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'user_id': used in a foreign key constraint 'chats_ibfk_1'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 11:37:19 [main] DEBUG org.hibernate.SQL - 
    alter table messages 
       modify column chat_id bigint not null
2025-07-05 11:37:19 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table messages 
       modify column chat_id bigint not null" via JDBC [Cannot change column 'chat_id': used in a foreign key constraint 'fk_messages_chat_id']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table messages 
       modify column chat_id bigint not null" via JDBC [Cannot change column 'chat_id': used in a foreign key constraint 'fk_messages_chat_id']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'chat_id': used in a foreign key constraint 'fk_messages_chat_id'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 11:37:19 [main] DEBUG org.hibernate.SQL - 
    alter table system_logs 
       modify column user_id bigint
2025-07-05 11:37:19 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table system_logs 
       modify column user_id bigint" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'system_logs_ibfk_1']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table system_logs 
       modify column user_id bigint" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'system_logs_ibfk_1']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'user_id': used in a foreign key constraint 'system_logs_ibfk_1'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 11:37:19 [main] DEBUG org.hibernate.SQL - 
    alter table user_settings 
       modify column user_id bigint not null
2025-07-05 11:37:19 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table user_settings 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'fk_user_settings_user_id']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table user_settings 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'fk_user_settings_user_id']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'user_id': used in a foreign key constraint 'fk_user_settings_user_id'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 11:37:19 [main] DEBUG org.hibernate.SQL - 
    alter table users 
       modify column id bigint not null auto_increment
2025-07-05 11:37:19 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table users 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'admin_messages_ibfk_1' of table 'database.admin_messages']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table users 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'admin_messages_ibfk_1' of table 'database.admin_messages']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'id': used in a foreign key constraint 'admin_messages_ibfk_1' of table 'database.admin_messages'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 11:37:20 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-05 11:37:20 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-05 11:37:20 [main] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-07-05 11:37:21 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-05 11:37:21 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5dcc1495, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@76ec6ae0, org.springframework.security.web.context.SecurityContextHolderFilter@523c4a6d, org.springframework.security.web.header.HeaderWriterFilter@7e626011, org.springframework.web.filter.CorsFilter@72cd5f41, org.springframework.security.web.authentication.logout.LogoutFilter@7ba92958, com.aiplatform.security.JwtAuthenticationFilter@3e13a74, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@742b91a5, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@bc9cd27, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3baed0a9, org.springframework.security.web.session.SessionManagementFilter@78679286, org.springframework.security.web.access.ExceptionTranslationFilter@18cc07ca, org.springframework.security.web.access.intercept.AuthorizationFilter@5c7eeeb2]
2025-07-05 11:37:21 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-07-05 11:37:21 [main] INFO  c.a.AiChatBackendApplication - Started AiChatBackendApplication in 4.87 seconds (process running for 5.534)
2025-07-05 11:38:00 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[.[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-05 11:38:00 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-05 11:38:00 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-07-05 11:38:00 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing POST /auth/login
2025-07-05 11:38:00 [http-nio-8080-exec-8] DEBUG o.s.s.w.a.AnonymousAuthenticationFilter - Set SecurityContextHolder to anonymous SecurityContext
2025-07-05 11:38:00 [http-nio-8080-exec-8] WARN  o.s.w.s.h.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/auth/login' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-07-05 11:38:00 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured POST /auth/login
2025-07-05 11:38:00 [http-nio-8080-exec-8] INFO  c.a.controller.AuthController - 收到用户登录请求: cakravartin@example.com
2025-07-05 11:38:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户登录请求: cakravartin@example.com
2025-07-05 11:38:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:38:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:38:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:38:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:38:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:38:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:38:00 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:38:00 [http-nio-8080-exec-8] DEBUG o.s.s.a.d.DaoAuthenticationProvider - Authenticated user
2025-07-05 11:38:00 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 开始为用户 7 执行登录自动清理
2025-07-05 11:38:01 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-05 11:38:01 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户 7 没有需要清理的过期对话
2025-07-05 11:38:01 [http-nio-8080-exec-8] INFO  com.aiplatform.service.UserService - 用户登录成功: 7
2025-07-05 11:38:01 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.User */update users 
    set
        email=?,
        last_login=?,
        password=?,
        permissions=?,
        role=?,
        status=?,
        updated_at=?,
        username=? 
    where
        id=?
2025-07-05 11:38:01 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:38:01 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:38:01 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:38:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:38:01 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:38:01 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:38:01 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:38:01 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:38:01 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:38:01 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:38:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:38:01 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:38:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:38:01 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:38:01 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:38:01 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:38:01 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:38:01 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:38:01 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:38:01 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:38:01 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:38:01 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:38:01 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:38:01 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:38:01 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:38:01 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:42:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:42:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:49 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:49 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:42:49 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:42:49 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:42:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:49 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:42:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:42:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:42:49 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:49 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:49 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:49 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:49 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:49 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:42:49 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:42:49 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:42:49 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:49 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:42:49 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:42:49 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:42:49 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:49 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:49 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:49 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:49 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:49 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:49 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:42:49 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:42:49 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:42:49 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:50 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:42:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:42:50 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:42:50 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:50 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:50 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:50 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:50 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:50 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:50 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:42:50 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:42:50 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:42:50 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:50 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:42:50 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:42:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-05 11:42:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-05 11:42:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-05 11:42:51 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:51 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:51 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:51 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:51 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:51 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:51 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:51 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:51 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-05 11:42:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-05 11:42:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-05 11:42:51 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-05 11:42:51 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:42:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-4] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-05 11:42:51 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-05 11:42:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-05 11:42:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:42:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:42:51 [http-nio-8080-exec-4] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-05 11:42:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-05 11:42:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 11:42:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 11:42:51 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:51 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 11:42:51 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:51 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 11:42:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-05 11:42:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-6] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-05 11:42:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-05 11:42:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-05 11:42:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-05 11:42:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-6] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-05 11:42:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-05 11:42:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:51 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:51 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-05 11:42:51 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-05 11:42:51 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:42:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:51 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:51 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:42:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-05 11:42:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 11:42:51 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-05 11:42:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:42:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 11:42:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 11:42:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 11:42:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-05 11:42:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-05 11:42:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-05 11:42:51 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:51 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:51 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:51 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:51 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:51 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:51 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:51 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:51 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:51 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-05 11:42:51 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-05 11:42:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:42:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-05 11:42:51 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:51 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 11:42:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 11:42:51 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:51 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:51 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-05 11:42:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-05 11:42:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:51 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:51 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-05 11:42:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:42:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 11:42:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 11:42:52 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-05 11:42:52 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-05 11:42:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:52 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:52 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:52 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:52 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:52 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:52 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:52 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-05 11:42:52 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:52 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-05 11:42:52 [http-nio-8080-exec-10] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-05 11:42:52 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-05 11:42:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-05 11:42:52 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-05 11:42:52 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-05 11:42:52 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:52 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:52 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:52 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:52 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:52 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-05 11:42:52 [http-nio-8080-exec-3] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-05 11:42:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-05 11:42:52 [http-nio-8080-exec-9] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-05 11:42:52 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-05 11:42:52 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:42:52 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:42:52 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:52 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:42:52 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:42:52 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:42:52 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-05 11:42:52 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:42:52 [http-nio-8080-exec-4] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-05 11:42:52 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-05 11:42:52 [http-nio-8080-exec-4] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-05 11:43:15 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:43:15 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:43:15 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:43:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:15 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:43:15 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:43:15 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:43:15 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:43:15 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:43:15 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:43:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:15 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:43:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:43:15 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:43:15 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:43:15 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:43:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:15 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:43:15 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:43:15 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:43:15 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:43:15 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:43:15 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:43:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:15 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:43:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:43:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:51 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:43:51 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:43:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:51 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:43:51 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:43:51 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:43:51 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:51 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:43:51 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:43:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:51 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:43:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:43:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:51 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:43:51 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:43:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:51 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:43:51 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:43:51 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:43:51 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:51 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:43:51 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:43:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:51 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:43:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:43:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:43:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:43:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:43:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:43:51 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:43:51 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:51 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:43:51 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:43:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:51 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:43:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:43:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:43:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:43:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:43:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:43:51 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:43:51 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:51 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:43:51 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:43:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:51 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:43:51 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:43:52 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:43:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:43:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:43:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:43:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:43:52 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:43:52 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:43:52 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:43:52 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:43:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:52 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:43:52 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:43:52 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:43:52 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:43:52 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:43:52 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:52 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:43:52 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:43:52 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:43:52 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:43:52 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:43:52 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:43:52 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:52 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:43:52 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:43:55 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:55 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:43:55 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:43:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:55 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:43:55 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:43:55 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:43:55 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:55 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:43:55 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:43:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:55 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:43:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:43:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:55 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:43:55 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:43:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:55 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:43:55 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:43:55 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:43:55 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:55 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:43:55 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:43:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:55 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:43:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:43:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:43:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:43:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:43:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:43:55 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:43:55 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:55 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:43:55 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:43:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:55 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:43:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:43:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:43:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:43:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:43:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:43:55 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:43:55 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:43:55 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:43:55 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:43:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:43:55 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:43:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:45:07 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:45:07 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:07 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:07 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:07 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:07 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:07 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:07 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:45:07 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:45:07 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:45:07 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:07 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:45:07 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:45:07 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:45:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:08 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:45:08 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:45:08 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:45:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:08 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:45:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:45:36 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-05 11:45:36 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-05 11:45:36 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-05 11:45:36 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:36 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:36 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:36 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:36 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:36 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:36 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:36 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:36 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:36 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:36 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:36 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:36 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:36 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-05 11:45:36 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-05 11:45:36 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-05 11:45:36 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:36 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:45:36 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:36 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:36 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-05 11:45:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:36 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:36 [http-nio-8080-exec-4] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-05 11:45:36 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-05 11:45:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:45:36 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:45:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-05 11:45:36 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-05 11:45:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 11:45:36 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 11:45:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-05 11:45:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 11:45:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:36 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 11:45:36 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-05 11:45:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:36 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:36 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-05 11:45:36 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-05 11:45:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:36 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:36 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:36 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-05 11:45:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:36 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-05 11:45:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-05 11:45:36 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:36 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:36 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:36 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:36 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:36 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-05 11:45:36 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-05 11:45:36 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:45:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:36 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-05 11:45:36 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:36 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:36 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:36 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-05 11:45:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:37 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:45:37 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-05 11:45:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:45:37 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 11:45:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 11:45:37 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 11:45:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 11:45:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-05 11:45:37 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:45:37 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:37 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:37 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:37 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:37 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:37 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:37 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:45:37 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:45:37 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:45:37 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:37 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:45:37 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:45:37 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:45:37 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:37 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:37 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:37 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:37 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:37 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:45:37 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:45:37 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:45:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:37 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:45:37 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:45:37 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:45:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:37 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:37 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:45:37 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:45:37 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:45:37 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:37 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:45:37 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:45:37 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:45:37 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:37 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:37 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:37 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:37 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:37 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:37 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:45:37 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:45:37 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:45:37 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:37 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:45:37 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:45:38 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:45:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:38 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:45:38 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:45:38 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:45:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:38 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:45:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:45:38 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:45:38 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:38 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:38 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:38 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:38 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:38 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:45:38 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:45:38 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:45:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:38 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:45:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:45:53 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:45:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:53 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:45:53 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:45:53 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:45:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:53 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:45:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:45:53 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:45:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:45:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:45:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:45:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:45:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:45:53 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:45:53 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:45:53 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:45:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:45:53 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:45:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:49:22 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-05 11:49:22 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-05 11:49:22 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:49:22 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:49:22 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:49:22 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:49:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:22 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:49:22 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:49:22 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:49:22 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:49:22 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:49:22 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:49:22 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-05 11:49:22 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-05 11:49:22 [http-nio-8080-exec-3] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-05 11:49:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-05 11:49:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:22 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-05 11:49:22 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-05 11:49:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-05 11:49:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:49:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:49:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:22 [http-nio-8080-exec-9] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-05 11:49:22 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-05 11:49:22 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:49:22 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:49:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:49:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:49:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:49:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:22 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-05 11:49:22 [http-nio-8080-exec-10] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-05 11:49:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-05 11:49:22 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:49:22 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:49:22 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:49:22 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-05 11:49:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:22 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-05 11:49:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-05 11:49:22 [http-nio-8080-exec-6] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-05 11:49:25 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 11:49:25 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:49:25 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:49:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:25 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:49:25 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:49:25 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:49:25 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 11:49:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:25 [http-nio-8080-exec-7] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 11:49:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 11:49:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 11:49:25 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 11:49:25 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:49:25 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:49:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:25 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:49:25 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:49:25 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:49:25 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 11:49:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:25 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 11:49:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 11:49:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 11:49:26 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 11:49:26 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:49:26 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:49:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:26 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:49:26 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:49:26 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:49:26 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 11:49:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:26 [http-nio-8080-exec-2] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 11:49:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 11:49:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 11:49:27 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 11:49:27 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:49:27 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:49:27 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:27 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:49:27 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:49:27 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:49:27 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 11:49:27 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:27 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 11:49:27 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 11:49:27 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 11:49:27 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 11:49:27 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:49:27 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:49:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:27 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:49:27 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:49:27 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:49:27 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 11:49:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:27 [http-nio-8080-exec-3] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 11:49:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 11:49:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 11:49:27 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 11:49:27 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:49:27 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:49:27 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:27 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:49:27 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:49:27 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:49:27 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 11:49:27 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:27 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 11:49:27 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 11:49:27 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 11:49:28 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:49:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:49:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:49:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:49:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:49:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:49:28 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:49:28 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:49:28 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:49:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:28 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:49:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:49:28 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:49:28 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:49:28 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:49:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:28 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:49:28 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:49:28 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:49:28 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:49:28 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:49:28 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:49:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:49:28 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:49:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:51:38 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:51:38 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:51:38 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:51:38 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:51:38 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:51:38 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:51:38 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:51:38 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:51:38 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:51:38 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:51:38 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:51:38 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:51:38 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:51:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:51:38 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:51:38 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:51:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:51:38 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:51:38 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:51:38 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:51:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:51:38 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:51:38 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:51:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:51:38 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:51:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:52:02 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:52:02 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:02 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:02 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:02 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:02 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:52:02 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:52:02 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:52:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:52:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:52:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:52:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:02 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:02 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:52:02 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:52:02 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:52:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:52:02 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:52:02 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:52:02 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:02 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:02 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:02 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:02 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:52:02 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:52:02 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:52:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:52:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:52:02 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:52:02 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:02 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:02 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:02 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:02 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 11:52:02 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:52:02 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:52:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:52:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:52:02 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-05 11:52:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-05 11:52:02 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:02 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:02 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:02 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:02 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:02 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:02 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-05 11:52:02 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-05 11:52:02 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:52:02 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-05 11:52:02 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:02 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:02 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 11:52:02 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 11:52:02 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:02 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:02 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:02 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-05 11:52:02 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-05 11:52:02 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:02 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:02 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:02 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:02 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-05 11:52:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:52:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 11:52:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 11:52:03 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-05 11:52:03 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-05 11:52:03 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-05 11:52:03 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:03 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:03 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:03 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:03 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:03 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:03 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:03 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-05 11:52:03 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-05 11:52:03 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-05 11:52:03 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-05 11:52:03 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:52:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-05 11:52:03 [http-nio-8080-exec-7] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-05 11:52:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:52:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:52:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-05 11:52:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 11:52:03 [http-nio-8080-exec-7] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-05 11:52:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 11:52:03 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-05 11:52:03 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:03 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 11:52:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 11:52:03 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-05 11:52:03 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:03 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:03 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:03 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-05 11:52:03 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-05 11:52:03 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:03 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:03 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-05 11:52:03 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:03 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:03 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-05 11:52:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-05 11:52:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:03 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:03 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-05 11:52:03 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:03 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-05 11:52:03 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-05 11:52:03 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:52:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:03 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:03 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:03 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-05 11:52:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:52:03 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-05 11:52:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 11:52:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 11:52:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 11:52:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 11:52:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 11:52:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-05 11:52:03 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-05 11:52:03 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-05 11:52:03 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:03 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:03 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:03 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:03 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:03 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:03 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:03 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-05 11:52:03 [http-nio-8080-exec-10] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-05 11:52:03 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-05 11:52:03 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:03 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:03 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:03 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-05 11:52:03 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-05 11:52:03 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:03 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-05 11:52:03 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-05 11:52:03 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:03 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:03 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:03 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-05 11:52:03 [http-nio-8080-exec-6] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-05 11:52:03 [http-nio-8080-exec-5] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-05 11:52:03 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-05 11:52:03 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-05 11:52:03 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:03 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:03 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:03 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:03 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-05 11:52:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:03 [http-nio-8080-exec-4] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-05 11:52:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-05 11:52:03 [http-nio-8080-exec-4] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-05 11:52:04 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:52:04 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:04 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:04 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:04 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:04 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:04 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:52:04 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:52:04 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:52:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:05 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:52:05 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:52:05 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:52:05 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:05 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:05 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:05 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:05 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:05 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:05 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:52:05 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:52:05 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:52:05 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:05 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:52:05 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:52:36 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-05 11:52:36 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-05 11:52:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:36 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:36 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:36 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:36 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:36 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:36 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:36 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-05 11:52:36 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-05 11:52:36 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-05 11:52:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-05 11:52:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:36 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-05 11:52:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-05 11:52:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-05 11:52:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:37 [http-nio-8080-exec-1] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-05 11:52:37 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-05 11:52:37 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:37 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:37 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:37 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:37 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:37 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:37 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:37 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-05 11:52:37 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-05 11:52:37 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-05 11:52:37 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-05 11:52:37 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:37 [http-nio-8080-exec-3] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-05 11:52:37 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-05 11:52:37 [http-nio-8080-exec-3] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-05 11:52:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 11:52:51 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:51 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:51 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:51 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:51 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:51 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 11:52:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:51 [http-nio-8080-exec-10] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 11:52:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 11:52:51 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 11:52:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 11:52:51 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:51 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:51 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:51 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:51 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:51 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 11:52:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:51 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 11:52:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 11:52:51 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 11:52:53 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 11:52:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:53 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:53 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 11:52:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:53 [http-nio-8080-exec-5] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 11:52:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 11:52:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 11:52:53 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 11:52:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:53 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:53 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 11:52:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:53 [http-nio-8080-exec-4] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 11:52:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 11:52:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 11:52:54 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 11:52:54 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:54 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:54 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:54 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:54 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:54 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 11:52:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:54 [http-nio-8080-exec-7] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 11:52:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 11:52:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 11:52:54 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 11:52:54 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:52:54 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:52:54 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:54 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:52:54 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:52:54 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:52:54 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 11:52:54 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:52:54 [http-nio-8080-exec-2] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 11:52:54 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 11:52:54 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 11:53:00 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing POST /user/support/message
2025-07-05 11:53:00 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:53:00 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:53:00 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:53:00 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:53:00 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:53:00 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:53:00 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured POST /user/support/message
2025-07-05 11:53:00 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:53:00 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 用户 cakravartin@example.com 向客服发送消息
2025-07-05 11:53:00 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.SupportChat */insert 
    into
        support_chats (content, created_at, is_read, sender_type, support_id, updated_at, user_id, version) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-05 11:53:00 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 用户消息已保存到客服对话，等待客服回复
2025-07-05 11:53:01 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 11:53:01 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:53:01 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:53:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:53:01 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:53:01 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:53:01 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:53:01 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 11:53:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:53:01 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 11:53:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 11:53:01 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 11:53:07 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:53:07 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:53:07 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:53:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:53:07 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:53:07 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:53:07 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:53:07 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:53:07 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:53:07 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:53:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:53:07 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:53:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:53:07 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 11:53:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 11:53:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 11:53:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:53:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 11:53:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 11:53:07 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 11:53:07 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 11:53:07 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 11:53:07 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 11:53:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 11:53:07 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 11:53:07 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 11:59:34 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=45s147ms45µs600ns).
2025-07-05 12:56:35 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m50ms184µs).
2025-07-05 12:59:30 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-05 12:59:30 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-05 12:59:30 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 12:59:30 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 12:59:30 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 12:59:30 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 12:59:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:30 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 12:59:30 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 12:59:30 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 12:59:30 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-05 12:59:30 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 12:59:30 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 12:59:30 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 12:59:30 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-05 12:59:30 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-05 12:59:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-05 12:59:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:30 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-05 12:59:30 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-05 12:59:30 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-05 12:59:30 [http-nio-8080-exec-9] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-05 12:59:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 12:59:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 12:59:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:30 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-05 12:59:30 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 12:59:30 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 12:59:30 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 12:59:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 12:59:30 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 12:59:30 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-05 12:59:30 [http-nio-8080-exec-3] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-05 12:59:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-05 12:59:30 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 12:59:30 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 12:59:30 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 12:59:30 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-05 12:59:30 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:30 [http-nio-8080-exec-10] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-05 12:59:30 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-05 12:59:30 [http-nio-8080-exec-10] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-05 12:59:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 12:59:33 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 12:59:33 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 12:59:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:33 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 12:59:33 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 12:59:33 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 12:59:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 12:59:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:33 [http-nio-8080-exec-2] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 12:59:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 12:59:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 12:59:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 12:59:33 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 12:59:33 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 12:59:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:33 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 12:59:33 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 12:59:33 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 12:59:33 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 12:59:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:33 [http-nio-8080-exec-4] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 12:59:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 12:59:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 12:59:34 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 12:59:34 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 12:59:34 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 12:59:34 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:34 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 12:59:34 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 12:59:34 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 12:59:34 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 12:59:34 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:34 [http-nio-8080-exec-7] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 12:59:34 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 12:59:34 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 12:59:34 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 12:59:34 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 12:59:34 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 12:59:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:34 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 12:59:34 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 12:59:34 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 12:59:34 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 12:59:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:34 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 12:59:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 12:59:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 12:59:35 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 12:59:35 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 12:59:35 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 12:59:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:35 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 12:59:35 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 12:59:35 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 12:59:35 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 12:59:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:35 [http-nio-8080-exec-1] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 12:59:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 12:59:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 12:59:35 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 12:59:35 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 12:59:35 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 12:59:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:35 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 12:59:35 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 12:59:35 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 12:59:35 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 12:59:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:35 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 12:59:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 12:59:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 12:59:36 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 12:59:36 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 12:59:36 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 12:59:36 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:36 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 12:59:36 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 12:59:36 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 12:59:36 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 12:59:36 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:36 [http-nio-8080-exec-3] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 12:59:36 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 12:59:36 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 12:59:36 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/chat
2025-07-05 12:59:36 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 12:59:36 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 12:59:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:36 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 12:59:36 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 12:59:36 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 12:59:36 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/chat
2025-07-05 12:59:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:36 [http-nio-8080-exec-10] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的客服对话记录
2025-07-05 12:59:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        sc1_0.id,
        sc1_0.content,
        sc1_0.created_at,
        sc1_0.is_read,
        sc1_0.sender_type,
        sc1_0.support_id,
        sc1_0.updated_at,
        sc1_0.user_id,
        sc1_0.version 
    from
        support_chats sc1_0 
    where
        sc1_0.user_id=? 
    order by
        sc1_0.created_at
2025-07-05 12:59:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-05 12:59:49 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 12:59:49 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 12:59:49 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 12:59:49 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:49 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 12:59:49 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 12:59:49 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 12:59:49 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 12:59:49 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 12:59:49 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 12:59:49 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:49 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 12:59:49 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 12:59:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 12:59:49 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 12:59:49 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 12:59:49 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:49 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 12:59:49 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 12:59:49 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 12:59:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 12:59:49 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 12:59:49 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 12:59:49 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:49 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 12:59:49 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 12:59:53 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-05 12:59:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 12:59:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 12:59:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 12:59:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 12:59:53 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 12:59:53 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-05 12:59:53 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-05 12:59:53 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 12:59:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 12:59:54 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 12:59:54 [http-nio-8080-exec-8] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-05 12:59:54 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 12:59:54 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:05 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-05 13:00:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:05 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:05 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-05 13:00:05 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-05 13:00:05 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:05 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-05 13:00:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:06 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-05 13:00:06 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:06 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:06 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:06 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:06 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:06 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-05 13:00:06 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-05 13:00:06 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:06 [http-nio-8080-exec-10] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-05 13:00:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:07 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-05 13:00:08 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:08 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:08 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:08 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:08 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:08 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-05 13:00:08 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-05 13:00:08 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:08 [http-nio-8080-exec-6] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-05 13:00:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:09 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-05 13:00:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:09 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-05 13:00:09 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-05 13:00:09 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:09 [http-nio-8080-exec-5] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-05 13:00:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/5
2025-07-05 13:00:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:10 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:10 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/5
2025-07-05 13:00:10 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=5
2025-07-05 13:00:10 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:10 [http-nio-8080-exec-4] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=5, userId=7
2025-07-05 13:00:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:10 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-05 13:00:10 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:10 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:10 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:10 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:10 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:10 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-05 13:00:10 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-05 13:00:10 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:10 [http-nio-8080-exec-7] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-05 13:00:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:11 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-05 13:00:11 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:11 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:11 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:11 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:11 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:11 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-05 13:00:11 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-05 13:00:11 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:11 [http-nio-8080-exec-8] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-05 13:00:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:12 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-05 13:00:12 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:12 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:12 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:12 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:12 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:12 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-05 13:00:12 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-05 13:00:12 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:12 [http-nio-8080-exec-1] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-05 13:00:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:12 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-05 13:00:12 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:12 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:12 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:12 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:12 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:12 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-05 13:00:12 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-05 13:00:12 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:12 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-05 13:00:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:13 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/5
2025-07-05 13:00:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:13 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:13 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/5
2025-07-05 13:00:13 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=5
2025-07-05 13:00:13 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:13 [http-nio-8080-exec-3] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=5, userId=7
2025-07-05 13:00:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:13 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-05 13:00:13 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:13 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:13 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:13 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:13 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:13 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-05 13:00:13 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-05 13:00:13 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:13 [http-nio-8080-exec-10] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-05 13:00:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:14 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-05 13:00:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:14 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:14 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-05 13:00:14 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-05 13:00:14 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:14 [http-nio-8080-exec-6] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-05 13:00:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:14 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:14 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-05 13:00:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:14 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:14 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-05 13:00:14 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-05 13:00:14 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:15 [http-nio-8080-exec-5] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-05 13:00:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:15 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-05 13:00:15 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:15 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:15 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:15 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:15 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:15 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-05 13:00:15 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-05 13:00:15 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:15 [http-nio-8080-exec-2] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-05 13:00:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:15 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/5
2025-07-05 13:00:15 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:15 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:15 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:15 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:15 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:15 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/5
2025-07-05 13:00:15 [http-nio-8080-exec-4] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=5
2025-07-05 13:00:15 [http-nio-8080-exec-4] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:15 [http-nio-8080-exec-4] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=5, userId=7
2025-07-05 13:00:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:16 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-05 13:00:16 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:16 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:16 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:16 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:16 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:16 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-05 13:00:16 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-05 13:00:16 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:16 [http-nio-8080-exec-7] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-05 13:00:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:16 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-05 13:00:16 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:16 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:16 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:16 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:16 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:16 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-05 13:00:16 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-05 13:00:16 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:17 [http-nio-8080-exec-8] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-05 13:00:17 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:17 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:17 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-05 13:00:17 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:17 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:17 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:17 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:17 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:17 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:17 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-05 13:00:17 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-05 13:00:17 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:17 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:17 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:17 [http-nio-8080-exec-1] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-05 13:00:17 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:17 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:17 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/24
2025-07-05 13:00:17 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:17 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:18 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:18 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:18 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:18 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/24
2025-07-05 13:00:18 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=24
2025-07-05 13:00:18 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:18 [http-nio-8080-exec-9] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=24, userId=7
2025-07-05 13:00:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:18 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/17
2025-07-05 13:00:18 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:18 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:18 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:18 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:18 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:18 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/17
2025-07-05 13:00:18 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=17
2025-07-05 13:00:18 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:18 [http-nio-8080-exec-3] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=17, userId=7
2025-07-05 13:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:00:19 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/5
2025-07-05 13:00:19 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:00:19 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:00:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:19 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:00:19 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:00:19 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:00:19 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/5
2025-07-05 13:00:19 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=5
2025-07-05 13:00:19 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:00:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:00:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:19 [http-nio-8080-exec-10] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=5, userId=7
2025-07-05 13:00:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 13:00:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 13:01:22 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-05 13:01:22 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-05 13:01:22 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:01:22 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:01:22 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:01:22 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:01:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:01:22 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:01:22 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:01:22 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:01:22 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:01:22 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:01:22 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:01:22 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:01:22 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-05 13:01:22 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-05 13:01:22 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:01:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:01:22 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 13:01:22 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-05 13:01:22 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:01:22 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:01:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:01:22 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 13:01:22 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:01:22 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:01:22 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:01:22 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-05 13:01:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:01:22 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 13:01:22 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-05 13:01:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:01:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:01:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:01:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:01:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:01:22 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:01:22 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-05 13:01:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:01:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 13:01:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 13:01:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 13:02:06 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 13:02:06 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:06 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:06 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:06 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:06 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:06 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:06 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 13:02:06 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 13:02:06 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:02:06 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:06 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 13:02:06 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 13:02:06 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 13:02:06 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:06 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:06 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:06 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:06 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:06 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:06 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 13:02:06 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 13:02:06 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:02:06 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:06 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 13:02:06 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 13:02:08 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 13:02:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:08 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:08 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 13:02:08 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 13:02:08 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:02:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:08 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 13:02:08 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 13:02:08 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 13:02:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:08 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:08 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 13:02:08 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 13:02:08 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:02:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:08 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 13:02:08 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 13:02:08 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 13:02:08 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:08 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:08 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:08 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:08 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:08 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:08 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 13:02:08 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 13:02:08 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:02:08 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:08 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 13:02:08 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 13:02:08 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 13:02:08 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:08 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:08 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:08 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:08 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:08 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 13:02:08 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 13:02:08 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:02:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:08 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 13:02:08 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 13:02:09 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-05 13:02:09 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-05 13:02:09 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-05 13:02:09 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:09 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:09 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:09 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:09 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:09 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:09 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:09 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-05 13:02:09 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-05 13:02:09 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-05 13:02:09 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:02:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-9] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-05 13:02:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 13:02:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 13:02:09 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:09 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:09 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:09 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-05 13:02:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 13:02:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 13:02:09 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-05 13:02:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-05 13:02:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 13:02:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 13:02:09 [http-nio-8080-exec-3] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-05 13:02:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-05 13:02:09 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-05 13:02:09 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-05 13:02:09 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:09 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:09 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:09 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:09 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-05 13:02:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:09 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:09 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:09 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:09 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:09 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:09 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-05 13:02:09 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-05 13:02:09 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-05 13:02:09 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:02:09 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:09 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:09 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-05 13:02:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-05 13:02:09 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-05 13:02:09 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 13:02:09 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-05 13:02:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 13:02:09 [http-nio-8080-exec-2] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-05 13:02:09 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 13:02:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 13:02:09 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 13:02:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 13:02:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-05 13:02:09 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-05 13:02:09 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-05 13:02:09 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:09 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:09 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:09 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:09 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:09 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:09 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:09 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:09 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:09 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-05 13:02:09 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-05 13:02:09 [http-nio-8080-exec-6] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-05 13:02:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-05 13:02:09 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-8] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-05 13:02:09 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-05 13:02:09 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-05 13:02:09 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:09 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:09 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-8] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-05 13:02:09 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-05 13:02:09 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:09 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:09 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:09 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:09 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-05 13:02:09 [http-nio-8080-exec-7] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-05 13:02:09 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-05 13:02:09 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:09 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:09 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:09 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-05 13:02:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:09 [http-nio-8080-exec-4] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-05 13:02:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-05 13:02:09 [http-nio-8080-exec-4] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-05 13:02:10 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-05 13:02:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-05 13:02:10 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:10 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:10 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:10 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:10 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:10 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:10 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:10 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:10 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:10 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:10 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:10 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-05 13:02:10 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-05 13:02:10 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:10 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 13:02:10 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-05 13:02:10 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:10 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:10 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 13:02:10 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 13:02:10 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:10 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:10 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:10 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-05 13:02:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:10 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-05 13:02:10 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:10 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:10 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:10 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:10 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:10 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:10 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-05 13:02:10 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:10 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 13:02:10 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 13:02:10 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 13:02:11 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 13:02:11 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:11 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:11 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:11 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:11 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:11 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 13:02:11 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 13:02:11 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:02:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:11 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 13:02:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 13:02:11 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 13:02:11 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 13:02:11 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 13:02:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:11 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 13:02:11 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 13:02:11 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 13:02:11 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 13:02:11 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 13:02:11 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 13:02:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 13:02:11 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 13:02:11 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 13:04:04 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-05 13:04:04 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-07-05 13:04:04 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-07-05 18:40:59 [main] INFO  c.a.AiChatBackendApplication - Starting AiChatBackendApplication using Java 23.0.2 with PID 20528 (D:\SE Courses\SE\SE25Project-05\UIPrototype\server\java-backend\target\classes started by 31656 in D:\SE Courses\SE\SE25Project-05\UIPrototype\server\java-backend)
2025-07-05 18:40:59 [main] DEBUG c.a.AiChatBackendApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-07-05 18:40:59 [main] INFO  c.a.AiChatBackendApplication - No active profile set, falling back to 1 default profile: "default"
2025-07-05 18:41:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-05 18:41:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-05 18:41:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 88 ms. Found 7 JPA repository interfaces.
2025-07-05 18:41:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-05 18:41:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-07-05 18:41:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.AdminMessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-05 18:41:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.ChatRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-05 18:41:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.MessageRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-05 18:41:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.SupportChatRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-05 18:41:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.SystemLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-05 18:41:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-05 18:41:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.aiplatform.repository.UserSettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-07-05 18:41:00 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-07-05 18:41:00 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-07-05 18:41:00 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-07-05 18:41:00 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-07-05 18:41:01 [main] INFO  o.a.c.c.C.[.[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-07-05 18:41:01 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1039 ms
2025-07-05 18:41:01 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-05 18:41:01 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-07-05 18:41:01 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-07-05 18:41:01 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-05 18:41:01 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-07-05 18:41:01 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7e1762e6
2025-07-05 18:41:01 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-07-05 18:41:01 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-05 18:41:01 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-07-05 18:41:02 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-05 18:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table admin_messages 
       modify column from_user_id bigint not null
2025-07-05 18:41:02 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table admin_messages 
       modify column from_user_id bigint not null" via JDBC [Cannot change column 'from_user_id': used in a foreign key constraint 'admin_messages_ibfk_1']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table admin_messages 
       modify column from_user_id bigint not null" via JDBC [Cannot change column 'from_user_id': used in a foreign key constraint 'admin_messages_ibfk_1']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'from_user_id': used in a foreign key constraint 'admin_messages_ibfk_1'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 18:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table admin_messages 
       modify column to_user_id bigint
2025-07-05 18:41:02 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table admin_messages 
       modify column to_user_id bigint" via JDBC [Cannot change column 'to_user_id': used in a foreign key constraint 'admin_messages_ibfk_2']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table admin_messages 
       modify column to_user_id bigint" via JDBC [Cannot change column 'to_user_id': used in a foreign key constraint 'admin_messages_ibfk_2']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'to_user_id': used in a foreign key constraint 'admin_messages_ibfk_2'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 18:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table chats 
       modify column id bigint not null auto_increment
2025-07-05 18:41:02 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table chats 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'fk_messages_chat_id' of table 'database.messages']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table chats 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'fk_messages_chat_id' of table 'database.messages']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'id': used in a foreign key constraint 'fk_messages_chat_id' of table 'database.messages'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 18:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table chats 
       modify column user_id bigint not null
2025-07-05 18:41:02 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table chats 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'chats_ibfk_1']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table chats 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'chats_ibfk_1']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'user_id': used in a foreign key constraint 'chats_ibfk_1'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 18:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table messages 
       modify column chat_id bigint not null
2025-07-05 18:41:02 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table messages 
       modify column chat_id bigint not null" via JDBC [Cannot change column 'chat_id': used in a foreign key constraint 'fk_messages_chat_id']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table messages 
       modify column chat_id bigint not null" via JDBC [Cannot change column 'chat_id': used in a foreign key constraint 'fk_messages_chat_id']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'chat_id': used in a foreign key constraint 'fk_messages_chat_id'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 18:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table system_logs 
       modify column user_id bigint
2025-07-05 18:41:02 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table system_logs 
       modify column user_id bigint" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'system_logs_ibfk_1']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table system_logs 
       modify column user_id bigint" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'system_logs_ibfk_1']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'user_id': used in a foreign key constraint 'system_logs_ibfk_1'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 18:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table user_settings 
       modify column user_id bigint not null
2025-07-05 18:41:02 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table user_settings 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'fk_user_settings_user_id']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table user_settings 
       modify column user_id bigint not null" via JDBC [Cannot change column 'user_id': used in a foreign key constraint 'fk_user_settings_user_id']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'user_id': used in a foreign key constraint 'fk_user_settings_user_id'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 18:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table users 
       modify column id bigint not null auto_increment
2025-07-05 18:41:02 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table users 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'admin_messages_ibfk_1' of table 'database.admin_messages']
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table users 
       modify column id bigint not null auto_increment" via JDBC [Cannot change column 'id': used in a foreign key constraint 'admin_messages_ibfk_1' of table 'database.admin_messages']
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:295)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:689)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1166)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:911)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:789)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:241)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4850)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:845)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:148)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:866)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:240)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:433)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:917)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:171)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:488)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:501)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:610)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.aiplatform.AiChatBackendApplication.main(AiChatBackendApplication.java:18)
Caused by: java.sql.SQLException: Cannot change column 'id': used in a foreign key constraint 'admin_messages_ibfk_1' of table 'database.admin_messages'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.StatementImpl.executeInternal(StatementImpl.java:763)
	at com.mysql.cj.jdbc.StatementImpl.execute(StatementImpl.java:648)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 123 common frames omitted
2025-07-05 18:41:02 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-05 18:41:02 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-05 18:41:03 [main] DEBUG c.a.security.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-07-05 18:41:03 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-05 18:41:03 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@357d4b6d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@74d41fcf, org.springframework.security.web.context.SecurityContextHolderFilter@4242a0e7, org.springframework.security.web.header.HeaderWriterFilter@a8eb0bf, org.springframework.web.filter.CorsFilter@46050be4, org.springframework.security.web.authentication.logout.LogoutFilter@3ed3bfcb, com.aiplatform.security.JwtAuthenticationFilter@51cbd1d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@24b4cee9, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2aa93f15, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@62c732d2, org.springframework.security.web.session.SessionManagementFilter@4b3642c4, org.springframework.security.web.access.ExceptionTranslationFilter@320aecd3, org.springframework.security.web.access.intercept.AuthorizationFilter@2d7d92a7]
2025-07-05 18:41:04 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-07-05 18:41:04 [main] INFO  c.a.AiChatBackendApplication - Started AiChatBackendApplication in 4.549 seconds (process running for 5.066)
2025-07-05 18:41:45 [http-nio-8080-exec-3] INFO  o.a.c.c.C.[.[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-07-05 18:41:45 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-07-05 18:41:45 [http-nio-8080-exec-3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 5 ms
2025-07-05 18:41:45 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 18:41:45 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:41:45 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:41:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:41:45 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:41:45 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:41:45 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:41:45 [http-nio-8080-exec-2] WARN  o.s.w.s.h.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/auth/me' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-07-05 18:41:45 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 18:41:45 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:41:45 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 18:41:45 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:41:45 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:41:45 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:41:45 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:41:45 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:41:45 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:41:45 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 18:41:45 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:41:45 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 18:41:45 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:41:45 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:41:45 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:41:45 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:41:45 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:41:45 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:41:45 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 18:41:46 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 18:41:46 [http-nio-8080-exec-7] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 18:41:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:41:46 [http-nio-8080-exec-7] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 18:41:46 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 18:41:46 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 18:41:46 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:41:46 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:41:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:41:46 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:41:46 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:41:46 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:41:46 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 18:41:46 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 18:41:46 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 18:41:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:41:46 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 18:41:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 18:49:16 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 18:49:16 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:49:16 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:49:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:49:16 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:49:16 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:49:16 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:49:16 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 18:49:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:49:16 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 18:49:16 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:49:16 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:49:16 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:49:16 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:49:16 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:49:16 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:49:16 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 18:49:16 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 18:49:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:49:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:49:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:49:16 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:49:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:49:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:49:16 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:49:16 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 18:49:16 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 18:49:16 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 18:49:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:49:16 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 18:49:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 18:49:16 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 18:49:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:49:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:49:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:49:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:49:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:49:16 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:49:16 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 18:49:16 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 18:49:16 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 18:49:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:49:16 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 18:49:16 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 18:49:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 18:49:49 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:49:49 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:49:49 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:49:49 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:49:49 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:49:49 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:49:49 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 18:49:49 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:49:57 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 18:49:57 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:49:57 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:49:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:49:57 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:49:57 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:49:57 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:49:57 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 18:49:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:50:39 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 18:50:39 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:50:39 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:50:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:50:39 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:50:39 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:50:39 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:50:39 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 18:50:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:50:39 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 18:50:39 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:50:39 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:50:39 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:50:39 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:50:39 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:50:39 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:50:39 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 18:50:39 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 18:50:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:50:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:50:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:50:39 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:50:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:50:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:50:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:50:39 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 18:50:39 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 18:50:39 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 18:50:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:50:39 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 18:50:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 18:50:39 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 18:50:39 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:50:39 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:50:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:50:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:50:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:50:40 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:50:40 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 18:50:40 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 18:50:40 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 18:50:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:50:40 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 18:50:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 18:56:17 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 18:56:17 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:56:17 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:56:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:56:17 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:56:17 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:56:17 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:56:17 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 18:56:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:57:08 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 18:57:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:57:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:57:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:57:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:57:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:57:08 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:57:08 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 18:57:08 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:58:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 18:58:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:58:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:58:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:58:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:58:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:58:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:58:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 18:58:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:58:15 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 18:58:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:58:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:58:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:58:15 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 18:58:15 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:58:15 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:58:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:58:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:58:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:58:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:58:15 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 18:58:15 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:58:15 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:58:15 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:58:15 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 18:58:15 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 18:58:15 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 18:58:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:58:15 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 18:58:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 18:58:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:58:15 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 18:58:15 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:58:15 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:58:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:58:15 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:58:15 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:58:15 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:58:15 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 18:58:15 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 18:58:15 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 18:58:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:58:15 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 18:58:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 18:58:27 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 18:58:27 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:58:27 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:58:27 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:58:27 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:58:27 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:58:27 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:58:27 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 18:58:27 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:58:49 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 18:58:49 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 18:58:49 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 18:58:49 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 18:58:49 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 18:58:49 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 18:58:49 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 18:58:49 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 18:58:49 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:00:41 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 19:00:41 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:00:41 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:00:41 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:00:41 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:00:41 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:00:41 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:00:41 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 19:00:41 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:02:38 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 19:02:38 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 19:02:38 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:02:38 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:02:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:02:38 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:02:38 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:02:38 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:02:38 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:02:38 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:02:38 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:02:38 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 19:02:38 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:02:38 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:02:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:02:38 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:02:38 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:02:38 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:02:38 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 19:02:38 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:02:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:02:38 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:02:38 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 19:02:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:02:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:02:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:02:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:02:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:02:38 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:02:38 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 19:02:38 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:02:38 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:02:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:02:38 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:02:38 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:04:47 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 19:04:47 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:04:47 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:04:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:04:47 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:04:47 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:04:47 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:04:47 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 19:04:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:05:57 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 19:05:57 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:05:57 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:05:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:05:57 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:05:57 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:05:57 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:05:57 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 19:05:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:08:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 19:08:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:08:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:08:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:08:29 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 19:08:29 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:08:29 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:08:29 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:08:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:08:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:08:29 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:08:29 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 19:08:29 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:08:29 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:08:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:08:29 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:08:29 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:08:29 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:08:29 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 19:08:29 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:08:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:08:29 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:08:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 19:08:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:08:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:08:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:08:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:08:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:08:29 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:08:29 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 19:08:29 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:08:29 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:08:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:08:29 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:08:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:08:34 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-05 19:08:34 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:08:34 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:08:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:08:34 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:08:34 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:08:34 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:08:34 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-05 19:08:34 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-05 19:08:34 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:08:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:08:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 19:08:34 [http-nio-8080-exec-1] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-05 19:08:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 19:08:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 19:25:28 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 19:25:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:28 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:28 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 19:25:28 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:25:28 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:25:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:28 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:25:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:25:28 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 19:25:28 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:28 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:28 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:28 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:28 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:28 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 19:25:28 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:25:28 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:25:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:28 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:25:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:25:28 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 19:25:28 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:28 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:28 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:28 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:28 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:28 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 19:25:28 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:25:28 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:25:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:28 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:25:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:25:28 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 19:25:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:28 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:28 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats?page=0&size=20&timeFilter=all&aiType=all&isFavorite=false
2025-07-05 19:25:28 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:25:28 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:25:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:28 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:25:28 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:25:30 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-05 19:25:30 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-05 19:25:30 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-05 19:25:30 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:30 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:30 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:30 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:30 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:30 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:30 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:30 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:30 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:30 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:30 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:30 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:30 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:30 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:30 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:30 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:30 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-05 19:25:30 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-05 19:25:30 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-05 19:25:30 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:25:30 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-05 19:25:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:30 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:30 [http-nio-8080-exec-1] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-05 19:25:30 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-05 19:25:30 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-05 19:25:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 19:25:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 19:25:30 [http-nio-8080-exec-10] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-05 19:25:30 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/settings
2025-07-05 19:25:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 19:25:30 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:30 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 19:25:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 19:25:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 19:25:30 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:30 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:30 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:30 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/settings
2025-07-05 19:25:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:30 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/stats
2025-07-05 19:25:30 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:30 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-05 19:25:30 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 获取用户设置: 用户ID=7
2025-07-05 19:25:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        us1_0.id,
        us1_0.auto_cleanup_enabled,
        us1_0.cleanup_frequency,
        us1_0.created_at,
        us1_0.max_chats,
        us1_0.protected_limit,
        us1_0.retention_days,
        us1_0.updated_at,
        us1_0.user_id 
    from
        user_settings us1_0 
    where
        us1_0.user_id=?
2025-07-05 19:25:30 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:30 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:30 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:30 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/stats
2025-07-05 19:25:30 [http-nio-8080-exec-6] INFO  c.a.controller.HistoryController - 获取用户统计信息
2025-07-05 19:25:30 [http-nio-8080-exec-6] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:25:30 [http-nio-8080-exec-5] INFO  c.a.controller.DataController - 返回用户设置: {protectedChats=10, retentionDays=30, autoDelete=false, maxChatCount=100}
2025-07-05 19:25:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /data/statistics
2025-07-05 19:25:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 19:25:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:30 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:30 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /data/statistics
2025-07-05 19:25:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 19:25:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 19:25:30 [http-nio-8080-exec-8] INFO  c.a.controller.DataController - 获取数据统计: 用户ID=7
2025-07-05 19:25:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 19:25:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 19:25:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_protected
2025-07-05 19:25:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND c.isProtected = false 
        AND c.lastActivity < :cutoffDate */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and c1_0.is_protected=0 
            and c1_0.last_activity<?
2025-07-05 19:25:33 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-05 19:25:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-05 19:25:33 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:33 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:33 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:33 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:33 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:33 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:33 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:33 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:33 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-05 19:25:33 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:33 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:33 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:33 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-05 19:25:33 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 19:25:33 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/profile
2025-07-05 19:25:33 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:33 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 19:25:33 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:33 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:33 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:33 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/profile
2025-07-05 19:25:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 19:25:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:33 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/usage-stats
2025-07-05 19:25:33 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:33 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:33 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:33 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:33 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:33 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/usage-stats
2025-07-05 19:25:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=?
2025-07-05 19:25:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(m) 
    FROM
        Message m 
    INNER JOIN
        Chat c 
            ON m.chatId = c.id 
    WHERE
        c.userId = :userId */ select
            count(m1_0.id) 
        from
            messages m1_0 
        join
            chats c1_0 
                on m1_0.chat_id=c1_0.id 
        where
            c1_0.user_id=?
2025-07-05 19:25:33 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        chats c1_0 
    where
        c1_0.user_id=? 
        and c1_0.is_favorite
2025-07-05 19:25:36 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-05 19:25:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-05 19:25:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:36 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:36 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:36 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:36 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:36 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:36 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-05 19:25:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:36 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:36 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-05 19:25:36 [http-nio-8080-exec-9] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-05 19:25:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-05 19:25:36 [http-nio-8080-exec-7] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-05 19:25:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-05 19:25:36 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/support/staff
2025-07-05 19:25:36 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:36 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:36 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:36 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:36 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:36 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/support/staff
2025-07-05 19:25:36 [http-nio-8080-exec-10] INFO  c.a.controller.UserController - 获取客服人员列表
2025-07-05 19:25:36 [http-nio-8080-exec-7] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-05 19:25:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.role in (?) 
        and u1_0.status=?
2025-07-05 19:25:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /user/messages
2025-07-05 19:25:36 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:36 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:36 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:36 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:36 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:36 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /user/messages
2025-07-05 19:25:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:36 [http-nio-8080-exec-2] INFO  c.a.controller.UserController - 获取用户 cakravartin@example.com 的消息列表
2025-07-05 19:25:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        am1_0.id,
        am1_0.content,
        am1_0.created_at,
        am1_0.from_user_id,
        am1_0.is_read,
        am1_0.message_type,
        am1_0.subject,
        am1_0.to_user_id 
    from
        admin_messages am1_0 
    where
        am1_0.to_user_id=? 
    order by
        am1_0.created_at desc,
        am1_0.created_at desc 
    limit
        ?, ?
2025-07-05 19:25:36 [http-nio-8080-exec-2] ERROR c.a.controller.UserController - 获取用户消息失败: Error attempting to apply AttributeConverter
2025-07-05 19:25:38 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 19:25:38 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:38 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:38 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:38 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:38 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:38 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 19:25:38 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:25:38 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:25:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:38 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:25:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:25:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 19:25:38 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:25:38 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:25:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:38 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:25:38 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:25:38 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:25:38 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 19:25:38 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:25:38 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:25:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:25:38 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:25:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:27:06 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 19:27:06 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:27:06 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:27:06 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:27:06 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:27:06 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:27:06 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:27:06 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 19:27:06 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:27:06 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 19:27:06 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:27:06 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:27:06 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:27:06 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:27:06 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:27:06 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:27:06 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 19:27:06 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 19:27:06 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:27:06 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:27:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:27:06 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:27:06 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:27:06 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:27:06 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:27:06 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 19:27:06 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:27:06 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:27:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:27:06 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:27:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:27:06 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 19:27:06 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:27:06 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:27:06 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:27:06 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:27:06 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:27:06 [http-nio-8080-exec-2] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:27:06 [http-nio-8080-exec-2] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 19:27:06 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:27:06 [http-nio-8080-exec-2] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:27:06 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:27:06 [http-nio-8080-exec-2] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:27:06 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:27:42 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 19:27:42 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:27:42 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:27:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:27:42 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:27:42 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:27:42 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:27:42 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 19:27:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:28:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 19:28:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:28:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:28:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:28:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:28:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:28:15 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:28:15 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 19:28:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:28:15 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 19:28:15 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:28:15 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:28:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:28:15 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:28:15 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:28:15 [http-nio-8080-exec-4] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:28:15 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 19:28:15 [http-nio-8080-exec-4] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 19:28:15 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:28:15 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:28:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:28:15 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:28:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:28:15 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:28:15 [http-nio-8080-exec-3] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:28:15 [http-nio-8080-exec-3] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 19:28:15 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:28:15 [http-nio-8080-exec-3] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:28:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:28:15 [http-nio-8080-exec-3] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:28:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:28:15 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 19:28:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:28:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:28:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:28:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:28:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:28:15 [http-nio-8080-exec-9] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:28:15 [http-nio-8080-exec-9] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 19:28:15 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:28:15 [http-nio-8080-exec-9] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:28:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:28:15 [http-nio-8080-exec-9] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:28:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:31:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 19:31:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:31:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:31:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:31:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:31:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:31:08 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:31:08 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 19:31:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:31:08 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Securing GET /auth/me
2025-07-05 19:31:08 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:31:08 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:31:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:31:08 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 19:31:08 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:31:08 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:31:08 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:31:08 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:31:08 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:31:08 [http-nio-8080-exec-6] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:31:08 [http-nio-8080-exec-6] DEBUG o.s.security.web.FilterChainProxy - Secured GET /auth/me
2025-07-05 19:31:08 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:31:08 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:31:08 [http-nio-8080-exec-1] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:31:08 [http-nio-8080-exec-1] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 19:31:08 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:31:08 [http-nio-8080-exec-1] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:31:08 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:31:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:31:08 [http-nio-8080-exec-1] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:31:08 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:31:08 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 19:31:08 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:31:08 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:31:08 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:31:08 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:31:08 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:31:08 [http-nio-8080-exec-8] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:31:08 [http-nio-8080-exec-8] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 19:31:08 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:31:08 [http-nio-8080-exec-8] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:31:08 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:31:08 [http-nio-8080-exec-8] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:31:08 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
2025-07-05 19:34:39 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats/6
2025-07-05 19:34:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:34:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:34:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:34:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:34:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:34:39 [http-nio-8080-exec-10] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:34:39 [http-nio-8080-exec-10] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats/6
2025-07-05 19:34:39 [http-nio-8080-exec-10] INFO  c.a.controller.HistoryController - 获取对话详情: chatId=6
2025-07-05 19:34:39 [http-nio-8080-exec-10] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:34:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:34:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 19:34:39 [http-nio-8080-exec-10] INFO  com.aiplatform.service.ChatService - 获取聊天消息: chatId=6, userId=7
2025-07-05 19:34:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 19:34:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.chat_id,
        m1_0.content,
        m1_0.created_at,
        m1_0.metadata,
        m1_0.role 
    from
        messages m1_0 
    where
        m1_0.chat_id=? 
    order by
        m1_0.created_at
2025-07-05 19:34:59 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Securing POST /chat/6/message
2025-07-05 19:34:59 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:34:59 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:34:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:34:59 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:34:59 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:34:59 [http-nio-8080-exec-7] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:34:59 [http-nio-8080-exec-7] DEBUG o.s.security.web.FilterChainProxy - Secured POST /chat/6/message
2025-07-05 19:34:59 [http-nio-8080-exec-7] INFO  c.a.controller.ChatController - 发送消息到聊天 6: {content=media ok, role=user}
2025-07-05 19:34:59 [http-nio-8080-exec-7] DEBUG c.a.controller.ChatController - 当前认证主体: cakravartin@example.com
2025-07-05 19:34:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:34:59 [http-nio-8080-exec-7] INFO  c.a.controller.ChatController - 用户消息: media ok
2025-07-05 19:34:59 [http-nio-8080-exec-7] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=6, userId=7, role=user
2025-07-05 19:34:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 19:34:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-05 19:34:59 [http-nio-8080-exec-7] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=113
2025-07-05 19:34:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-05 19:34:59 [http-nio-8080-exec-7] INFO  com.aiplatform.service.ChatService - 发送消息: chatId=6, userId=7, role=assistant
2025-07-05 19:34:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.ai_type,
        c1_0.created_at,
        c1_0.is_favorite,
        c1_0.is_protected,
        c1_0.last_activity,
        c1_0.message_count,
        c1_0.title,
        c1_0.updated_at,
        c1_0.user_id 
    from
        chats c1_0 
    where
        c1_0.id=? 
        and c1_0.user_id=?
2025-07-05 19:34:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.aiplatform.entity.Message */insert 
    into
        messages (chat_id, content, created_at, metadata, role) 
    values
        (?, ?, ?, ?, ?)
2025-07-05 19:34:59 [http-nio-8080-exec-7] INFO  com.aiplatform.service.ChatService - 消息发送成功: messageId=114
2025-07-05 19:34:59 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* update
        for com.aiplatform.entity.Chat */update chats 
    set
        ai_type=?,
        created_at=?,
        is_favorite=?,
        is_protected=?,
        last_activity=?,
        message_count=?,
        title=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-07-05 19:34:59 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Securing GET /history/chats
2025-07-05 19:34:59 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - === CustomUserDetailsService.loadUserByUsername ===
2025-07-05 19:34:59 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 加载用户: cakravartin@example.com
2025-07-05 19:34:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:34:59 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 找到用户: id=7, email=cakravartin@example.com, username=Cakravartin, role=user, status=active
2025-07-05 19:34:59 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户权限: ROLE_user
2025-07-05 19:34:59 [http-nio-8080-exec-5] INFO  c.a.s.CustomUserDetailsService - 用户详情构建完成: authorities=[ROLE_user]
2025-07-05 19:34:59 [http-nio-8080-exec-5] DEBUG o.s.security.web.FilterChainProxy - Secured GET /history/chats
2025-07-05 19:34:59 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 获取用户对话列表: page=0, size=20, keyword=null
2025-07-05 19:34:59 [http-nio-8080-exec-5] DEBUG c.a.controller.HistoryController - 当前认证主体: cakravartin@example.com
2025-07-05 19:34:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.last_login,
        u1_0.password,
        u1_0.permissions,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.email=?
2025-07-05 19:34:59 [http-nio-8080-exec-5] INFO  c.a.controller.HistoryController - 查询参数: keyword=null, aiType=null, favorite=null, timeFilter=null
2025-07-05 19:34:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Chat c 
    WHERE
        c.userId = :userId 
        AND (
            :keyword IS NULL 
            OR c.title LIKE :keyword_1
        ) 
        AND (
            :aiType IS NULL 
            OR c.aiType = :aiType
        ) 
        AND (
            :isFavorite IS NULL 
            OR c.isFavorite = :isFavorite
        ) 
        AND (
            :timeFilter IS NULL 
            OR c.lastActivity >= :timeFilter
        ) 
    ORDER BY
        c.lastActivity DESC */ select
            c1_0.id,
            c1_0.ai_type,
            c1_0.created_at,
            c1_0.is_favorite,
            c1_0.is_protected,
            c1_0.last_activity,
            c1_0.message_count,
            c1_0.title,
            c1_0.updated_at,
            c1_0.user_id 
        from
            chats c1_0 
        where
            c1_0.user_id=? 
            and (
                ? is null 
                or c1_0.title like replace(?, '\\', '\\\\')
            ) 
            and (
                ? is null 
                or c1_0.ai_type=?
            ) 
            and (
                ? is null 
                or c1_0.is_favorite=?
            ) 
            and (
                ? is null 
                or c1_0.last_activity>=?
            ) 
        order by
            c1_0.last_activity desc 
        limit
            ?, ?
